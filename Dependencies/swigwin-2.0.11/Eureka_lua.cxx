/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Button swig_types[0]
#define SWIGTYPE_p_LuaWrap swig_types[1]
#define SWIGTYPE_p_Physics swig_types[2]
#define SWIGTYPE_p_ProgressBar swig_types[3]
#define SWIGTYPE_p_Pywrap swig_types[4]
#define SWIGTYPE_p_SDL_BlendMode swig_types[5]
#define SWIGTYPE_p_SDL_Event swig_types[6]
#define SWIGTYPE_p_SDL_Renderer swig_types[7]
#define SWIGTYPE_p_SDL_Texture swig_types[8]
#define SWIGTYPE_p_Timer swig_types[9]
#define SWIGTYPE_p_Trigger swig_types[10]
#define SWIGTYPE_p_UI swig_types[11]
#define SWIGTYPE_p_Uint8 swig_types[12]
#define SWIGTYPE_p_Unit swig_types[13]
#define SWIGTYPE_p_data_base swig_types[14]
#define SWIGTYPE_p_draw_base swig_types[15]
#define SWIGTYPE_p_fuzzy_obj swig_types[16]
#define SWIGTYPE_p_inputKeyboard swig_types[17]
#define SWIGTYPE_p_inputMouse swig_types[18]
#define SWIGTYPE_p_int swig_types[19]
#define SWIGTYPE_p_lua_State swig_types[20]
#define SWIGTYPE_p_math_VECTOR swig_types[21]
#define SWIGTYPE_p_math_point swig_types[22]
#define SWIGTYPE_p_pChar swig_types[23]
#define SWIGTYPE_p_psudo_type swig_types[24]
#define SWIGTYPE_p_sound_base swig_types[25]
#define SWIGTYPE_p_std__stackT_fuzzy_obj_t swig_types[26]
#define SWIGTYPE_p_std__string swig_types[27]
#define SWIGTYPE_p_textbox swig_types[28]
#define SWIGTYPE_p_unsigned_char swig_types[29]
#define SWIGTYPE_p_void swig_types[30]
static swig_type_info *swig_types[32];
static swig_module_info swig_module = {swig_types, 31, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Eureka"
#define SWIG_init      luaopen_Eureka
#define SWIG_init_user luaopen_Eureka_user

#define SWIG_LUACODE   luaopen_Eureka_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "physics.h"
#include "data_base.h"
#include "draw_base.h"
#include "ui.h"
#include "unit.h"
#include "textbox.h"
#include "button.h"
#include "trigger.h"
#include "sound_baseB.h"
#include "Timer.h"
#include "progressbar.h"
#include "globals.h"
#include "conversion.h"
#include "input.h"
#include "scriptwrap.h"
#include "plugin.h"
#include "game.h"
#include "luawrap.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_math_VECTOR_endX_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::endX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endX",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::endX",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endX_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->endX = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_endX_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::endX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endX",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endX_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->endX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_endY_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::endY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endY",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::endY",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endY_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->endY = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_endY_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::endY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endY",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endY_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->endY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_direction_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("math_VECTOR::direction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::direction",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::direction",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_direction_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->direction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_direction_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  double result;
  
  SWIG_check_num_args("math_VECTOR::direction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::direction",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_direction_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (double) ((arg1)->direction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_magnitude_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::magnitude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::magnitude",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::magnitude",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_magnitude_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->magnitude = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_magnitude_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::magnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::magnitude",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_magnitude_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->magnitude);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_math_VECTOR(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *result = 0 ;
  
  SWIG_check_num_args("math_VECTOR::math_VECTOR",0,0)
  result = (math_VECTOR *)new math_VECTOR();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math_VECTOR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_math_VECTOR(void *obj) {
math_VECTOR *arg1 = (math_VECTOR *) obj;
delete arg1;
}
static swig_lua_method swig_math_VECTOR_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_math_VECTOR_attributes[] = {
    { "endX", _wrap_math_VECTOR_endX_get, _wrap_math_VECTOR_endX_set},
    { "endY", _wrap_math_VECTOR_endY_get, _wrap_math_VECTOR_endY_set},
    { "direction", _wrap_math_VECTOR_direction_get, _wrap_math_VECTOR_direction_set},
    { "magnitude", _wrap_math_VECTOR_magnitude_get, _wrap_math_VECTOR_magnitude_set},
    {0,0,0}
};
static swig_lua_attribute swig_math_VECTOR_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_math_VECTOR_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_math_VECTOR_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_math_VECTOR_bases[] = {0};
static const char *swig_math_VECTOR_base_names[] = {0};
static swig_lua_class _wrap_class_math_VECTOR = { "math_VECTOR", &SWIGTYPE_p_math_VECTOR,_wrap_new_math_VECTOR, swig_delete_math_VECTOR, swig_math_VECTOR_methods, swig_math_VECTOR_attributes, { "math_VECTOR", swig_math_VECTOR_cls_methods, swig_math_VECTOR_cls_attributes, swig_math_VECTOR_cls_constants }, swig_math_VECTOR_bases, swig_math_VECTOR_base_names };

static int _wrap_math_point_X_set(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_point::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::X",1,"math_point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_point::X",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_X_set",1,SWIGTYPE_p_math_point);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_point_X_get(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int result;
  
  SWIG_check_num_args("math_point::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::X",1,"math_point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_X_get",1,SWIGTYPE_p_math_point);
  }
  
  result = (int) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_point_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_point::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::Y",1,"math_point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_point::Y",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_Y_set",1,SWIGTYPE_p_math_point);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_point_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int result;
  
  SWIG_check_num_args("math_point::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::Y",1,"math_point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_Y_get",1,SWIGTYPE_p_math_point);
  }
  
  result = (int) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_math_point(lua_State* L) {
  int SWIG_arg = 0;
  math_point *result = 0 ;
  
  SWIG_check_num_args("math_point::math_point",0,0)
  result = (math_point *)new math_point();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math_point,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_math_point(void *obj) {
math_point *arg1 = (math_point *) obj;
delete arg1;
}
static swig_lua_method swig_math_point_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_math_point_attributes[] = {
    { "X", _wrap_math_point_X_get, _wrap_math_point_X_set},
    { "Y", _wrap_math_point_Y_get, _wrap_math_point_Y_set},
    {0,0,0}
};
static swig_lua_attribute swig_math_point_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_math_point_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_math_point_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_math_point_bases[] = {0};
static const char *swig_math_point_base_names[] = {0};
static swig_lua_class _wrap_class_math_point = { "math_point", &SWIGTYPE_p_math_point,_wrap_new_math_point, swig_delete_math_point, swig_math_point_methods, swig_math_point_attributes, { "math_point", swig_math_point_cls_methods, swig_math_point_cls_attributes, swig_math_point_cls_constants }, swig_math_point_bases, swig_math_point_base_names };

static int _wrap_Physics_NewtonianForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::NewtonianForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::NewtonianForce",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::NewtonianForce",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->NewtonianForce(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_NewtonianForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::NewtonianForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::NewtonianForce",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->NewtonianForce();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_NewtonianForce(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_NewtonianForce__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_NewtonianForce__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_NewtonianForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::NewtonianForce(char)\n"
    "    Physics::NewtonianForce()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_Relativity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::Relativity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Relativity",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::Relativity",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Relativity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->Relativity(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_Relativity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::Relativity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Relativity",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Relativity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->Relativity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_Relativity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_Relativity__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_Relativity__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_Relativity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::Relativity(char)\n"
    "    Physics::Relativity()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_rel_NewtonianForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::rel_NewtonianForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_NewtonianForce",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::rel_NewtonianForce",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->rel_NewtonianForce(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_rel_NewtonianForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::rel_NewtonianForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_NewtonianForce",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->rel_NewtonianForce();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_rel_NewtonianForce(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_rel_NewtonianForce__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_rel_NewtonianForce__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_rel_NewtonianForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::rel_NewtonianForce(char)\n"
    "    Physics::rel_NewtonianForce()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_rel_CalculateForceB(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::rel_CalculateForceB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_CalculateForceB",1,"Physics *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Physics::rel_CalculateForceB",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_CalculateForceB",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)(arg1)->rel_CalculateForceB(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_Impulse(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_VECTOR arg2 ;
  math_VECTOR *argp2 ;
  
  SWIG_check_num_args("Physics::Impulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Impulse",1,"Physics *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::Impulse",2,"math_VECTOR");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Impulse",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("Physics_Impulse",2,SWIGTYPE_p_math_VECTOR);
  }
  arg2 = *argp2;
  
  (arg1)->Impulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_Friction(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  bool arg3 ;
  double result;
  
  SWIG_check_num_args("Physics::Friction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Friction",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Friction",2,"double");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Physics::Friction",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Friction",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (double)(arg1)->Friction(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_Update_Velocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::Update_Velocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Velocity",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Update_Velocity",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Velocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->Update_Velocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_UpdateForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("Physics::UpdateForce",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::UpdateForce",1,"Physics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::UpdateForce",2,"Physics *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::UpdateForce",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Physics::UpdateForce",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->UpdateForce(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_UpdateForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Physics::UpdateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::UpdateForce",1,"Physics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::UpdateForce",2,"Physics *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::UpdateForce",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->UpdateForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_UpdateForce(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Physics_UpdateForce__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Physics_UpdateForce__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_UpdateForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::UpdateForce(Physics *,int,bool)\n"
    "    Physics::UpdateForce(Physics *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_Update_Acceleration(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  
  SWIG_check_num_args("Physics::Update_Acceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Acceleration",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Acceleration",1,SWIGTYPE_p_Physics);
  }
  
  (arg1)->Update_Acceleration();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_CalculateDirectionDegrees(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateDirectionDegrees",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateDirectionDegrees",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)((Physics const *)arg1)->math_CalculateDirectionDegrees(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point arg2 ;
  math_point *argp2 ;
  double result;
  
  SWIG_check_num_args("Physics::GetDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetDistance",1,"Physics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::GetDistance",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetDistance",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_GetDistance",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  result = (double)((Physics const *)arg1)->GetDistance(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetLoc(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point result;
  
  SWIG_check_num_args("Physics::GetLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetLoc",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetLoc",1,SWIGTYPE_p_Physics);
  }
  
  result = ((Physics const *)arg1)->GetLoc();
  {
    math_point * resultptr = new math_point((const math_point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_math_point,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetMU(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetMU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetMU",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetMU",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetMU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetMass(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetMass",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetMass",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetB2DDirection(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Physics::GetB2DDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetB2DDirection",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetB2DDirection",1,SWIGTYPE_p_Physics);
  }
  
  result = ((Physics const *)arg1)->GetB2DDirection();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetBMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetBMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetBMagnitude",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetBMagnitude",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetBMagnitude();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetGravity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetGravity",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetGravity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetGravity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::GetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetVelocity",1,"Physics const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::GetVelocity",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetVelocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)((Physics const *)arg1)->GetVelocity(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetElasticity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetElasticity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetElasticity",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetElasticity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetElasticity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_CalculateForceFromChargedParticles(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  math_point arg3 ;
  math_point *argp3 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateForceFromChargedParticles",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",3,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromChargedParticles",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromChargedParticles",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  result = (double)((Physics const *)arg1)->math_CalculateForceFromChargedParticles(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_CalculateEField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point arg2 ;
  math_point *argp2 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateEField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateEField",1,"Physics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::math_CalculateEField",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  result = (double)((Physics const *)arg1)->math_CalculateEField(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_CalculateEField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateEField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateEField",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateEField",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Physics const *)arg1)->math_CalculateEField(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_CalculateEField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Physics_math_CalculateEField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Physics_math_CalculateEField__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_math_CalculateEField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::math_CalculateEField(math_point) const\n"
    "    Physics::math_CalculateEField(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_math_Sign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("Physics::math_Sign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_Sign",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_Sign",2,"Physics *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Physics::math_Sign",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((Physics const *)arg1)->math_Sign(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_Sign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  char arg3 ;
  int result;
  
  SWIG_check_num_args("Physics::math_Sign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_Sign",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_Sign",2,"Physics *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::math_Sign",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  result = (int)((Physics const *)arg1)->math_Sign(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_Sign(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Physics_math_Sign__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_math_Sign__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_math_Sign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::math_Sign(Physics *,bool) const\n"
    "    Physics::math_Sign(Physics *,char) const\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_math_CalculateMomentum(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  Physics *arg3 = (Physics *) 0 ;
  
  SWIG_check_num_args("Physics::math_CalculateMomentum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateMomentum",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_CalculateMomentum",2,"Physics *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Physics::math_CalculateMomentum",3,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",2,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",3,SWIGTYPE_p_Physics);
  }
  
  ((Physics const *)arg1)->math_CalculateMomentum(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_CalculateForceFromMagneticField(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  std::string arg2 ;
  double arg3 ;
  std::string *argp2 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateForceFromMagneticField",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",1,"Physics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromMagneticField",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromMagneticField",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)((Physics const *)arg1)->math_CalculateForceFromMagneticField(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetForceCount(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::GetForceCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetForceCount",1,"Physics const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::GetForceCount",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetForceCount",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)((Physics const *)arg1)->GetForceCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_isUnmovable(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  bool result;
  
  SWIG_check_num_args("Physics::isUnmovable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::isUnmovable",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_isUnmovable",1,SWIGTYPE_p_Physics);
  }
  
  result = (bool)((Physics const *)arg1)->isUnmovable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_SetForceCount__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetForceCount",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetForceCount",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetForceCount",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetForceCount",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetForceCount",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetForceCount(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_SetForceCount__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetForceCount",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetForceCount",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetForceCount",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetForceCount",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetForceCount",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetForceCount(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_SetForceCount(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_SetForceCount__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_SetForceCount__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_SetForceCount'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::SetForceCount(int,char)\n"
    "    Physics::SetForceCount(double,char)\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_SetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetVelocity",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetVelocity",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetVelocity",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetVelocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetVelocity(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_AddForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::AddForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::AddForce",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::AddForce",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::AddForce",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_AddForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->AddForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_AddForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::AddForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::AddForce",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::AddForce",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_AddForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->AddForce(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_AddForce(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Physics_AddForce__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_AddForce__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_AddForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::AddForce(double,char)\n"
    "    Physics::AddForce(double)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Physics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Physics::Physics",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Physics::Physics",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Physics *)new Physics((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Physics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Physics::Physics",0,0)
  result = (Physics *)new Physics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Physics(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Physics__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Physics__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Physics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::Physics(char const *)\n"
    "    Physics::Physics()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_Update_Position(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::Update_Position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Position",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Update_Position",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Position",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->Update_Position(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_ChangePlanetGravitationalConstant(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::ChangePlanetGravitationalConstant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::ChangePlanetGravitationalConstant",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::ChangePlanetGravitationalConstant",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_ChangePlanetGravitationalConstant",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->ChangePlanetGravitationalConstant(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_Load_Physics(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Physics::Load_Physics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Load_Physics",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::Load_Physics",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Load_Physics",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->Load_Physics((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetCharge(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetCharge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetCharge",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetCharge",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetCharge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Physics(void *obj) {
Physics *arg1 = (Physics *) obj;
delete arg1;
}
static swig_lua_method swig_Physics_methods[] = {
    {"NewtonianForce", _wrap_Physics_NewtonianForce}, 
    {"Relativity", _wrap_Physics_Relativity}, 
    {"rel_NewtonianForce", _wrap_Physics_rel_NewtonianForce}, 
    {"rel_CalculateForceB", _wrap_Physics_rel_CalculateForceB}, 
    {"Impulse", _wrap_Physics_Impulse}, 
    {"Friction", _wrap_Physics_Friction}, 
    {"Update_Velocity", _wrap_Physics_Update_Velocity}, 
    {"UpdateForce", _wrap_Physics_UpdateForce}, 
    {"Update_Acceleration", _wrap_Physics_Update_Acceleration}, 
    {"math_CalculateDirectionDegrees", _wrap_Physics_math_CalculateDirectionDegrees}, 
    {"GetDistance", _wrap_Physics_GetDistance}, 
    {"GetLoc", _wrap_Physics_GetLoc}, 
    {"GetMU", _wrap_Physics_GetMU}, 
    {"GetMass", _wrap_Physics_GetMass}, 
    {"GetB2DDirection", _wrap_Physics_GetB2DDirection}, 
    {"GetBMagnitude", _wrap_Physics_GetBMagnitude}, 
    {"GetGravity", _wrap_Physics_GetGravity}, 
    {"GetVelocity", _wrap_Physics_GetVelocity}, 
    {"GetElasticity", _wrap_Physics_GetElasticity}, 
    {"math_CalculateForceFromChargedParticles", _wrap_Physics_math_CalculateForceFromChargedParticles}, 
    {"math_CalculateEField", _wrap_Physics_math_CalculateEField}, 
    {"math_Sign", _wrap_Physics_math_Sign}, 
    {"math_CalculateMomentum", _wrap_Physics_math_CalculateMomentum}, 
    {"math_CalculateForceFromMagneticField", _wrap_Physics_math_CalculateForceFromMagneticField}, 
    {"GetForceCount", _wrap_Physics_GetForceCount}, 
    {"isUnmovable", _wrap_Physics_isUnmovable}, 
    {"SetForceCount", _wrap_Physics_SetForceCount}, 
    {"SetVelocity", _wrap_Physics_SetVelocity}, 
    {"AddForce", _wrap_Physics_AddForce}, 
    {"Update_Position", _wrap_Physics_Update_Position}, 
    {"ChangePlanetGravitationalConstant", _wrap_Physics_ChangePlanetGravitationalConstant}, 
    {"Load_Physics", _wrap_Physics_Load_Physics}, 
    {"GetCharge", _wrap_Physics_GetCharge}, 
    {0,0}
};
static swig_lua_attribute swig_Physics_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Physics_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Physics_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Physics_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Physics_bases[] = {0};
static const char *swig_Physics_base_names[] = {0};
static swig_lua_class _wrap_class_Physics = { "Physics", &SWIGTYPE_p_Physics,_wrap_new_Physics, swig_delete_Physics, swig_Physics_methods, swig_Physics_attributes, { "Physics", swig_Physics_cls_methods, swig_Physics_cls_attributes, swig_Physics_cls_constants }, swig_Physics_bases, swig_Physics_base_names };

static int _wrap_CalculateDistance(lua_State* L) {
  int SWIG_arg = 0;
  math_point arg1 ;
  math_point arg2 ;
  math_point *argp1 ;
  math_point *argp2 ;
  int result;
  
  SWIG_check_num_args("CalculateDistance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("CalculateDistance",1,"math_point");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CalculateDistance",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("CalculateDistance",1,SWIGTYPE_p_math_point);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("CalculateDistance",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  result = (int)CalculateDistance(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_data_base__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  bool arg2 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("data_base::data_base",1,"char const []");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("data_base::data_base",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (data_base *)new data_base((char const (*))arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_data_base__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("data_base::data_base",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (data_base *)new data_base((char const (*))arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_data_base__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",0,0)
  result = (data_base *)new data_base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_data_base(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_data_base__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_data_base__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_data_base__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_data_base'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::data_base(char const [],bool)\n"
    "    data_base::data_base(char const [])\n"
    "    data_base::data_base()\n");
  lua_error(L);return 0;
}


static int _wrap_data_base_GetStrBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrBuffer",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrBuffer",1,SWIGTYPE_p_data_base);
  }
  
  result = ((data_base const *)arg1)->GetStrBuffer();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetValueFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("data_base::GetValueFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetValueFromData",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetValueFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetValueFromData",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetValueFromData",2,SWIGTYPE_p_std__string);
  }
  
  result = (double)((data_base const *)arg1)->GetValueFromData((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetStrFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrFromData",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetStrFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrFromData",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetStrFromData",2,SWIGTYPE_p_std__string);
  }
  
  result = ((data_base const *)arg1)->GetStrFromData((std::string const &)*arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetIntFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("data_base::GetIntFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetIntFromData",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetIntFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetIntFromData",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetIntFromData",2,SWIGTYPE_p_std__string);
  }
  
  result = (int)((data_base const *)arg1)->GetIntFromData((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetValueFromDataWithLine(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("data_base::GetValueFromDataWithLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetValueFromDataWithLine",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetValueFromDataWithLine",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)((data_base const *)arg1)->GetValueFromDataWithLine((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetStrFromDataWithLine(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrFromDataWithLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrFromDataWithLine",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetStrFromDataWithLine",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((data_base const *)arg1)->GetStrFromDataWithLine((std::string const &)*arg2,arg3);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetStateOfInternalBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::GetStateOfInternalBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStateOfInternalBuffer",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStateOfInternalBuffer",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->GetStateOfInternalBuffer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_OpenFileAndGetBinBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::OpenFileAndGetBinBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFileAndGetBinBuffer",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFileAndGetBinBuffer",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFileAndGetBinBuffer",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->OpenFileAndGetBinBuffer(arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_OpenFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("data_base::OpenFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFile",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("data_base::OpenFile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->OpenFile((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_OpenFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenFile((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_OpenFile(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_data_base_OpenFile__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_data_base_OpenFile__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_OpenFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::OpenFile(char const *,bool)\n"
    "    data_base::OpenFile(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_data_base_OpenFileForQuickWrite(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenFileForQuickWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFileForQuickWrite",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFileForQuickWrite",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFileForQuickWrite",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenFileForQuickWrite((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_OpenBinFileForQuickWrite(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenBinFileForQuickWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenBinFileForQuickWrite",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenBinFileForQuickWrite",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenBinFileForQuickWrite",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenBinFileForQuickWrite((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_CloseFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("data_base::CloseFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CloseFile",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::CloseFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CloseFile",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_CloseFile",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->CloseFile((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_CloseFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::CloseFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CloseFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CloseFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->CloseFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_CloseFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_data_base_CloseFile__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_data_base_CloseFile__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_CloseFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::CloseFile(std::string const &)\n"
    "    data_base::CloseFile()\n");
  lua_error(L);return 0;
}


static int _wrap_data_base_GetMode(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::GetMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetMode",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetMode",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->GetMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_WriteValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("data_base::WriteValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValue",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::WriteValue",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("data_base::WriteValue",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValue",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValue",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValue",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->WriteValue((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_WriteValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("data_base::WriteValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValue",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::WriteValue",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValue",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValue",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->WriteValue((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_WriteValue(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_data_base_WriteValue__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_data_base_WriteValue__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_WriteValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::WriteValue(std::string const &,std::string const &)\n"
    "    data_base::WriteValue(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_data_base_WriteValueWithLineIndex(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("data_base::WriteValueWithLineIndex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValueWithLineIndex",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValueWithLineIndex",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValueWithLineIndex",3,SWIGTYPE_p_std__string);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->WriteValueWithLineIndex((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_WriteValueAndFlush(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("data_base::WriteValueAndFlush",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValueAndFlush",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::WriteValueAndFlush",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValueAndFlush",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValueAndFlush",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->WriteValueAndFlush((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetLineCount(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  int result;
  
  SWIG_check_num_args("data_base::GetLineCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetLineCount",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetLineCount",1,SWIGTYPE_p_data_base);
  }
  
  result = (int)((data_base const *)arg1)->GetLineCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetNumInstances(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("data_base::GetNumInstances",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetNumInstances",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetNumInstances",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetNumInstances",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetNumInstances",2,SWIGTYPE_p_std__string);
  }
  
  result = (int)((data_base const *)arg1)->GetNumInstances((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_GetLastOutput(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetLastOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetLastOutput",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetLastOutput",1,SWIGTYPE_p_data_base);
  }
  
  result = ((data_base const *)arg1)->GetLastOutput();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_isOutputOpen(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::isOutputOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::isOutputOpen",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_isOutputOpen",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->isOutputOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_SearchTermExists(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::SearchTermExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::SearchTermExists",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::SearchTermExists",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_SearchTermExists",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_SearchTermExists",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((data_base const *)arg1)->SearchTermExists((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_RestoreFileContents(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::RestoreFileContents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::RestoreFileContents",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_RestoreFileContents",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->RestoreFileContents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_RefreshFile(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::RefreshFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::RefreshFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_RefreshFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->RefreshFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_CreateNewFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CreateNewFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::CreateNewFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CreateNewFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->CreateNewFile((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_CreateNewFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CreateNewFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CreateNewFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->CreateNewFile();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_CreateNewFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_data_base_CreateNewFile__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_data_base_CreateNewFile__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_CreateNewFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::CreateNewFile(char const *)\n"
    "    data_base::CreateNewFile()\n");
  lua_error(L);return 0;
}


static int _wrap_data_base_CreateNewFile_static(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile_static",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("data_base::CreateNewFile_static",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  data_base::CreateNewFile_static((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_data_base(void *obj) {
data_base *arg1 = (data_base *) obj;
delete arg1;
}
static swig_lua_method swig_data_base_methods[] = {
    {"GetStrBuffer", _wrap_data_base_GetStrBuffer}, 
    {"GetValueFromData", _wrap_data_base_GetValueFromData}, 
    {"GetStrFromData", _wrap_data_base_GetStrFromData}, 
    {"GetIntFromData", _wrap_data_base_GetIntFromData}, 
    {"GetValueFromDataWithLine", _wrap_data_base_GetValueFromDataWithLine}, 
    {"GetStrFromDataWithLine", _wrap_data_base_GetStrFromDataWithLine}, 
    {"GetStateOfInternalBuffer", _wrap_data_base_GetStateOfInternalBuffer}, 
    {"OpenFileAndGetBinBuffer", _wrap_data_base_OpenFileAndGetBinBuffer}, 
    {"OpenFile", _wrap_data_base_OpenFile}, 
    {"OpenFileForQuickWrite", _wrap_data_base_OpenFileForQuickWrite}, 
    {"OpenBinFileForQuickWrite", _wrap_data_base_OpenBinFileForQuickWrite}, 
    {"CloseFile", _wrap_data_base_CloseFile}, 
    {"GetMode", _wrap_data_base_GetMode}, 
    {"WriteValue", _wrap_data_base_WriteValue}, 
    {"WriteValueWithLineIndex", _wrap_data_base_WriteValueWithLineIndex}, 
    {"WriteValueAndFlush", _wrap_data_base_WriteValueAndFlush}, 
    {"GetLineCount", _wrap_data_base_GetLineCount}, 
    {"GetNumInstances", _wrap_data_base_GetNumInstances}, 
    {"GetLastOutput", _wrap_data_base_GetLastOutput}, 
    {"isOutputOpen", _wrap_data_base_isOutputOpen}, 
    {"SearchTermExists", _wrap_data_base_SearchTermExists}, 
    {"RestoreFileContents", _wrap_data_base_RestoreFileContents}, 
    {"RefreshFile", _wrap_data_base_RefreshFile}, 
    {"CreateNewFile", _wrap_data_base_CreateNewFile}, 
    {0,0}
};
static swig_lua_attribute swig_data_base_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_data_base_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_data_base_cls_methods[] = {
    {"CreateNewFile_static", _wrap_data_base_CreateNewFile_static}, 
    {0,0}
};
static swig_lua_const_info swig_data_base_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_data_base_bases[] = {0};
static const char *swig_data_base_base_names[] = {0};
static swig_lua_class _wrap_class_data_base = { "data_base", &SWIGTYPE_p_data_base,_wrap_new_data_base, swig_delete_data_base, swig_data_base_methods, swig_data_base_attributes, { "data_base", swig_data_base_cls_methods, swig_data_base_cls_attributes, swig_data_base_cls_constants }, swig_data_base_bases, swig_data_base_base_names };

static int _wrap_copyfile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("copyfile",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("copyfile",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copyfile",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("copyfile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("copyfile",1,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("copyfile",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)copyfile((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyfile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("copyfile",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("copyfile",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copyfile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("copyfile",1,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("copyfile",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)copyfile((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copyfile(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copyfile__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_copyfile__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'copyfile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    copyfile(std::string const &,std::string const &,bool)\n"
    "    copyfile(std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_draw_base_Load_Texture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("draw_base::Load_Texture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::Load_Texture",1,"draw_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("draw_base::Load_Texture",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::Load_Texture",3,"SDL_Renderer &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw_base::Load_Texture",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->Load_Texture((char const *)arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_Load_Texture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  
  SWIG_check_num_args("draw_base::Load_Texture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::Load_Texture",1,"draw_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("draw_base::Load_Texture",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::Load_Texture",3,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->Load_Texture((char const *)arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_Load_Texture(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_draw_base_Load_Texture__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_draw_base_Load_Texture__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'draw_base_Load_Texture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    draw_base::Load_Texture(char const *,SDL_Renderer &,int)\n"
    "    draw_base::Load_Texture(char const *,SDL_Renderer &)\n");
  lua_error(L);return 0;
}


static int _wrap_draw_base_apply_surface(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int arg2 ;
  int arg3 ;
  SDL_Renderer *arg4 = 0 ;
  
  SWIG_check_num_args("draw_base::apply_surface",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::apply_surface",1,"draw_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("draw_base::apply_surface",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("draw_base::apply_surface",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("draw_base::apply_surface",4,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_apply_surface",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_apply_surface",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->apply_surface(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_GetHeightOfMainRect(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetHeightOfMainRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetHeightOfMainRect",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetHeightOfMainRect",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetHeightOfMainRect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_GetWidthOfMainRect(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetWidthOfMainRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetWidthOfMainRect",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetWidthOfMainRect",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetWidthOfMainRect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_GetAnimCounter(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetAnimCounter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetAnimCounter",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetAnimCounter",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetAnimCounter();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_GetDOM(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("draw_base::GetDOM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetDOM",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetDOM",1,SWIGTYPE_p_draw_base);
  }
  
  result = (data_base *)((draw_base const *)arg1)->GetDOM();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_isNoLoop(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("draw_base::isNoLoop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::isNoLoop",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_isNoLoop",1,SWIGTYPE_p_draw_base);
  }
  
  result = (bool)((draw_base const *)arg1)->isNoLoop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_GetTexture(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_Texture *result = 0 ;
  
  SWIG_check_num_args("draw_base::GetTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetTexture",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetTexture",1,SWIGTYPE_p_draw_base);
  }
  
  result = (SDL_Texture *) &((draw_base const *)arg1)->GetTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_setColor(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  Uint8 arg2 ;
  Uint8 arg3 ;
  Uint8 arg4 ;
  Uint8 *argp2 ;
  Uint8 *argp3 ;
  Uint8 *argp4 ;
  
  SWIG_check_num_args("draw_base::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setColor",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setColor",2,"Uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::setColor",3,"Uint8");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("draw_base::setColor",4,"Uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setColor",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",2,SWIGTYPE_p_Uint8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",3,SWIGTYPE_p_Uint8);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",4,SWIGTYPE_p_Uint8);
  }
  arg4 = *argp4;
  
  (arg1)->setColor(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_setBlendMode(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_BlendMode arg2 ;
  SDL_BlendMode *argp2 ;
  
  SWIG_check_num_args("draw_base::setBlendMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setBlendMode",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setBlendMode",2,"SDL_BlendMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setBlendMode",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SDL_BlendMode,0))){
    SWIG_fail_ptr("draw_base_setBlendMode",2,SWIGTYPE_p_SDL_BlendMode);
  }
  arg2 = *argp2;
  
  (arg1)->setBlendMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_setAlpha(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  Uint8 arg2 ;
  Uint8 *argp2 ;
  
  SWIG_check_num_args("draw_base::setAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setAlpha",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setAlpha",2,"Uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setAlpha",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setAlpha",2,SWIGTYPE_p_Uint8);
  }
  arg2 = *argp2;
  
  (arg1)->setAlpha(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_ClearTexture(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  
  SWIG_check_num_args("draw_base::ClearTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::ClearTexture",1,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_ClearTexture",1,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->ClearTexture();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_SetTextureFromPointer(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_Texture *arg2 = (SDL_Texture *) 0 ;
  
  SWIG_check_num_args("draw_base::SetTextureFromPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::SetTextureFromPointer",1,"draw_base *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("draw_base::SetTextureFromPointer",2,"SDL_Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromPointer",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromPointer",2,SWIGTYPE_p_SDL_Texture);
  }
  
  (arg1)->SetTextureFromPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_SetTextureFromRef(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_Texture *arg2 = 0 ;
  
  SWIG_check_num_args("draw_base::SetTextureFromRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::SetTextureFromRef",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::SetTextureFromRef",2,"SDL_Texture &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromRef",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromRef",2,SWIGTYPE_p_SDL_Texture);
  }
  
  (arg1)->SetTextureFromRef(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_draw_base(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("draw_base::draw_base",0,0)
  result = (draw_base *)new draw_base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_draw_base(void *obj) {
draw_base *arg1 = (draw_base *) obj;
delete arg1;
}
static swig_lua_method swig_draw_base_methods[] = {
    {"Load_Texture", _wrap_draw_base_Load_Texture}, 
    {"apply_surface", _wrap_draw_base_apply_surface}, 
    {"GetHeightOfMainRect", _wrap_draw_base_GetHeightOfMainRect}, 
    {"GetWidthOfMainRect", _wrap_draw_base_GetWidthOfMainRect}, 
    {"GetAnimCounter", _wrap_draw_base_GetAnimCounter}, 
    {"GetDOM", _wrap_draw_base_GetDOM}, 
    {"isNoLoop", _wrap_draw_base_isNoLoop}, 
    {"GetTexture", _wrap_draw_base_GetTexture}, 
    {"setColor", _wrap_draw_base_setColor}, 
    {"setBlendMode", _wrap_draw_base_setBlendMode}, 
    {"setAlpha", _wrap_draw_base_setAlpha}, 
    {"ClearTexture", _wrap_draw_base_ClearTexture}, 
    {"SetTextureFromPointer", _wrap_draw_base_SetTextureFromPointer}, 
    {"SetTextureFromRef", _wrap_draw_base_SetTextureFromRef}, 
    {0,0}
};
static swig_lua_attribute swig_draw_base_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_draw_base_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_draw_base_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_draw_base_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_draw_base_bases[] = {0};
static const char *swig_draw_base_base_names[] = {0};
static swig_lua_class _wrap_class_draw_base = { "draw_base", &SWIGTYPE_p_draw_base,_wrap_new_draw_base, swig_delete_draw_base, swig_draw_base_methods, swig_draw_base_attributes, { "draw_base", swig_draw_base_cls_methods, swig_draw_base_cls_attributes, swig_draw_base_cls_constants }, swig_draw_base_bases, swig_draw_base_base_names };

static int _wrap_apply_surface__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  SWIG_check_num_args("apply_surface",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("apply_surface",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("apply_surface",6,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  apply_surface(arg1,arg2,*arg3,*arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apply_surface__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  int arg5 ;
  
  SWIG_check_num_args("apply_surface",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("apply_surface",5,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  apply_surface(arg1,arg2,*arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apply_surface__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  
  SWIG_check_num_args("apply_surface",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  apply_surface(arg1,arg2,*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_apply_surface(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_apply_surface__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_apply_surface__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_apply_surface__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'apply_surface'\n"
    "  Possible C/C++ prototypes are:\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &,int,int)\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &,int)\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &)\n");
  lua_error(L);return 0;
}


static int _wrap_LoadTexture(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  SDL_Texture *result = 0 ;
  
  SWIG_check_num_args("LoadTexture",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LoadTexture",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LoadTexture",2,"SDL_Renderer &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("LoadTexture",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (SDL_Texture *)LoadTexture((char const *)arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UI(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  UI *result = 0 ;
  
  SWIG_check_num_args("UI::UI",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("UI::UI",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("UI::UI",2,"SDL_Renderer &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_UI",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (UI *)new UI((char const *)arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UI,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  bool result;
  
  SWIG_check_num_args("UI::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::isVisible",1,"UI const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_isVisible",1,SWIGTYPE_p_UI);
  }
  
  result = (bool)((UI const *)arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_toggleVisibility(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::toggleVisibility",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::toggleVisibility",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_toggleVisibility",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->toggleVisibility();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_Update(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::Update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::Update",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_Update",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->Update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_ProcessEvents(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  SDL_Event *arg2 = (SDL_Event *) 0 ;
  
  SWIG_check_num_args("UI::ProcessEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::ProcessEvents",1,"UI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("UI::ProcessEvents",2,"SDL_Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_ProcessEvents",1,SWIGTYPE_p_UI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("UI_ProcessEvents",2,SWIGTYPE_p_SDL_Event);
  }
  
  (arg1)->ProcessEvents(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_AddNumToPBar(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("UI::AddNumToPBar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::AddNumToPBar",1,"UI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UI::AddNumToPBar",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("UI::AddNumToPBar",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_AddNumToPBar",1,SWIGTYPE_p_UI);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("UI_AddNumToPBar",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->AddNumToPBar(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UI_Draw(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::Draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::Draw",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_Draw",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->Draw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UI(void *obj) {
UI *arg1 = (UI *) obj;
delete arg1;
}
static swig_lua_method swig_UI_methods[] = {
    {"isVisible", _wrap_UI_isVisible}, 
    {"toggleVisibility", _wrap_UI_toggleVisibility}, 
    {"Update", _wrap_UI_Update}, 
    {"ProcessEvents", _wrap_UI_ProcessEvents}, 
    {"AddNumToPBar", _wrap_UI_AddNumToPBar}, 
    {"Draw", _wrap_UI_Draw}, 
    {0,0}
};
static swig_lua_attribute swig_UI_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_UI_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UI_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_UI_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_UI_bases[] = {0};
static const char *swig_UI_base_names[] = {0};
static swig_lua_class _wrap_class_UI = { "UI", &SWIGTYPE_p_UI,_wrap_new_UI, swig_delete_UI, swig_UI_methods, swig_UI_attributes, { "UI", swig_UI_cls_methods, swig_UI_cls_attributes, swig_UI_cls_constants }, swig_UI_bases, swig_UI_base_names };

static int _wrap_new_Unit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  Timer *arg5 = 0 ;
  bool arg6 ;
  bool arg7 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Unit::Unit",5,"Timer &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Unit::Unit",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Unit::Unit",7,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Unit",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("new_Unit",5,SWIGTYPE_p_Timer);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,*arg4,*arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Unit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  Timer *arg5 = 0 ;
  bool arg6 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Unit::Unit",5,"Timer &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Unit::Unit",6,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Unit",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("new_Unit",5,SWIGTYPE_p_Timer);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,*arg4,*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Unit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  Timer *arg5 = 0 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Unit::Unit",5,"Timer &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Unit",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("new_Unit",5,SWIGTYPE_p_Timer);
  }
  
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,*arg4,*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Unit(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Timer, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_Unit__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Timer, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_Unit__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Timer, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_Unit__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Unit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer &,Timer &,bool,bool)\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer &,Timer &,bool)\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer &,Timer &)\n");
  lua_error(L);return 0;
}


static int _wrap_Unit_isMelee(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Unit::isMelee",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::isMelee",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isMelee",1,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Unit const *)arg1)->isMelee();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_LoadScript(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Pywrap *arg2 = (Pywrap *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadScript",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadScript",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::LoadScript",2,"Pywrap *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Unit::LoadScript",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadScript",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Pywrap,0))){
    SWIG_fail_ptr("Unit_LoadScript",2,SWIGTYPE_p_Pywrap);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->LoadScript(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_MoveAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::MoveAI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveAI",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveAI",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->MoveAI();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_LoadAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadAI",1,"Unit *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Unit::LoadAI",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->LoadAI((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_AttackAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::AttackAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::AttackAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::AttackAI",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AttackAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AttackAI",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->AttackAI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ExecuteAI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  char arg3 ;
  
  SWIG_check_num_args("Unit::ExecuteAI",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ExecuteAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::ExecuteAI",2,"Unit *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Unit::ExecuteAI",3,"char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",2,SWIGTYPE_p_Unit);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->ExecuteAI(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ExecuteAI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ExecuteAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ExecuteAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::ExecuteAI",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ExecuteAI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ExecuteAI(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Unit_ExecuteAI__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Unit_ExecuteAI__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Unit_ExecuteAI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::ExecuteAI(Unit *,char const)\n"
    "    Unit::ExecuteAI(Unit *)\n");
  lua_error(L);return 0;
}


static int _wrap_Unit_MoveTowardsAI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Unit::MoveTowardsAI",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveTowardsAI",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::MoveTowardsAI",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Unit::MoveTowardsAI",3,"char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveTowardsAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->MoveTowardsAI(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_MoveTowardsAI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Unit::MoveTowardsAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveTowardsAI",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::MoveTowardsAI",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveTowardsAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->MoveTowardsAI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_MoveTowardsAI(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Unit_MoveTowardsAI__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Unit_MoveTowardsAI__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Unit_MoveTowardsAI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::MoveTowardsAI(double,char const)\n"
    "    Unit::MoveTowardsAI(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Unit_SetTimer(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  SWIG_check_num_args("Unit::SetTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetTimer",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::SetTimer",2,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetTimer",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Unit_SetTimer",2,SWIGTYPE_p_Timer);
  }
  
  (arg1)->SetTimer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_Update_NewTime(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_NewTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_NewTime",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_NewTime",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_NewTime();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_Update_OldTime(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_OldTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_OldTime",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_OldTime",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_OldTime();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetTimeChange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  SWIG_check_num_args("Unit::GetTimeChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetTimeChange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetTimeChange",1,SWIGTYPE_p_Unit);
  }
  
  result = (double)((Unit const *)arg1)->GetTimeChange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetName",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetName",1,SWIGTYPE_p_Unit);
  }
  
  result = ((Unit const *)arg1)->GetName();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetPhysics(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Unit::GetPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetPhysics",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetPhysics",1,SWIGTYPE_p_Unit);
  }
  
  result = (Physics *)((Unit const *)arg1)->GetPhysics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetDefaultDrawObject(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("Unit::GetDefaultDrawObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetDefaultDrawObject",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetDefaultDrawObject",1,SWIGTYPE_p_Unit);
  }
  
  result = (draw_base *)(arg1)->GetDefaultDrawObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ToggleMelee(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ToggleMelee",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ToggleMelee",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ToggleMelee",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ToggleMelee();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetHP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetHP",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetHP",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetAD(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAD",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAD",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAD();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetAP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAP",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAP",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetAttackSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAttackSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAttackSpeed",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAttackSpeed",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAttackSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetRange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetRange",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetVisionRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetVisionRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetVisionRange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetVisionRange",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetVisionRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetID(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Unit::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetID",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetID",1,SWIGTYPE_p_Unit);
  }
  
  result = (unsigned int)((Unit const *)arg1)->GetID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetMovementSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  SWIG_check_num_args("Unit::GetMovementSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetMovementSpeed",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetMovementSpeed",1,SWIGTYPE_p_Unit);
  }
  
  result = (double)((Unit const *)arg1)->GetMovementSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetType",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetType",1,SWIGTYPE_p_Unit);
  }
  
  result = ((Unit const *)arg1)->GetType();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_SetHP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetHP",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetHP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetHP",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetHP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_SetAD(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAD",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAD",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAD",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAD(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_SetAP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAP",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAP",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAP(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_SetAttackSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAttackSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAttackSpeed",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAttackSpeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAttackSpeed",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAttackSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_SetRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetRange",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetRange",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetRange",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetRange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_SetVisionRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetVisionRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetVisionRange",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetVisionRange",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetVisionRange",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetVisionRange(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_SetMovementSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Unit::SetMovementSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetMovementSpeed",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetMovementSpeed",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetMovementSpeed",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetMovementSpeed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_SetID(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Unit::SetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetID",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetID",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetID",1,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->SetID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetDeath(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Unit::GetDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetDeath",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetDeath",1,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Unit const *)arg1)->GetDeath();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ToggleDeath(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ToggleDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ToggleDeath",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ToggleDeath",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ToggleDeath();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_UpdateAssets(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  Unit *arg3 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::UpdateAssets",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::UpdateAssets",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::UpdateAssets",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Unit::UpdateAssets",3,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_UpdateAssets",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_UpdateAssets",3,SWIGTYPE_p_Unit);
  }
  
  (arg1)->UpdateAssets(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_AddBuff(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("Unit::AddBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::AddBuff",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::AddBuff",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AddBuff",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_AddBuff",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->AddBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_RemoveBuff(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("Unit::RemoveBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::RemoveBuff",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::RemoveBuff",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_RemoveBuff",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_RemoveBuff",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->RemoveBuff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_BuffExists(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  bool result;
  
  SWIG_check_num_args("Unit::BuffExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::BuffExists",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::BuffExists",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_BuffExists",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_BuffExists",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->BuffExists(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ApplyBuffs(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ApplyBuffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ApplyBuffs",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ApplyBuffs",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ApplyBuffs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_isColliding(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::isColliding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::isColliding",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::isColliding",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isColliding",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isColliding",2,SWIGTYPE_p_Unit);
  }
  
  result = (arg1)->isColliding(arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_Update_Physics(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_Physics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_Physics",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::Update_Physics",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_Physics",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_Physics",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_Physics(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_OnCollision(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("Unit::OnCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::OnCollision",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::OnCollision",2,"Unit *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::OnCollision",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_OnCollision",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_OnCollision",2,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_OnCollision",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->OnCollision(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ProcessKeyEvent(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("Unit::ProcessKeyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ProcessKeyEvent",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::ProcessKeyEvent",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ProcessKeyEvent",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_ProcessKeyEvent",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->ProcessKeyEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_LoadKeyScript(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadKeyScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadKeyScript",1,"Unit *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Unit::LoadKeyScript",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadKeyScript",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->LoadKeyScript((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_LoadKeyBindings(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadKeyBindings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadKeyBindings",1,"Unit *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Unit::LoadKeyBindings",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadKeyBindings",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->LoadKeyBindings((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ProcessMouseMovement(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Unit::ProcessMouseMovement",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ProcessMouseMovement",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::ProcessMouseMovement",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Unit::ProcessMouseMovement",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ProcessMouseMovement",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ProcessMouseMovement(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ProcessMouseKey(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Unit::ProcessMouseKey",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ProcessMouseKey",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::ProcessMouseKey",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Unit::ProcessMouseKey",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Unit::ProcessMouseKey",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ProcessMouseKey",1,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->ProcessMouseKey(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Unit(void *obj) {
Unit *arg1 = (Unit *) obj;
delete arg1;
}
static swig_lua_method swig_Unit_methods[] = {
    {"isMelee", _wrap_Unit_isMelee}, 
    {"LoadScript", _wrap_Unit_LoadScript}, 
    {"MoveAI", _wrap_Unit_MoveAI}, 
    {"LoadAI", _wrap_Unit_LoadAI}, 
    {"AttackAI", _wrap_Unit_AttackAI}, 
    {"ExecuteAI", _wrap_Unit_ExecuteAI}, 
    {"MoveTowardsAI", _wrap_Unit_MoveTowardsAI}, 
    {"SetTimer", _wrap_Unit_SetTimer}, 
    {"Update_NewTime", _wrap_Unit_Update_NewTime}, 
    {"Update_OldTime", _wrap_Unit_Update_OldTime}, 
    {"GetTimeChange", _wrap_Unit_GetTimeChange}, 
    {"GetName", _wrap_Unit_GetName}, 
    {"GetPhysics", _wrap_Unit_GetPhysics}, 
    {"GetDefaultDrawObject", _wrap_Unit_GetDefaultDrawObject}, 
    {"ToggleMelee", _wrap_Unit_ToggleMelee}, 
    {"GetHP", _wrap_Unit_GetHP}, 
    {"GetAD", _wrap_Unit_GetAD}, 
    {"GetAP", _wrap_Unit_GetAP}, 
    {"GetAttackSpeed", _wrap_Unit_GetAttackSpeed}, 
    {"GetRange", _wrap_Unit_GetRange}, 
    {"GetVisionRange", _wrap_Unit_GetVisionRange}, 
    {"GetID", _wrap_Unit_GetID}, 
    {"GetMovementSpeed", _wrap_Unit_GetMovementSpeed}, 
    {"GetType", _wrap_Unit_GetType}, 
    {"SetHP", _wrap_Unit_SetHP}, 
    {"SetAD", _wrap_Unit_SetAD}, 
    {"SetAP", _wrap_Unit_SetAP}, 
    {"SetAttackSpeed", _wrap_Unit_SetAttackSpeed}, 
    {"SetRange", _wrap_Unit_SetRange}, 
    {"SetVisionRange", _wrap_Unit_SetVisionRange}, 
    {"SetMovementSpeed", _wrap_Unit_SetMovementSpeed}, 
    {"SetID", _wrap_Unit_SetID}, 
    {"GetDeath", _wrap_Unit_GetDeath}, 
    {"ToggleDeath", _wrap_Unit_ToggleDeath}, 
    {"UpdateAssets", _wrap_Unit_UpdateAssets}, 
    {"AddBuff", _wrap_Unit_AddBuff}, 
    {"RemoveBuff", _wrap_Unit_RemoveBuff}, 
    {"BuffExists", _wrap_Unit_BuffExists}, 
    {"ApplyBuffs", _wrap_Unit_ApplyBuffs}, 
    {"isColliding", _wrap_Unit_isColliding}, 
    {"Update_Physics", _wrap_Unit_Update_Physics}, 
    {"OnCollision", _wrap_Unit_OnCollision}, 
    {"ProcessKeyEvent", _wrap_Unit_ProcessKeyEvent}, 
    {"LoadKeyScript", _wrap_Unit_LoadKeyScript}, 
    {"LoadKeyBindings", _wrap_Unit_LoadKeyBindings}, 
    {"ProcessMouseMovement", _wrap_Unit_ProcessMouseMovement}, 
    {"ProcessMouseKey", _wrap_Unit_ProcessMouseKey}, 
    {0,0}
};
static swig_lua_attribute swig_Unit_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Unit_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Unit_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Unit_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Unit_bases[] = {0};
static const char *swig_Unit_base_names[] = {0};
static swig_lua_class _wrap_class_Unit = { "Unit", &SWIGTYPE_p_Unit,_wrap_new_Unit, swig_delete_Unit, swig_Unit_methods, swig_Unit_attributes, { "Unit", swig_Unit_cls_methods, swig_Unit_cls_attributes, swig_Unit_cls_constants }, swig_Unit_bases, swig_Unit_base_names };

static int _wrap_new_textbox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  int arg4 ;
  std::string *argp1 ;
  textbox *result = 0 ;
  
  SWIG_check_num_args("textbox::textbox",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("textbox::textbox",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("textbox::textbox",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("textbox::textbox",3,"SDL_Renderer &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("textbox::textbox",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_textbox",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_textbox",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (textbox *)new textbox(arg1,(char const *)arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_textbox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_textbox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  std::string *argp1 ;
  textbox *result = 0 ;
  
  SWIG_check_num_args("textbox::textbox",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("textbox::textbox",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("textbox::textbox",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("textbox::textbox",3,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_textbox",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_textbox",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (textbox *)new textbox(arg1,(char const *)arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_textbox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_textbox(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_textbox__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_textbox__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_textbox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    textbox::textbox(std::string,char const *,SDL_Renderer &,int)\n"
    "    textbox::textbox(std::string,char const *,SDL_Renderer &)\n");
  lua_error(L);return 0;
}


static int _wrap_textbox_Draw(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  
  SWIG_check_num_args("textbox::Draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::Draw",1,"textbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("textbox::Draw",2,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_Draw",1,SWIGTYPE_p_textbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("textbox_Draw",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->Draw(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_SetLoc(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("textbox::SetLoc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::SetLoc",1,"textbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("textbox::SetLoc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("textbox::SetLoc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_SetLoc",1,SWIGTYPE_p_textbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetLoc(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetType(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  std::string result;
  
  SWIG_check_num_args("textbox::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetType",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetType",1,SWIGTYPE_p_textbox);
  }
  
  result = ((textbox const *)arg1)->GetType();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetDeath(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  bool result;
  
  SWIG_check_num_args("textbox::GetDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetDeath",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetDeath",1,SWIGTYPE_p_textbox);
  }
  
  result = (bool)((textbox const *)arg1)->GetDeath();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetBlitOrder(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  int result;
  
  SWIG_check_num_args("textbox::GetBlitOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetBlitOrder",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetBlitOrder",1,SWIGTYPE_p_textbox);
  }
  
  result = (int)((textbox const *)arg1)->GetBlitOrder();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_ToggleDeath(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  
  SWIG_check_num_args("textbox::ToggleDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::ToggleDeath",1,"textbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_ToggleDeath",1,SWIGTYPE_p_textbox);
  }
  
  (arg1)->ToggleDeath();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_SetOwner(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  UI *arg2 = (UI *) 0 ;
  
  SWIG_check_num_args("textbox::SetOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::SetOwner",1,"textbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("textbox::SetOwner",2,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_SetOwner",1,SWIGTYPE_p_textbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("textbox_SetOwner",2,SWIGTYPE_p_UI);
  }
  
  (arg1)->SetOwner(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetOwner(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  UI *result = 0 ;
  
  SWIG_check_num_args("textbox::GetOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetOwner",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetOwner",1,SWIGTYPE_p_textbox);
  }
  
  result = (UI *)((textbox const *)arg1)->GetOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetText(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  std::string result;
  
  SWIG_check_num_args("textbox::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetText",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetText",1,SWIGTYPE_p_textbox);
  }
  
  result = ((textbox const *)arg1)->GetText();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetLoc(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  math_point result;
  
  SWIG_check_num_args("textbox::GetLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetLoc",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetLoc",1,SWIGTYPE_p_textbox);
  }
  
  result = ((textbox const *)arg1)->GetLoc();
  {
    math_point * resultptr = new math_point((const math_point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_math_point,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetDOM(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("textbox::GetDOM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetDOM",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetDOM",1,SWIGTYPE_p_textbox);
  }
  
  result = (data_base *)((textbox const *)arg1)->GetDOM();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetDrawObject(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("textbox::GetDrawObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetDrawObject",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetDrawObject",1,SWIGTYPE_p_textbox);
  }
  
  result = (draw_base *)((textbox const *)arg1)->GetDrawObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetRenderer(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  SDL_Renderer *result = 0 ;
  
  SWIG_check_num_args("textbox::GetRenderer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetRenderer",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetRenderer",1,SWIGTYPE_p_textbox);
  }
  
  result = (SDL_Renderer *)((textbox const *)arg1)->GetRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Renderer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_isInside(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("textbox::isInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::isInside",1,"textbox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("textbox::isInside",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("textbox::isInside",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_isInside",1,SWIGTYPE_p_textbox);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)((textbox const *)arg1)->isInside(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_changeMsg(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  std::string arg2 ;
  SDL_Renderer *arg3 = (SDL_Renderer *) 0 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("textbox::changeMsg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::changeMsg",1,"textbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("textbox::changeMsg",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("textbox::changeMsg",3,"SDL_Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_changeMsg",1,SWIGTYPE_p_textbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("textbox_changeMsg",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("textbox_changeMsg",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->changeMsg(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_changeFont(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("textbox::changeFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::changeFont",1,"textbox *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("textbox::changeFont",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_changeFont",1,SWIGTYPE_p_textbox);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->changeFont(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_changeColor(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("textbox::changeColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::changeColor",1,"textbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("textbox::changeColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("textbox::changeColor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("textbox::changeColor",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_changeColor",1,SWIGTYPE_p_textbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->changeColor(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_changeFontSize(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("textbox::changeFontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::changeFontSize",1,"textbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("textbox::changeFontSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_changeFontSize",1,SWIGTYPE_p_textbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->changeFontSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_isWritable(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  bool result;
  
  SWIG_check_num_args("textbox::isWritable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::isWritable",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_isWritable",1,SWIGTYPE_p_textbox);
  }
  
  result = (bool)((textbox const *)arg1)->isWritable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_textbox(void *obj) {
textbox *arg1 = (textbox *) obj;
delete arg1;
}
static swig_lua_method swig_textbox_methods[] = {
    {"Draw", _wrap_textbox_Draw}, 
    {"SetLoc", _wrap_textbox_SetLoc}, 
    {"GetType", _wrap_textbox_GetType}, 
    {"GetDeath", _wrap_textbox_GetDeath}, 
    {"GetBlitOrder", _wrap_textbox_GetBlitOrder}, 
    {"ToggleDeath", _wrap_textbox_ToggleDeath}, 
    {"SetOwner", _wrap_textbox_SetOwner}, 
    {"GetOwner", _wrap_textbox_GetOwner}, 
    {"GetText", _wrap_textbox_GetText}, 
    {"GetLoc", _wrap_textbox_GetLoc}, 
    {"GetDOM", _wrap_textbox_GetDOM}, 
    {"GetDrawObject", _wrap_textbox_GetDrawObject}, 
    {"GetRenderer", _wrap_textbox_GetRenderer}, 
    {"isInside", _wrap_textbox_isInside}, 
    {"changeMsg", _wrap_textbox_changeMsg}, 
    {"changeFont", _wrap_textbox_changeFont}, 
    {"changeColor", _wrap_textbox_changeColor}, 
    {"changeFontSize", _wrap_textbox_changeFontSize}, 
    {"isWritable", _wrap_textbox_isWritable}, 
    {0,0}
};
static swig_lua_attribute swig_textbox_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_textbox_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_textbox_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_textbox_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_textbox_bases[] = {0};
static const char *swig_textbox_base_names[] = {0};
static swig_lua_class _wrap_class_textbox = { "textbox", &SWIGTYPE_p_textbox,_wrap_new_textbox, swig_delete_textbox, swig_textbox_methods, swig_textbox_attributes, { "textbox", swig_textbox_cls_methods, swig_textbox_cls_attributes, swig_textbox_cls_constants }, swig_textbox_bases, swig_textbox_base_names };

static int _wrap_grabText(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  SDL_Event *arg2 = 0 ;
  
  SWIG_check_num_args("grabText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("grabText",1,"textbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("grabText",2,"SDL_Event const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("grabText",1,SWIGTYPE_p_textbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("grabText",2,SWIGTYPE_p_SDL_Event);
  }
  
  grabText(arg1,(SDL_Event const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Button(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  int arg4 ;
  std::string *argp1 ;
  Button *result = 0 ;
  
  SWIG_check_num_args("Button::Button",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Button::Button",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Button::Button",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Button::Button",3,"SDL_Renderer &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Button::Button",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Button",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Button",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (Button *)new Button(arg1,(char const *)arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Button,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_ProcessMouseLoc(lua_State* L) {
  int SWIG_arg = 0;
  Button *arg1 = (Button *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Button::ProcessMouseLoc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Button::ProcessMouseLoc",1,"Button *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Button::ProcessMouseLoc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Button::ProcessMouseLoc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Button,0))){
    SWIG_fail_ptr("Button_ProcessMouseLoc",1,SWIGTYPE_p_Button);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ProcessMouseLoc(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Button_MouseClick(lua_State* L) {
  int SWIG_arg = 0;
  Button *arg1 = (Button *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Button::MouseClick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Button::MouseClick",1,"Button *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Button::MouseClick",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Button::MouseClick",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Button::MouseClick",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Button::MouseClick",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Button,0))){
    SWIG_fail_ptr("Button_MouseClick",1,SWIGTYPE_p_Button);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->MouseClick(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Button(void *obj) {
Button *arg1 = (Button *) obj;
delete arg1;
}
static swig_lua_method swig_Button_methods[] = {
    {"ProcessMouseLoc", _wrap_Button_ProcessMouseLoc}, 
    {"MouseClick", _wrap_Button_MouseClick}, 
    {0,0}
};
static swig_lua_attribute swig_Button_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Button_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Button_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Button_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Button_bases[] = {0,0};
static const char *swig_Button_base_names[] = {"textbox *",0};
static swig_lua_class _wrap_class_Button = { "Button", &SWIGTYPE_p_Button,_wrap_new_Button, swig_delete_Button, swig_Button_methods, swig_Button_attributes, { "Button", swig_Button_cls_methods, swig_Button_cls_attributes, swig_Button_cls_constants }, swig_Button_bases, swig_Button_base_names };

static int _wrap_new_Trigger(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Trigger *result = 0 ;
  
  SWIG_check_num_args("Trigger::Trigger",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Trigger::Trigger",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Trigger *)new Trigger((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Trigger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trigger_GetID(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  int result;
  
  SWIG_check_num_args("Trigger::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::GetID",1,"Trigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_GetID",1,SWIGTYPE_p_Trigger);
  }
  
  result = (int)((Trigger const *)arg1)->GetID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trigger_SetID(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Trigger::SetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::SetID",1,"Trigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Trigger::SetID",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_SetID",1,SWIGTYPE_p_Trigger);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trigger_isUnitOnTrigger(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Trigger::isUnitOnTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::isUnitOnTrigger",1,"Trigger const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Trigger::isUnitOnTrigger",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_isUnitOnTrigger",1,SWIGTYPE_p_Trigger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Trigger_isUnitOnTrigger",2,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Trigger const *)arg1)->isUnitOnTrigger(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trigger_ConsumeTrigger(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Trigger::ConsumeTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::ConsumeTrigger",1,"Trigger *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Trigger::ConsumeTrigger",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_ConsumeTrigger",1,SWIGTYPE_p_Trigger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Trigger_ConsumeTrigger",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ConsumeTrigger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trigger_GetDeath(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  SWIG_check_num_args("Trigger::GetDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::GetDeath",1,"Trigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_GetDeath",1,SWIGTYPE_p_Trigger);
  }
  
  result = (bool)((Trigger const *)arg1)->GetDeath();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trigger_ToggleDeath(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  
  SWIG_check_num_args("Trigger::ToggleDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::ToggleDeath",1,"Trigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_ToggleDeath",1,SWIGTYPE_p_Trigger);
  }
  
  (arg1)->ToggleDeath();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Trigger(void *obj) {
Trigger *arg1 = (Trigger *) obj;
delete arg1;
}
static swig_lua_method swig_Trigger_methods[] = {
    {"GetID", _wrap_Trigger_GetID}, 
    {"SetID", _wrap_Trigger_SetID}, 
    {"isUnitOnTrigger", _wrap_Trigger_isUnitOnTrigger}, 
    {"ConsumeTrigger", _wrap_Trigger_ConsumeTrigger}, 
    {"GetDeath", _wrap_Trigger_GetDeath}, 
    {"ToggleDeath", _wrap_Trigger_ToggleDeath}, 
    {0,0}
};
static swig_lua_attribute swig_Trigger_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Trigger_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Trigger_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Trigger_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Trigger_bases[] = {0};
static const char *swig_Trigger_base_names[] = {0};
static swig_lua_class _wrap_class_Trigger = { "Trigger", &SWIGTYPE_p_Trigger,_wrap_new_Trigger, swig_delete_Trigger, swig_Trigger_methods, swig_Trigger_attributes, { "Trigger", swig_Trigger_cls_methods, swig_Trigger_cls_attributes, swig_Trigger_cls_constants }, swig_Trigger_bases, swig_Trigger_base_names };

static int _wrap_sound_base_Load_Sound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("sound_base::Load_Sound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Load_Sound",1,"sound_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("sound_base::Load_Sound",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Load_Sound",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->Load_Sound((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Load_Sound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  SWIG_check_num_args("sound_base::Load_Sound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Load_Sound",1,"sound_base *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sound_base::Load_Sound",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Load_Sound",1,SWIGTYPE_p_sound_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("sound_base_Load_Sound",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (bool)(arg1)->Load_Sound(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Load_Sound(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sound_base_Load_Sound__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_sound_base_Load_Sound__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sound_base_Load_Sound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sound_base::Load_Sound(char const *)\n"
    "    sound_base::Load_Sound(unsigned char *)\n");
  lua_error(L);return 0;
}


static int _wrap_sound_base_Play__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sound_base::Play",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Play",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::Play",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Play",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->Play(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Play__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  
  SWIG_check_num_args("sound_base::Play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Play",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Play",1,SWIGTYPE_p_sound_base);
  }
  
  (arg1)->Play();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Play(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sound_base_Play__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sound_base_Play__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sound_base_Play'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sound_base::Play(int)\n"
    "    sound_base::Play()\n");
  lua_error(L);return 0;
}


static int _wrap_sound_base_Pause(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  
  SWIG_check_num_args("sound_base::Pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Pause",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Pause",1,SWIGTYPE_p_sound_base);
  }
  
  (arg1)->Pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Stop(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  
  SWIG_check_num_args("sound_base::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Stop",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Stop",1,SWIGTYPE_p_sound_base);
  }
  
  (arg1)->Stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("sound_base::isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::isPlaying",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_isPlaying",1,SWIGTYPE_p_sound_base);
  }
  
  result = (bool)(arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_PlayEffect(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("sound_base::PlayEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::PlayEffect",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::PlayEffect",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_PlayEffect",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->PlayEffect(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_isLoopingEffect(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("sound_base::isLoopingEffect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::isLoopingEffect",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_isLoopingEffect",1,SWIGTYPE_p_sound_base);
  }
  
  result = (bool)(arg1)->isLoopingEffect();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_FadeOut(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sound_base::FadeOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::FadeOut",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::FadeOut",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_FadeOut",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->FadeOut(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_SetVol(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sound_base::SetVol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::SetVol",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::SetVol",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_SetVol",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetVol(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_SoundType(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  char result;
  
  SWIG_check_num_args("sound_base::SoundType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::SoundType",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_SoundType",1,SWIGTYPE_p_sound_base);
  }
  
  result = (char)(arg1)->SoundType();
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_SetPoint(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  
  SWIG_check_num_args("sound_base::SetPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::SetPoint",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_SetPoint",1,SWIGTYPE_p_sound_base);
  }
  
  (arg1)->SetPoint();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Update_Sound_Distance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  math_point arg2 ;
  int arg3 ;
  math_point *argp2 ;
  
  SWIG_check_num_args("sound_base::Update_Sound_Distance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Update_Sound_Distance",1,"sound_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sound_base::Update_Sound_Distance",2,"math_point");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sound_base::Update_Sound_Distance",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Distance",1,SWIGTYPE_p_sound_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Distance",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->Update_Sound_Distance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Update_Sound_Distance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  math_point arg2 ;
  math_point *argp2 ;
  
  SWIG_check_num_args("sound_base::Update_Sound_Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Update_Sound_Distance",1,"sound_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sound_base::Update_Sound_Distance",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Distance",1,SWIGTYPE_p_sound_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Distance",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  (arg1)->Update_Sound_Distance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Update_Sound_Distance(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sound_base_Update_Sound_Distance__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_sound_base_Update_Sound_Distance__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sound_base_Update_Sound_Distance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sound_base::Update_Sound_Distance(math_point,int)\n"
    "    sound_base::Update_Sound_Distance(math_point)\n");
  lua_error(L);return 0;
}


static int _wrap_sound_base_Update_Sound_Position(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("sound_base::Update_Sound_Position",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Update_Sound_Position",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::Update_Sound_Position",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sound_base::Update_Sound_Position",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Position",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->Update_Sound_Position(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sound_base__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  sound_base *result = 0 ;
  
  SWIG_check_num_args("sound_base::sound_base",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("sound_base::sound_base",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (sound_base *)new sound_base(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sound_base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sound_base__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *result = 0 ;
  
  SWIG_check_num_args("sound_base::sound_base",0,0)
  result = (sound_base *)new sound_base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sound_base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_sound_base(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_sound_base__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_sound_base__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sound_base'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sound_base::sound_base(bool)\n"
    "    sound_base::sound_base()\n");
  lua_error(L);return 0;
}


static void swig_delete_sound_base(void *obj) {
sound_base *arg1 = (sound_base *) obj;
delete arg1;
}
static swig_lua_method swig_sound_base_methods[] = {
    {"Load_Sound", _wrap_sound_base_Load_Sound}, 
    {"Play", _wrap_sound_base_Play}, 
    {"Pause", _wrap_sound_base_Pause}, 
    {"Stop", _wrap_sound_base_Stop}, 
    {"isPlaying", _wrap_sound_base_isPlaying}, 
    {"PlayEffect", _wrap_sound_base_PlayEffect}, 
    {"isLoopingEffect", _wrap_sound_base_isLoopingEffect}, 
    {"FadeOut", _wrap_sound_base_FadeOut}, 
    {"SetVol", _wrap_sound_base_SetVol}, 
    {"SoundType", _wrap_sound_base_SoundType}, 
    {"SetPoint", _wrap_sound_base_SetPoint}, 
    {"Update_Sound_Distance", _wrap_sound_base_Update_Sound_Distance}, 
    {"Update_Sound_Position", _wrap_sound_base_Update_Sound_Position}, 
    {0,0}
};
static swig_lua_attribute swig_sound_base_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_sound_base_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sound_base_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_sound_base_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_sound_base_bases[] = {0};
static const char *swig_sound_base_base_names[] = {0};
static swig_lua_class _wrap_class_sound_base = { "sound_base", &SWIGTYPE_p_sound_base,_wrap_new_sound_base, swig_delete_sound_base, swig_sound_base_methods, swig_sound_base_attributes, { "sound_base", swig_sound_base_cls_methods, swig_sound_base_cls_attributes, swig_sound_base_cls_constants }, swig_sound_base_bases, swig_sound_base_base_names };

static int _wrap_new_Timer(lua_State* L) {
  int SWIG_arg = 0;
  Timer *result = 0 ;
  
  SWIG_check_num_args("Timer::Timer",0,0)
  result = (Timer *)new Timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Timer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_start(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::start",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_start",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_stop(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::stop",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_stop",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_pause(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::pause",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_pause",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_unpause(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::unpause",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_unpause",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->unpause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_get_ticks(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  SWIG_check_num_args("Timer::get_ticks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::get_ticks",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_get_ticks",1,SWIGTYPE_p_Timer);
  }
  
  result = (int)((Timer const *)arg1)->get_ticks();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_is_started(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Timer::is_started",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::is_started",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_is_started",1,SWIGTYPE_p_Timer);
  }
  
  result = (bool)((Timer const *)arg1)->is_started();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_is_paused(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Timer::is_paused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::is_paused",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_is_paused",1,SWIGTYPE_p_Timer);
  }
  
  result = (bool)((Timer const *)arg1)->is_paused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Timer(void *obj) {
Timer *arg1 = (Timer *) obj;
delete arg1;
}
static swig_lua_method swig_Timer_methods[] = {
    {"start", _wrap_Timer_start}, 
    {"stop", _wrap_Timer_stop}, 
    {"pause", _wrap_Timer_pause}, 
    {"unpause", _wrap_Timer_unpause}, 
    {"get_ticks", _wrap_Timer_get_ticks}, 
    {"is_started", _wrap_Timer_is_started}, 
    {"is_paused", _wrap_Timer_is_paused}, 
    {0,0}
};
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Timer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Timer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Timer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Timer_bases[] = {0};
static const char *swig_Timer_base_names[] = {0};
static swig_lua_class _wrap_class_Timer = { "Timer", &SWIGTYPE_p_Timer,_wrap_new_Timer, swig_delete_Timer, swig_Timer_methods, swig_Timer_attributes, { "Timer", swig_Timer_cls_methods, swig_Timer_cls_attributes, swig_Timer_cls_constants }, swig_Timer_bases, swig_Timer_base_names };

static int _wrap_new_ProgressBar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  int arg5 ;
  math_point *argp3 ;
  ProgressBar *result = 0 ;
  
  SWIG_check_num_args("ProgressBar::ProgressBar",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ProgressBar::ProgressBar",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ProgressBar::ProgressBar",2,"int *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ProgressBar::ProgressBar",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ProgressBar::ProgressBar",4,"SDL_Renderer &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ProgressBar::ProgressBar",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_ProgressBar",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ProgressBar",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_ProgressBar",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (ProgressBar *)new ProgressBar((char const *)arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ProgressBar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProgressBar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  math_point *argp3 ;
  ProgressBar *result = 0 ;
  
  SWIG_check_num_args("ProgressBar::ProgressBar",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ProgressBar::ProgressBar",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ProgressBar::ProgressBar",2,"int *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ProgressBar::ProgressBar",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ProgressBar::ProgressBar",4,"SDL_Renderer &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_ProgressBar",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ProgressBar",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_ProgressBar",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (ProgressBar *)new ProgressBar((char const *)arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ProgressBar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ProgressBar(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_ProgressBar__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ProgressBar__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ProgressBar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ProgressBar::ProgressBar(char const *,int *,math_point,SDL_Renderer &,int)\n"
    "    ProgressBar::ProgressBar(char const *,int *,math_point,SDL_Renderer &)\n");
  lua_error(L);return 0;
}


static int _wrap_ProgressBar_Update(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ProgressBar::Update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::Update",1,"ProgressBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ProgressBar::Update",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ProgressBar::Update",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_Update",1,SWIGTYPE_p_ProgressBar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->Update(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProgressBar_Draw(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  
  SWIG_check_num_args("ProgressBar::Draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::Draw",1,"ProgressBar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ProgressBar::Draw",2,"SDL_Renderer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_Draw",1,SWIGTYPE_p_ProgressBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("ProgressBar_Draw",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->Draw((SDL_Renderer const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProgressBar_SetRectangleDimensions(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ProgressBar::SetRectangleDimensions",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::SetRectangleDimensions",1,"ProgressBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ProgressBar::SetRectangleDimensions",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ProgressBar::SetRectangleDimensions",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_SetRectangleDimensions",1,SWIGTYPE_p_ProgressBar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetRectangleDimensions(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProgressBar_GetRectangleHeight(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  int result;
  
  SWIG_check_num_args("ProgressBar::GetRectangleHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::GetRectangleHeight",1,"ProgressBar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_GetRectangleHeight",1,SWIGTYPE_p_ProgressBar);
  }
  
  result = (int)((ProgressBar const *)arg1)->GetRectangleHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ProgressBar_GetRectangleWidth(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  int result;
  
  SWIG_check_num_args("ProgressBar::GetRectangleWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::GetRectangleWidth",1,"ProgressBar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_GetRectangleWidth",1,SWIGTYPE_p_ProgressBar);
  }
  
  result = (int)((ProgressBar const *)arg1)->GetRectangleWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ProgressBar(void *obj) {
ProgressBar *arg1 = (ProgressBar *) obj;
delete arg1;
}
static swig_lua_method swig_ProgressBar_methods[] = {
    {"Update", _wrap_ProgressBar_Update}, 
    {"Draw", _wrap_ProgressBar_Draw}, 
    {"SetRectangleDimensions", _wrap_ProgressBar_SetRectangleDimensions}, 
    {"GetRectangleHeight", _wrap_ProgressBar_GetRectangleHeight}, 
    {"GetRectangleWidth", _wrap_ProgressBar_GetRectangleWidth}, 
    {0,0}
};
static swig_lua_attribute swig_ProgressBar_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ProgressBar_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ProgressBar_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ProgressBar_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ProgressBar_bases[] = {0};
static const char *swig_ProgressBar_base_names[] = {0};
static swig_lua_class _wrap_class_ProgressBar = { "ProgressBar", &SWIGTYPE_p_ProgressBar,_wrap_new_ProgressBar, swig_delete_ProgressBar, swig_ProgressBar_methods, swig_ProgressBar_attributes, { "ProgressBar", swig_ProgressBar_cls_methods, swig_ProgressBar_cls_attributes, swig_ProgressBar_cls_constants }, swig_ProgressBar_bases, swig_ProgressBar_base_names };

static int _wrap_init(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("init",0,0)
  result = (bool)init();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCapper(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("FrameCapper",0,0)
  FrameCapper();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpawnUnit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int arg2 ;
  math_point arg3 ;
  std::string arg4 ;
  bool arg5 ;
  bool arg6 ;
  math_point *argp3 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("SpawnUnit",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SpawnUnit",1,"char const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpawnUnit",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SpawnUnit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SpawnUnit",4,"std::string");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SpawnUnit",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("SpawnUnit",6,"bool");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("SpawnUnit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SpawnUnit",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  SpawnUnit(arg1,arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpawnUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int arg2 ;
  math_point arg3 ;
  std::string arg4 ;
  bool arg5 ;
  math_point *argp3 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("SpawnUnit",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SpawnUnit",1,"char const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpawnUnit",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SpawnUnit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SpawnUnit",4,"std::string");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SpawnUnit",5,"bool");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("SpawnUnit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SpawnUnit",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  arg5 = (lua_toboolean(L, 5)!=0);
  SpawnUnit(arg1,arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpawnUnit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int arg2 ;
  math_point arg3 ;
  std::string arg4 ;
  math_point *argp3 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("SpawnUnit",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SpawnUnit",1,"char const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpawnUnit",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SpawnUnit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SpawnUnit",4,"std::string");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("SpawnUnit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SpawnUnit",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  SpawnUnit(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpawnUnit(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SpawnUnit__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_SpawnUnit__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_SpawnUnit__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SpawnUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpawnUnit(char const,int,math_point,std::string,bool,bool)\n"
    "    SpawnUnit(char const,int,math_point,std::string,bool)\n"
    "    SpawnUnit(char const,int,math_point,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_FindNearbyUnit(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("FindNearbyUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FindNearbyUnit",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("FindNearbyUnit",1,SWIGTYPE_p_Unit);
  }
  
  result = (Unit *)FindNearbyUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FindUnitByName(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("FindUnitByName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FindUnitByName",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FindUnitByName",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (Unit *)FindUnitByName(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loadGameConstants(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("loadGameConstants",0,0)
  loadGameConstants();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRenderer(lua_State* L) {
  int SWIG_arg = 0;
  SDL_Renderer *result = 0 ;
  
  SWIG_check_num_args("GetRenderer",0,0)
  result = (SDL_Renderer *)GetRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Renderer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_saveToFile(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string *argp1 ;
  std::string *argp2 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("saveToFile",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("saveToFile",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("saveToFile",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("saveToFile",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("saveToFile",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("saveToFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("saveToFile",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  saveToFile(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loadFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("loadFile",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("loadFile",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (data_base *)loadFile(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverseOrderStack(lua_State* L) {
  int SWIG_arg = 0;
  std::stack< fuzzy_obj > *arg1 = 0 ;
  SwigValueWrapper< std::stack< fuzzy_obj > > result;
  
  SWIG_check_num_args("reverseOrderStack",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("reverseOrderStack",1,"std::stack< fuzzy_obj > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__stackT_fuzzy_obj_t,0))){
    SWIG_fail_ptr("reverseOrderStack",1,SWIGTYPE_p_std__stackT_fuzzy_obj_t);
  }
  
  result = reverseOrderStack((std::stack< fuzzy_obj > const &)*arg1);
  {
    std::stack< fuzzy_obj > * resultptr = new std::stack< fuzzy_obj >((const std::stack< fuzzy_obj > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_fuzzy_obj_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pChar_pBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("pChar::pBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::pBuffer",1,"pChar *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("pChar::pBuffer",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_pBuffer_set",1,SWIGTYPE_p_pChar);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->pBuffer;
    if (arg2) {
      arg1->pBuffer = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->pBuffer, (const char *)arg2);
    } else {
      arg1->pBuffer = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pChar_pBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("pChar::pBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::pBuffer",1,"pChar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_pBuffer_get",1,SWIGTYPE_p_pChar);
  }
  
  result = (char *) ((arg1)->pBuffer);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pChar_size_set(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pChar::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::size",1,"pChar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pChar::size",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_size_set",1,SWIGTYPE_p_pChar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pChar_size_get(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pChar::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::size",1,"pChar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_size_get",1,SWIGTYPE_p_pChar);
  }
  
  result = (unsigned int) ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pChar(lua_State* L) {
  int SWIG_arg = 0;
  pChar *result = 0 ;
  
  SWIG_check_num_args("pChar::pChar",0,0)
  result = (pChar *)new pChar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_pChar(void *obj) {
pChar *arg1 = (pChar *) obj;
delete arg1;
}
static swig_lua_method swig_pChar_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_pChar_attributes[] = {
    { "pBuffer", _wrap_pChar_pBuffer_get, _wrap_pChar_pBuffer_set},
    { "size", _wrap_pChar_size_get, _wrap_pChar_size_set},
    {0,0,0}
};
static swig_lua_attribute swig_pChar_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_pChar_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_pChar_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_pChar_bases[] = {0};
static const char *swig_pChar_base_names[] = {0};
static swig_lua_class _wrap_class_pChar = { "pChar", &SWIGTYPE_p_pChar,_wrap_new_pChar, swig_delete_pChar, swig_pChar_methods, swig_pChar_attributes, { "pChar", swig_pChar_cls_methods, swig_pChar_cls_attributes, swig_pChar_cls_constants }, swig_pChar_bases, swig_pChar_base_names };

static int _wrap_charToInt(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int result;
  
  SWIG_check_num_args("charToInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("charToInt",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (int)charToInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cStrToInt(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  int result;
  
  SWIG_check_num_args("cStrToInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("cStrToInt",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)cStrToInt((char const (*))arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intToStr(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string result;
  
  SWIG_check_num_args("intToStr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("intToStr",1,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  result = intToStr(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cStrToNum(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  double result;
  
  SWIG_check_num_args("cStrToNum",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("cStrToNum",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)cStrToNum((char const (*))arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_numToStr(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("numToStr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("numToStr",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = numToStr(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchCharIndex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  int arg3 ;
  std::string *argp2 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("searchCharIndex",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("searchCharIndex",3,"int");
  arg1 = (lua_tostring(L, 1))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("searchCharIndex",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)searchCharIndex(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchCharIndex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  std::string *argp2 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("searchCharIndex",2,"std::string");
  arg1 = (lua_tostring(L, 1))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("searchCharIndex",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (int)searchCharIndex(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  std::string *argp2 ;
  bool result;
  
  SWIG_check_num_args("searchChar",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchChar",1,"char const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("searchChar",2,"std::string");
  arg1 = (lua_tostring(L, 1))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("searchChar",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (bool)searchChar(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_findString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  char *arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("findString",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("findString",1,"char const []");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findString",2,"char const []");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findString",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)findString((char const (*))arg1,(char const (*))arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_findString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  char *arg2 ;
  int result;
  
  SWIG_check_num_args("findString",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("findString",1,"char const []");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findString",2,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)findString((char const (*))arg1,(char const (*))arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_findString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_findString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_findString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'findString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findString(char const [],char const [],int)\n"
    "    findString(char const [],char const [])\n");
  lua_error(L);return 0;
}


static int _wrap_slice(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  int arg3 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("slice",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("slice",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("slice",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (pChar *)slice(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shiftArrayLeft__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("shiftArrayLeft",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("shiftArrayLeft",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("shiftArrayLeft",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (pChar *)shiftArrayLeft(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shiftArrayLeft__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  int arg3 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("shiftArrayLeft",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("shiftArrayLeft",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("shiftArrayLeft",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("shiftArrayLeft",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (pChar *)shiftArrayLeft(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shiftArrayLeft(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_shiftArrayLeft__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_shiftArrayLeft__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'shiftArrayLeft'\n"
    "  Possible C/C++ prototypes are:\n"
    "    shiftArrayLeft(char *const,int)\n"
    "    shiftArrayLeft(char *const,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_transferStr(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) (pChar *)0 ;
  char *arg2 = (char *) (char *)0 ;
  
  SWIG_check_num_args("transferStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transferStr",1,"pChar *const");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("transferStr",2,"char *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("transferStr",1,SWIGTYPE_p_pChar);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  transferStr(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createPCharFromBuffer(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  int arg2 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("createPCharFromBuffer",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("createPCharFromBuffer",1,"char []");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("createPCharFromBuffer",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (pChar *)createPCharFromBuffer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_removeCharFromStr(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  std::string result;
  
  SWIG_check_num_args("removeCharFromStr",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("removeCharFromStr",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("removeCharFromStr",2,"char const []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = removeCharFromStr(arg1,(char const (*))arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_removeMultipleCharFromStr(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  std::string result;
  
  SWIG_check_num_args("removeMultipleCharFromStr",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("removeMultipleCharFromStr",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("removeMultipleCharFromStr",2,"char const []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = removeMultipleCharFromStr(arg1,(char const (*))arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchCharIndex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("searchCharIndex",2,"char []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)searchCharIndex(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchCharIndex(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_searchCharIndex__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_searchCharIndex__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_searchCharIndex__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'searchCharIndex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    searchCharIndex(char const,std::string,int)\n"
    "    searchCharIndex(char const,std::string)\n"
    "    searchCharIndex(char,char [])\n");
  lua_error(L);return 0;
}


static int _wrap_sliceStr(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  std::string *argp1 ;
  std::string result;
  
  SWIG_check_num_args("sliceStr",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("sliceStr",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sliceStr",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sliceStr",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("sliceStr",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = sliceStr(arg1,arg2,arg3);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_numToInt(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int result;
  
  SWIG_check_num_args("numToInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("numToInt",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (int)numToInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fuseStrs(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string *argp1 ;
  std::string *argp2 ;
  std::string result;
  
  SWIG_check_num_args("fuseStrs",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("fuseStrs",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fuseStrs",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("fuseStrs",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("fuseStrs",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = fuseStrs(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_capitalizeStr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string result;
  
  SWIG_check_num_args("capitalizeStr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("capitalizeStr",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("capitalizeStr",1,SWIGTYPE_p_std__string);
  }
  
  result = capitalizeStr((std::string const &)*arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replaceCharInStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char arg2 ;
  char arg3 ;
  bool arg4 ;
  std::string *argp1 ;
  std::string result;
  
  SWIG_check_num_args("replaceCharInStr",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("replaceCharInStr",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("replaceCharInStr",2,"char");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("replaceCharInStr",3,"char");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("replaceCharInStr",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("replaceCharInStr",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (lua_tostring(L, 3))[0];
  arg4 = (lua_toboolean(L, 4)!=0);
  result = replaceCharInStr(arg1,arg2,arg3,arg4);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replaceCharInStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char arg2 ;
  char arg3 ;
  std::string *argp1 ;
  std::string result;
  
  SWIG_check_num_args("replaceCharInStr",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("replaceCharInStr",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("replaceCharInStr",2,"char");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("replaceCharInStr",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("replaceCharInStr",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (lua_tostring(L, 3))[0];
  result = replaceCharInStr(arg1,arg2,arg3);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replaceCharInStr(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_replaceCharInStr__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_replaceCharInStr__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'replaceCharInStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    replaceCharInStr(std::string,char,char,bool)\n"
    "    replaceCharInStr(std::string,char,char)\n");
  lua_error(L);return 0;
}


static int _wrap_getCharArrayFromConstArray(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("getCharArrayFromConstArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("getCharArrayFromConstArray",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("getCharArrayFromConstArray",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)getCharArrayFromConstArray((std::string const &)*arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_round(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("round",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("round",2,"int");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)round(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iround(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("iround",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("iround",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("iround",2,"int");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)iround(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_changeProgramWorkingDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("changeProgramWorkingDirectory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("changeProgramWorkingDirectory",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)changeProgramWorkingDirectory(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_capitalizeChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char result;
  
  SWIG_check_num_args("capitalizeChar",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("capitalizeChar",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (char)capitalizeChar(arg1);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowerCaseChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char result;
  
  SWIG_check_num_args("lowerCaseChar",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("lowerCaseChar",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (char)lowerCaseChar(arg1);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("scientificFormat",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scientificFormat",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("scientificFormat",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = scientificFormat((std::string const &)*arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("scientificFormat",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("scientificFormat",1,SWIGTYPE_p_std__string);
  }
  
  result = scientificFormat((std::string const &)*arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scientificFormat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scientificFormat",2,"size_t");
  arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = scientificFormat(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scientificFormat",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = scientificFormat(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_scientificFormat__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_scientificFormat__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scientificFormat__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scientificFormat__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'scientificFormat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    scientificFormat(std::string const &,size_t)\n"
    "    scientificFormat(std::string const &)\n"
    "    scientificFormat(float,size_t)\n"
    "    scientificFormat(float)\n");
  lua_error(L);return 0;
}


static int _wrap_new_inputMouse(lua_State* L) {
  int SWIG_arg = 0;
  SDL_Event *arg1 = (SDL_Event *) 0 ;
  inputMouse *result = 0 ;
  
  SWIG_check_num_args("inputMouse::inputMouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::inputMouse",1,"SDL_Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("new_inputMouse",1,SWIGTYPE_p_SDL_Event);
  }
  
  result = (inputMouse *)new inputMouse(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inputMouse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMouse_UpdateProcessedCoordinates(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  bool result;
  
  SWIG_check_num_args("inputMouse::UpdateProcessedCoordinates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::UpdateProcessedCoordinates",1,"inputMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_UpdateProcessedCoordinates",1,SWIGTYPE_p_inputMouse);
  }
  
  result = (bool)(arg1)->UpdateProcessedCoordinates();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMouse_ChangeCoordinates(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("inputMouse::ChangeCoordinates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::ChangeCoordinates",1,"inputMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inputMouse::ChangeCoordinates",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inputMouse::ChangeCoordinates",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_ChangeCoordinates",1,SWIGTYPE_p_inputMouse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->ChangeCoordinates(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMouse_buttonPress(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  
  SWIG_check_num_args("inputMouse::buttonPress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::buttonPress",1,"inputMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_buttonPress",1,SWIGTYPE_p_inputMouse);
  }
  
  (arg1)->buttonPress();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMouse_getButtonState(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  int result;
  
  SWIG_check_num_args("inputMouse::getButtonState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::getButtonState",1,"inputMouse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_getButtonState",1,SWIGTYPE_p_inputMouse);
  }
  
  result = (int)((inputMouse const *)arg1)->getButtonState();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMouse_GetButton(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("inputMouse::GetButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::GetButton",1,"inputMouse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_GetButton",1,SWIGTYPE_p_inputMouse);
  }
  
  result = (unsigned int)((inputMouse const *)arg1)->GetButton();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_inputMouse(void *obj) {
inputMouse *arg1 = (inputMouse *) obj;
delete arg1;
}
static swig_lua_method swig_inputMouse_methods[] = {
    {"UpdateProcessedCoordinates", _wrap_inputMouse_UpdateProcessedCoordinates}, 
    {"ChangeCoordinates", _wrap_inputMouse_ChangeCoordinates}, 
    {"buttonPress", _wrap_inputMouse_buttonPress}, 
    {"getButtonState", _wrap_inputMouse_getButtonState}, 
    {"GetButton", _wrap_inputMouse_GetButton}, 
    {0,0}
};
static swig_lua_attribute swig_inputMouse_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_inputMouse_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_inputMouse_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_inputMouse_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_inputMouse_bases[] = {0};
static const char *swig_inputMouse_base_names[] = {0};
static swig_lua_class _wrap_class_inputMouse = { "inputMouse", &SWIGTYPE_p_inputMouse,_wrap_new_inputMouse, swig_delete_inputMouse, swig_inputMouse_methods, swig_inputMouse_attributes, { "inputMouse", swig_inputMouse_cls_methods, swig_inputMouse_cls_attributes, swig_inputMouse_cls_constants }, swig_inputMouse_bases, swig_inputMouse_base_names };

static int _wrap_new_inputKeyboard(lua_State* L) {
  int SWIG_arg = 0;
  SDL_Event *arg1 = (SDL_Event *) 0 ;
  inputKeyboard *result = 0 ;
  
  SWIG_check_num_args("inputKeyboard::inputKeyboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::inputKeyboard",1,"SDL_Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("new_inputKeyboard",1,SWIGTYPE_p_SDL_Event);
  }
  
  result = (inputKeyboard *)new inputKeyboard(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inputKeyboard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputKeyboard_setInputText(lua_State* L) {
  int SWIG_arg = 0;
  inputKeyboard *arg1 = (inputKeyboard *) 0 ;
  
  SWIG_check_num_args("inputKeyboard::setInputText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::setInputText",1,"inputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputKeyboard,0))){
    SWIG_fail_ptr("inputKeyboard_setInputText",1,SWIGTYPE_p_inputKeyboard);
  }
  
  (arg1)->setInputText();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputKeyboard_toggleTextMode(lua_State* L) {
  int SWIG_arg = 0;
  inputKeyboard *arg1 = (inputKeyboard *) 0 ;
  
  SWIG_check_num_args("inputKeyboard::toggleTextMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::toggleTextMode",1,"inputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputKeyboard,0))){
    SWIG_fail_ptr("inputKeyboard_toggleTextMode",1,SWIGTYPE_p_inputKeyboard);
  }
  
  (arg1)->toggleTextMode();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputKeyboard_getText(lua_State* L) {
  int SWIG_arg = 0;
  inputKeyboard *arg1 = (inputKeyboard *) 0 ;
  std::string result;
  
  SWIG_check_num_args("inputKeyboard::getText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::getText",1,"inputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputKeyboard,0))){
    SWIG_fail_ptr("inputKeyboard_getText",1,SWIGTYPE_p_inputKeyboard);
  }
  
  result = (arg1)->getText();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputKeyboard_GetKey(lua_State* L) {
  int SWIG_arg = 0;
  inputKeyboard *arg1 = (inputKeyboard *) 0 ;
  char result;
  
  SWIG_check_num_args("inputKeyboard::GetKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::GetKey",1,"inputKeyboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputKeyboard,0))){
    SWIG_fail_ptr("inputKeyboard_GetKey",1,SWIGTYPE_p_inputKeyboard);
  }
  
  result = (char)((inputKeyboard const *)arg1)->GetKey();
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_inputKeyboard(void *obj) {
inputKeyboard *arg1 = (inputKeyboard *) obj;
delete arg1;
}
static swig_lua_method swig_inputKeyboard_methods[] = {
    {"setInputText", _wrap_inputKeyboard_setInputText}, 
    {"toggleTextMode", _wrap_inputKeyboard_toggleTextMode}, 
    {"getText", _wrap_inputKeyboard_getText}, 
    {"GetKey", _wrap_inputKeyboard_GetKey}, 
    {0,0}
};
static swig_lua_attribute swig_inputKeyboard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_inputKeyboard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_inputKeyboard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_inputKeyboard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_inputKeyboard_bases[] = {0};
static const char *swig_inputKeyboard_base_names[] = {0};
static swig_lua_class _wrap_class_inputKeyboard = { "inputKeyboard", &SWIGTYPE_p_inputKeyboard,_wrap_new_inputKeyboard, swig_delete_inputKeyboard, swig_inputKeyboard_methods, swig_inputKeyboard_attributes, { "inputKeyboard", swig_inputKeyboard_cls_methods, swig_inputKeyboard_cls_attributes, swig_inputKeyboard_cls_constants }, swig_inputKeyboard_bases, swig_inputKeyboard_base_names };

static int _wrap_unknown_return_flag_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("psudo_type::flag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::flag",1,"psudo_type *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("psudo_type::flag",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_flag_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->flag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_flag_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char result;
  
  SWIG_check_num_args("psudo_type::flag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::flag",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_flag_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (char) ((arg1)->flag);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_number_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("psudo_type::number",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::number",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::number",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_number_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->number = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_number_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  int result;
  
  SWIG_check_num_args("psudo_type::number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::number",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_number_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (int) ((arg1)->number);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_uNumber_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("psudo_type::uNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::uNumber",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::uNumber",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_uNumber_set",1,SWIGTYPE_p_psudo_type);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->uNumber = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_uNumber_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("psudo_type::uNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::uNumber",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_uNumber_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (unsigned int) ((arg1)->uNumber);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_decimal_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("psudo_type::decimal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::decimal",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::decimal",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_decimal_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->decimal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_decimal_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  double result;
  
  SWIG_check_num_args("psudo_type::decimal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::decimal",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_decimal_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (double) ((arg1)->decimal);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_answer_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("psudo_type::answer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::answer",1,"psudo_type *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("psudo_type::answer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_answer_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->answer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_answer_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  bool result;
  
  SWIG_check_num_args("psudo_type::answer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::answer",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_answer_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (bool) ((arg1)->answer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_str_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("psudo_type::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::str",1,"psudo_type *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("psudo_type::str",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_str_set",1,SWIGTYPE_p_psudo_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("unknown_return_str_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->str = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_str_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  std::string result;
  
  SWIG_check_num_args("psudo_type::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::str",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_str_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result =  ((arg1)->str);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_c_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("psudo_type::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::c",1,"psudo_type *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("psudo_type::c",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_c_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_c_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char result;
  
  SWIG_check_num_args("psudo_type::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::c",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_c_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (char) ((arg1)->c);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_unknown_return(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *result = 0 ;
  
  SWIG_check_num_args("psudo_type::psudo_type",0,0)
  result = (psudo_type *)new psudo_type();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_psudo_type,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_unknown_return(void *obj) {
psudo_type *arg1 = (psudo_type *) obj;
delete arg1;
}
static swig_lua_method swig_psudo_type_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_psudo_type_attributes[] = {
    { "flag", _wrap_unknown_return_flag_get, _wrap_unknown_return_flag_set},
    { "number", _wrap_unknown_return_number_get, _wrap_unknown_return_number_set},
    { "uNumber", _wrap_unknown_return_uNumber_get, _wrap_unknown_return_uNumber_set},
    { "decimal", _wrap_unknown_return_decimal_get, _wrap_unknown_return_decimal_set},
    { "answer", _wrap_unknown_return_answer_get, _wrap_unknown_return_answer_set},
    { "str", _wrap_unknown_return_str_get, _wrap_unknown_return_str_set},
    { "c", _wrap_unknown_return_c_get, _wrap_unknown_return_c_set},
    {0,0,0}
};
static swig_lua_attribute swig_psudo_type_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_psudo_type_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_psudo_type_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_psudo_type_bases[] = {0};
static const char *swig_psudo_type_base_names[] = {0};
static swig_lua_class _wrap_class_psudo_type = { "unknown_return", &SWIGTYPE_p_psudo_type,_wrap_new_unknown_return, swig_delete_unknown_return, swig_psudo_type_methods, swig_psudo_type_attributes, { "unknown_return", swig_psudo_type_cls_methods, swig_psudo_type_cls_attributes, swig_psudo_type_cls_constants }, swig_psudo_type_bases, swig_psudo_type_base_names };

static int _wrap_new_LuaWrap(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  LuaWrap *result = 0 ;
  
  SWIG_check_num_args("LuaWrap::LuaWrap",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LuaWrap::LuaWrap",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (LuaWrap *)new LuaWrap((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaWrap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_executeFunction(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("LuaWrap::executeFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::executeFunction",1,"LuaWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaWrap::executeFunction",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_executeFunction",1,SWIGTYPE_p_LuaWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LuaWrap_executeFunction",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->executeFunction((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_ClearArgs(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("LuaWrap::ClearArgs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::ClearArgs",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::ClearArgs",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_ClearArgs",1,SWIGTYPE_p_LuaWrap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->ClearArgs(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_ClearResult(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  
  SWIG_check_num_args("LuaWrap::ClearResult",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::ClearResult",1,"LuaWrap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_ClearResult",1,SWIGTYPE_p_LuaWrap);
  }
  
  (arg1)->ClearResult();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_GetInternalState(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *result = 0 ;
  
  SWIG_check_num_args("LuaWrap::GetInternalState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::GetInternalState",1,"LuaWrap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_GetInternalState",1,SWIGTYPE_p_LuaWrap);
  }
  
  result = (lua_State *)((LuaWrap const *)arg1)->GetInternalState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_lua_State,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_GetArgCount(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  size_t result;
  
  SWIG_check_num_args("LuaWrap::GetArgCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::GetArgCount",1,"LuaWrap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_GetArgCount",1,SWIGTYPE_p_LuaWrap);
  }
  
  result = ((LuaWrap const *)arg1)->GetArgCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractInt(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  int result;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractInt",1,"LuaWrap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractInt",1,SWIGTYPE_p_LuaWrap);
  }
  
  result = (int)(arg1)->lua_extractInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractChar(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  char result;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractChar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractChar",1,"LuaWrap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractChar",1,SWIGTYPE_p_LuaWrap);
  }
  
  result = (char)(arg1)->lua_extractChar(arg2);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractStr(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  std::string result;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractStr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractStr",1,"LuaWrap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractStr",1,SWIGTYPE_p_LuaWrap);
  }
  
  result = (arg1)->lua_extractStr(arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractDouble(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  double result;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractDouble",1,"LuaWrap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractDouble",1,SWIGTYPE_p_LuaWrap);
  }
  
  result = (double)(arg1)->lua_extractDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractPtr(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  void *result = 0 ;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractPtr",1,"LuaWrap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractPtr",1,SWIGTYPE_p_LuaWrap);
  }
  
  result = (void *)(arg1)->lua_extractPtr(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractIntFromList(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractIntFromList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractIntFromList",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::lua_extractIntFromList",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractIntFromList",1,SWIGTYPE_p_LuaWrap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 2);
  result = (int)(arg1)->lua_extractIntFromList(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractStrFromList(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  unsigned int arg3 ;
  std::string result;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractStrFromList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractStrFromList",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::lua_extractStrFromList",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractStrFromList",1,SWIGTYPE_p_LuaWrap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 2);
  result = (arg1)->lua_extractStrFromList(arg2,arg3);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractCharFromList(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  unsigned int arg3 ;
  char result;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractCharFromList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractCharFromList",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::lua_extractCharFromList",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractCharFromList",1,SWIGTYPE_p_LuaWrap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 2);
  result = (char)(arg1)->lua_extractCharFromList(arg2,arg3);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractDoubleFromList(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  unsigned int arg3 ;
  double result;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractDoubleFromList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractDoubleFromList",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::lua_extractDoubleFromList",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractDoubleFromList",1,SWIGTYPE_p_LuaWrap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 2);
  result = (double)(arg1)->lua_extractDoubleFromList(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_lua_extractPtrFromList(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  lua_State *arg2 = (lua_State *) 0 ;
  unsigned int arg3 ;
  void *result = 0 ;
  
  arg2 = L;
  SWIG_check_num_args("LuaWrap::lua_extractPtrFromList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::lua_extractPtrFromList",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::lua_extractPtrFromList",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_lua_extractPtrFromList",1,SWIGTYPE_p_LuaWrap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 2);
  result = (void *)(arg1)->lua_extractPtrFromList(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_AddArgument__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("LuaWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::AddArgument",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::AddArgument",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_AddArgument",1,SWIGTYPE_p_LuaWrap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddArgument(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_AddArgument__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("LuaWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::AddArgument",1,"LuaWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LuaWrap::AddArgument",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_AddArgument",1,SWIGTYPE_p_LuaWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LuaWrap_AddArgument",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->AddArgument((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_AddArgument__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("LuaWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::AddArgument",1,"LuaWrap *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LuaWrap::AddArgument",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_AddArgument",1,SWIGTYPE_p_LuaWrap);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->AddArgument(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_AddArgument__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("LuaWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::AddArgument",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::AddArgument",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_AddArgument",1,SWIGTYPE_p_LuaWrap);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->AddArgument(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_AddArgument__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("LuaWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::AddArgument",1,"LuaWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LuaWrap::AddArgument",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_AddArgument",1,SWIGTYPE_p_LuaWrap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->AddArgument(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_AddArgument__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  LuaWrap *arg1 = (LuaWrap *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("LuaWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LuaWrap::AddArgument",1,"LuaWrap *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("LuaWrap::AddArgument",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaWrap,0))){
    SWIG_fail_ptr("LuaWrap_AddArgument",1,SWIGTYPE_p_LuaWrap);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->AddArgument(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaWrap_AddArgument(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_LuaWrap_AddArgument__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaWrap_AddArgument__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaWrap_AddArgument__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaWrap_AddArgument__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LuaWrap_AddArgument__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LuaWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_LuaWrap_AddArgument__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LuaWrap_AddArgument'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LuaWrap::AddArgument(int)\n"
    "    LuaWrap::AddArgument(std::string const &)\n"
    "    LuaWrap::AddArgument(char)\n"
    "    LuaWrap::AddArgument(double)\n"
    "    LuaWrap::AddArgument(unsigned int)\n"
    "    LuaWrap::AddArgument(bool)\n");
  lua_error(L);return 0;
}


static void swig_delete_LuaWrap(void *obj) {
LuaWrap *arg1 = (LuaWrap *) obj;
delete arg1;
}
static swig_lua_method swig_LuaWrap_methods[] = {
    {"executeFunction", _wrap_LuaWrap_executeFunction}, 
    {"ClearArgs", _wrap_LuaWrap_ClearArgs}, 
    {"ClearResult", _wrap_LuaWrap_ClearResult}, 
    {"GetInternalState", _wrap_LuaWrap_GetInternalState}, 
    {"GetArgCount", _wrap_LuaWrap_GetArgCount}, 
    {"lua_extractInt", _wrap_LuaWrap_lua_extractInt}, 
    {"lua_extractChar", _wrap_LuaWrap_lua_extractChar}, 
    {"lua_extractStr", _wrap_LuaWrap_lua_extractStr}, 
    {"lua_extractDouble", _wrap_LuaWrap_lua_extractDouble}, 
    {"lua_extractPtr", _wrap_LuaWrap_lua_extractPtr}, 
    {"lua_extractIntFromList", _wrap_LuaWrap_lua_extractIntFromList}, 
    {"lua_extractStrFromList", _wrap_LuaWrap_lua_extractStrFromList}, 
    {"lua_extractCharFromList", _wrap_LuaWrap_lua_extractCharFromList}, 
    {"lua_extractDoubleFromList", _wrap_LuaWrap_lua_extractDoubleFromList}, 
    {"lua_extractPtrFromList", _wrap_LuaWrap_lua_extractPtrFromList}, 
    {"AddArgument", _wrap_LuaWrap_AddArgument}, 
    {0,0}
};
static swig_lua_attribute swig_LuaWrap_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_LuaWrap_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaWrap_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_LuaWrap_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_LuaWrap_bases[] = {0};
static const char *swig_LuaWrap_base_names[] = {0};
static swig_lua_class _wrap_class_LuaWrap = { "LuaWrap", &SWIGTYPE_p_LuaWrap,_wrap_new_LuaWrap, swig_delete_LuaWrap, swig_LuaWrap_methods, swig_LuaWrap_attributes, { "LuaWrap", swig_LuaWrap_cls_methods, swig_LuaWrap_cls_attributes, swig_LuaWrap_cls_constants }, swig_LuaWrap_bases, swig_LuaWrap_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "CalculateDistance", _wrap_CalculateDistance},
    { "data_base_CreateNewFile_static", _wrap_data_base_CreateNewFile_static},
    { "copyfile",_wrap_copyfile},
    { "apply_surface",_wrap_apply_surface},
    { "LoadTexture", _wrap_LoadTexture},
    { "grabText", _wrap_grabText},
    { "init", _wrap_init},
    { "FrameCapper", _wrap_FrameCapper},
    { "SpawnUnit",_wrap_SpawnUnit},
    { "FindNearbyUnit", _wrap_FindNearbyUnit},
    { "FindUnitByName", _wrap_FindUnitByName},
    { "loadGameConstants", _wrap_loadGameConstants},
    { "GetRenderer", _wrap_GetRenderer},
    { "saveToFile", _wrap_saveToFile},
    { "loadFile", _wrap_loadFile},
    { "reverseOrderStack", _wrap_reverseOrderStack},
    { "charToInt", _wrap_charToInt},
    { "cStrToInt", _wrap_cStrToInt},
    { "intToStr", _wrap_intToStr},
    { "cStrToNum", _wrap_cStrToNum},
    { "numToStr", _wrap_numToStr},
    { "searchChar", _wrap_searchChar},
    { "findString",_wrap_findString},
    { "slice", _wrap_slice},
    { "shiftArrayLeft",_wrap_shiftArrayLeft},
    { "transferStr", _wrap_transferStr},
    { "createPCharFromBuffer", _wrap_createPCharFromBuffer},
    { "removeCharFromStr", _wrap_removeCharFromStr},
    { "removeMultipleCharFromStr", _wrap_removeMultipleCharFromStr},
    { "searchCharIndex",_wrap_searchCharIndex},
    { "sliceStr", _wrap_sliceStr},
    { "numToInt", _wrap_numToInt},
    { "fuseStrs", _wrap_fuseStrs},
    { "capitalizeStr", _wrap_capitalizeStr},
    { "replaceCharInStr",_wrap_replaceCharInStr},
    { "getCharArrayFromConstArray", _wrap_getCharArrayFromConstArray},
    { "round", _wrap_round},
    { "iround", _wrap_iround},
    { "changeProgramWorkingDirectory", _wrap_changeProgramWorkingDirectory},
    { "capitalizeChar", _wrap_capitalizeChar},
    { "lowerCaseChar", _wrap_lowerCaseChar},
    { "scientificFormat",_wrap_scientificFormat},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ENDOFFILE", -1)},
    {SWIG_LUA_CONSTTAB_INT("VAR", VAR)},
    {SWIG_LUA_CONSTTAB_INT("XML", XML)},
    {SWIG_LUA_CONSTTAB_INT("LUA", LUA)},
    {SWIG_LUA_CONSTTAB_INT("PYTHON", PYTHON)},
    {SWIG_LUA_CONSTTAB_INT("LUA_TOPITEM", -1)},
    {SWIG_LUA_CONSTTAB_INT("LUA_ERASE_ALL", -1)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ButtonTo_p_textbox(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((textbox *)  ((Button *) x));
}
static swig_type_info _swigt__p_Button = {"_p_Button", "Button *", 0, 0, (void*)&_wrap_class_Button, 0};
static swig_type_info _swigt__p_LuaWrap = {"_p_LuaWrap", "LuaWrap *", 0, 0, (void*)&_wrap_class_LuaWrap, 0};
static swig_type_info _swigt__p_Physics = {"_p_Physics", "Physics *", 0, 0, (void*)&_wrap_class_Physics, 0};
static swig_type_info _swigt__p_ProgressBar = {"_p_ProgressBar", "ProgressBar *", 0, 0, (void*)&_wrap_class_ProgressBar, 0};
static swig_type_info _swigt__p_Pywrap = {"_p_Pywrap", "Pywrap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_BlendMode = {"_p_SDL_BlendMode", "SDL_BlendMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Renderer = {"_p_SDL_Renderer", "SDL_Renderer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Texture = {"_p_SDL_Texture", "SDL_Texture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Timer = {"_p_Timer", "Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_Trigger = {"_p_Trigger", "Trigger *", 0, 0, (void*)&_wrap_class_Trigger, 0};
static swig_type_info _swigt__p_UI = {"_p_UI", "UI *", 0, 0, (void*)&_wrap_class_UI, 0};
static swig_type_info _swigt__p_Uint8 = {"_p_Uint8", "Uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Unit = {"_p_Unit", "Unit *", 0, 0, (void*)&_wrap_class_Unit, 0};
static swig_type_info _swigt__p_data_base = {"_p_data_base", "data_base *", 0, 0, (void*)&_wrap_class_data_base, 0};
static swig_type_info _swigt__p_draw_base = {"_p_draw_base", "draw_base *", 0, 0, (void*)&_wrap_class_draw_base, 0};
static swig_type_info _swigt__p_fuzzy_obj = {"_p_fuzzy_obj", "fuzzy_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_inputKeyboard = {"_p_inputKeyboard", "inputKeyboard *", 0, 0, (void*)&_wrap_class_inputKeyboard, 0};
static swig_type_info _swigt__p_inputMouse = {"_p_inputMouse", "inputMouse *", 0, 0, (void*)&_wrap_class_inputMouse, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lua_State = {"_p_lua_State", "lua_State *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math_VECTOR = {"_p_math_VECTOR", "math_VECTOR *", 0, 0, (void*)&_wrap_class_math_VECTOR, 0};
static swig_type_info _swigt__p_math_point = {"_p_math_point", "math_point *", 0, 0, (void*)&_wrap_class_math_point, 0};
static swig_type_info _swigt__p_pChar = {"_p_pChar", "pChar *", 0, 0, (void*)&_wrap_class_pChar, 0};
static swig_type_info _swigt__p_psudo_type = {"_p_psudo_type", "psudo_type *|unknown_return *", 0, 0, (void*)&_wrap_class_psudo_type, 0};
static swig_type_info _swigt__p_sound_base = {"_p_sound_base", "sound_base *", 0, 0, (void*)&_wrap_class_sound_base, 0};
static swig_type_info _swigt__p_std__stackT_fuzzy_obj_t = {"_p_std__stackT_fuzzy_obj_t", "std::stack< fuzzy_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_textbox = {"_p_textbox", "textbox *", 0, 0, (void*)&_wrap_class_textbox, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Button,
  &_swigt__p_LuaWrap,
  &_swigt__p_Physics,
  &_swigt__p_ProgressBar,
  &_swigt__p_Pywrap,
  &_swigt__p_SDL_BlendMode,
  &_swigt__p_SDL_Event,
  &_swigt__p_SDL_Renderer,
  &_swigt__p_SDL_Texture,
  &_swigt__p_Timer,
  &_swigt__p_Trigger,
  &_swigt__p_UI,
  &_swigt__p_Uint8,
  &_swigt__p_Unit,
  &_swigt__p_data_base,
  &_swigt__p_draw_base,
  &_swigt__p_fuzzy_obj,
  &_swigt__p_inputKeyboard,
  &_swigt__p_inputMouse,
  &_swigt__p_int,
  &_swigt__p_lua_State,
  &_swigt__p_math_VECTOR,
  &_swigt__p_math_point,
  &_swigt__p_pChar,
  &_swigt__p_psudo_type,
  &_swigt__p_sound_base,
  &_swigt__p_std__stackT_fuzzy_obj_t,
  &_swigt__p_std__string,
  &_swigt__p_textbox,
  &_swigt__p_unsigned_char,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Button[] = {  {&_swigt__p_Button, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaWrap[] = {  {&_swigt__p_LuaWrap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Physics[] = {  {&_swigt__p_Physics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProgressBar[] = {  {&_swigt__p_ProgressBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pywrap[] = {  {&_swigt__p_Pywrap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_BlendMode[] = {  {&_swigt__p_SDL_BlendMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Renderer[] = {  {&_swigt__p_SDL_Renderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Texture[] = {  {&_swigt__p_SDL_Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Timer[] = {  {&_swigt__p_Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Trigger[] = {  {&_swigt__p_Trigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UI[] = {  {&_swigt__p_UI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Uint8[] = {  {&_swigt__p_Uint8, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Unit[] = {  {&_swigt__p_Unit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_data_base[] = {  {&_swigt__p_data_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_draw_base[] = {  {&_swigt__p_draw_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fuzzy_obj[] = {  {&_swigt__p_fuzzy_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inputKeyboard[] = {  {&_swigt__p_inputKeyboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inputMouse[] = {  {&_swigt__p_inputMouse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lua_State[] = {  {&_swigt__p_lua_State, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math_VECTOR[] = {  {&_swigt__p_math_VECTOR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math_point[] = {  {&_swigt__p_math_point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pChar[] = {  {&_swigt__p_pChar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_psudo_type[] = {  {&_swigt__p_psudo_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sound_base[] = {  {&_swigt__p_sound_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_fuzzy_obj_t[] = {  {&_swigt__p_std__stackT_fuzzy_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_textbox[] = {  {&_swigt__p_textbox, 0, 0, 0},  {&_swigt__p_Button, _p_ButtonTo_p_textbox, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Button,
  _swigc__p_LuaWrap,
  _swigc__p_Physics,
  _swigc__p_ProgressBar,
  _swigc__p_Pywrap,
  _swigc__p_SDL_BlendMode,
  _swigc__p_SDL_Event,
  _swigc__p_SDL_Renderer,
  _swigc__p_SDL_Texture,
  _swigc__p_Timer,
  _swigc__p_Trigger,
  _swigc__p_UI,
  _swigc__p_Uint8,
  _swigc__p_Unit,
  _swigc__p_data_base,
  _swigc__p_draw_base,
  _swigc__p_fuzzy_obj,
  _swigc__p_inputKeyboard,
  _swigc__p_inputMouse,
  _swigc__p_int,
  _swigc__p_lua_State,
  _swigc__p_math_VECTOR,
  _swigc__p_math_point,
  _swigc__p_pChar,
  _swigc__p_psudo_type,
  _swigc__p_sound_base,
  _swigc__p_std__stackT_fuzzy_obj_t,
  _swigc__p_std__string,
  _swigc__p_textbox,
  _swigc__p_unsigned_char,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

