# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EE', [dirname(__file__)])
        except ImportError:
            import _EE
            return _EE
        if fp is not None:
            try:
                _mod = imp.load_module('_EE', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EE = swig_import_helper()
    del swig_import_helper
else:
    import _EE
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def cdata(ptr, nelements=1):
    return _EE.cdata(ptr, nelements)
cdata = _EE.cdata

def memmove(data, indata):
    return _EE.memmove(data, indata)
memmove = _EE.memmove

_EE.SDL_SCANCODE_UNKNOWN_swigconstant(_EE)
SDL_SCANCODE_UNKNOWN = _EE.SDL_SCANCODE_UNKNOWN

_EE.SDL_SCANCODE_A_swigconstant(_EE)
SDL_SCANCODE_A = _EE.SDL_SCANCODE_A

_EE.SDL_SCANCODE_B_swigconstant(_EE)
SDL_SCANCODE_B = _EE.SDL_SCANCODE_B

_EE.SDL_SCANCODE_C_swigconstant(_EE)
SDL_SCANCODE_C = _EE.SDL_SCANCODE_C

_EE.SDL_SCANCODE_D_swigconstant(_EE)
SDL_SCANCODE_D = _EE.SDL_SCANCODE_D

_EE.SDL_SCANCODE_E_swigconstant(_EE)
SDL_SCANCODE_E = _EE.SDL_SCANCODE_E

_EE.SDL_SCANCODE_F_swigconstant(_EE)
SDL_SCANCODE_F = _EE.SDL_SCANCODE_F

_EE.SDL_SCANCODE_G_swigconstant(_EE)
SDL_SCANCODE_G = _EE.SDL_SCANCODE_G

_EE.SDL_SCANCODE_H_swigconstant(_EE)
SDL_SCANCODE_H = _EE.SDL_SCANCODE_H

_EE.SDL_SCANCODE_I_swigconstant(_EE)
SDL_SCANCODE_I = _EE.SDL_SCANCODE_I

_EE.SDL_SCANCODE_J_swigconstant(_EE)
SDL_SCANCODE_J = _EE.SDL_SCANCODE_J

_EE.SDL_SCANCODE_K_swigconstant(_EE)
SDL_SCANCODE_K = _EE.SDL_SCANCODE_K

_EE.SDL_SCANCODE_L_swigconstant(_EE)
SDL_SCANCODE_L = _EE.SDL_SCANCODE_L

_EE.SDL_SCANCODE_M_swigconstant(_EE)
SDL_SCANCODE_M = _EE.SDL_SCANCODE_M

_EE.SDL_SCANCODE_N_swigconstant(_EE)
SDL_SCANCODE_N = _EE.SDL_SCANCODE_N

_EE.SDL_SCANCODE_O_swigconstant(_EE)
SDL_SCANCODE_O = _EE.SDL_SCANCODE_O

_EE.SDL_SCANCODE_P_swigconstant(_EE)
SDL_SCANCODE_P = _EE.SDL_SCANCODE_P

_EE.SDL_SCANCODE_Q_swigconstant(_EE)
SDL_SCANCODE_Q = _EE.SDL_SCANCODE_Q

_EE.SDL_SCANCODE_R_swigconstant(_EE)
SDL_SCANCODE_R = _EE.SDL_SCANCODE_R

_EE.SDL_SCANCODE_S_swigconstant(_EE)
SDL_SCANCODE_S = _EE.SDL_SCANCODE_S

_EE.SDL_SCANCODE_T_swigconstant(_EE)
SDL_SCANCODE_T = _EE.SDL_SCANCODE_T

_EE.SDL_SCANCODE_U_swigconstant(_EE)
SDL_SCANCODE_U = _EE.SDL_SCANCODE_U

_EE.SDL_SCANCODE_V_swigconstant(_EE)
SDL_SCANCODE_V = _EE.SDL_SCANCODE_V

_EE.SDL_SCANCODE_W_swigconstant(_EE)
SDL_SCANCODE_W = _EE.SDL_SCANCODE_W

_EE.SDL_SCANCODE_X_swigconstant(_EE)
SDL_SCANCODE_X = _EE.SDL_SCANCODE_X

_EE.SDL_SCANCODE_Y_swigconstant(_EE)
SDL_SCANCODE_Y = _EE.SDL_SCANCODE_Y

_EE.SDL_SCANCODE_Z_swigconstant(_EE)
SDL_SCANCODE_Z = _EE.SDL_SCANCODE_Z

_EE.SDL_SCANCODE_1_swigconstant(_EE)
SDL_SCANCODE_1 = _EE.SDL_SCANCODE_1

_EE.SDL_SCANCODE_2_swigconstant(_EE)
SDL_SCANCODE_2 = _EE.SDL_SCANCODE_2

_EE.SDL_SCANCODE_3_swigconstant(_EE)
SDL_SCANCODE_3 = _EE.SDL_SCANCODE_3

_EE.SDL_SCANCODE_4_swigconstant(_EE)
SDL_SCANCODE_4 = _EE.SDL_SCANCODE_4

_EE.SDL_SCANCODE_5_swigconstant(_EE)
SDL_SCANCODE_5 = _EE.SDL_SCANCODE_5

_EE.SDL_SCANCODE_6_swigconstant(_EE)
SDL_SCANCODE_6 = _EE.SDL_SCANCODE_6

_EE.SDL_SCANCODE_7_swigconstant(_EE)
SDL_SCANCODE_7 = _EE.SDL_SCANCODE_7

_EE.SDL_SCANCODE_8_swigconstant(_EE)
SDL_SCANCODE_8 = _EE.SDL_SCANCODE_8

_EE.SDL_SCANCODE_9_swigconstant(_EE)
SDL_SCANCODE_9 = _EE.SDL_SCANCODE_9

_EE.SDL_SCANCODE_0_swigconstant(_EE)
SDL_SCANCODE_0 = _EE.SDL_SCANCODE_0

_EE.SDL_SCANCODE_RETURN_swigconstant(_EE)
SDL_SCANCODE_RETURN = _EE.SDL_SCANCODE_RETURN

_EE.SDL_SCANCODE_ESCAPE_swigconstant(_EE)
SDL_SCANCODE_ESCAPE = _EE.SDL_SCANCODE_ESCAPE

_EE.SDL_SCANCODE_BACKSPACE_swigconstant(_EE)
SDL_SCANCODE_BACKSPACE = _EE.SDL_SCANCODE_BACKSPACE

_EE.SDL_SCANCODE_TAB_swigconstant(_EE)
SDL_SCANCODE_TAB = _EE.SDL_SCANCODE_TAB

_EE.SDL_SCANCODE_SPACE_swigconstant(_EE)
SDL_SCANCODE_SPACE = _EE.SDL_SCANCODE_SPACE

_EE.SDL_SCANCODE_MINUS_swigconstant(_EE)
SDL_SCANCODE_MINUS = _EE.SDL_SCANCODE_MINUS

_EE.SDL_SCANCODE_EQUALS_swigconstant(_EE)
SDL_SCANCODE_EQUALS = _EE.SDL_SCANCODE_EQUALS

_EE.SDL_SCANCODE_LEFTBRACKET_swigconstant(_EE)
SDL_SCANCODE_LEFTBRACKET = _EE.SDL_SCANCODE_LEFTBRACKET

_EE.SDL_SCANCODE_RIGHTBRACKET_swigconstant(_EE)
SDL_SCANCODE_RIGHTBRACKET = _EE.SDL_SCANCODE_RIGHTBRACKET

_EE.SDL_SCANCODE_BACKSLASH_swigconstant(_EE)
SDL_SCANCODE_BACKSLASH = _EE.SDL_SCANCODE_BACKSLASH

_EE.SDL_SCANCODE_NONUSHASH_swigconstant(_EE)
SDL_SCANCODE_NONUSHASH = _EE.SDL_SCANCODE_NONUSHASH

_EE.SDL_SCANCODE_SEMICOLON_swigconstant(_EE)
SDL_SCANCODE_SEMICOLON = _EE.SDL_SCANCODE_SEMICOLON

_EE.SDL_SCANCODE_APOSTROPHE_swigconstant(_EE)
SDL_SCANCODE_APOSTROPHE = _EE.SDL_SCANCODE_APOSTROPHE

_EE.SDL_SCANCODE_GRAVE_swigconstant(_EE)
SDL_SCANCODE_GRAVE = _EE.SDL_SCANCODE_GRAVE

_EE.SDL_SCANCODE_COMMA_swigconstant(_EE)
SDL_SCANCODE_COMMA = _EE.SDL_SCANCODE_COMMA

_EE.SDL_SCANCODE_PERIOD_swigconstant(_EE)
SDL_SCANCODE_PERIOD = _EE.SDL_SCANCODE_PERIOD

_EE.SDL_SCANCODE_SLASH_swigconstant(_EE)
SDL_SCANCODE_SLASH = _EE.SDL_SCANCODE_SLASH

_EE.SDL_SCANCODE_CAPSLOCK_swigconstant(_EE)
SDL_SCANCODE_CAPSLOCK = _EE.SDL_SCANCODE_CAPSLOCK

_EE.SDL_SCANCODE_F1_swigconstant(_EE)
SDL_SCANCODE_F1 = _EE.SDL_SCANCODE_F1

_EE.SDL_SCANCODE_F2_swigconstant(_EE)
SDL_SCANCODE_F2 = _EE.SDL_SCANCODE_F2

_EE.SDL_SCANCODE_F3_swigconstant(_EE)
SDL_SCANCODE_F3 = _EE.SDL_SCANCODE_F3

_EE.SDL_SCANCODE_F4_swigconstant(_EE)
SDL_SCANCODE_F4 = _EE.SDL_SCANCODE_F4

_EE.SDL_SCANCODE_F5_swigconstant(_EE)
SDL_SCANCODE_F5 = _EE.SDL_SCANCODE_F5

_EE.SDL_SCANCODE_F6_swigconstant(_EE)
SDL_SCANCODE_F6 = _EE.SDL_SCANCODE_F6

_EE.SDL_SCANCODE_F7_swigconstant(_EE)
SDL_SCANCODE_F7 = _EE.SDL_SCANCODE_F7

_EE.SDL_SCANCODE_F8_swigconstant(_EE)
SDL_SCANCODE_F8 = _EE.SDL_SCANCODE_F8

_EE.SDL_SCANCODE_F9_swigconstant(_EE)
SDL_SCANCODE_F9 = _EE.SDL_SCANCODE_F9

_EE.SDL_SCANCODE_F10_swigconstant(_EE)
SDL_SCANCODE_F10 = _EE.SDL_SCANCODE_F10

_EE.SDL_SCANCODE_F11_swigconstant(_EE)
SDL_SCANCODE_F11 = _EE.SDL_SCANCODE_F11

_EE.SDL_SCANCODE_F12_swigconstant(_EE)
SDL_SCANCODE_F12 = _EE.SDL_SCANCODE_F12

_EE.SDL_SCANCODE_PRINTSCREEN_swigconstant(_EE)
SDL_SCANCODE_PRINTSCREEN = _EE.SDL_SCANCODE_PRINTSCREEN

_EE.SDL_SCANCODE_SCROLLLOCK_swigconstant(_EE)
SDL_SCANCODE_SCROLLLOCK = _EE.SDL_SCANCODE_SCROLLLOCK

_EE.SDL_SCANCODE_PAUSE_swigconstant(_EE)
SDL_SCANCODE_PAUSE = _EE.SDL_SCANCODE_PAUSE

_EE.SDL_SCANCODE_INSERT_swigconstant(_EE)
SDL_SCANCODE_INSERT = _EE.SDL_SCANCODE_INSERT

_EE.SDL_SCANCODE_HOME_swigconstant(_EE)
SDL_SCANCODE_HOME = _EE.SDL_SCANCODE_HOME

_EE.SDL_SCANCODE_PAGEUP_swigconstant(_EE)
SDL_SCANCODE_PAGEUP = _EE.SDL_SCANCODE_PAGEUP

_EE.SDL_SCANCODE_DELETE_swigconstant(_EE)
SDL_SCANCODE_DELETE = _EE.SDL_SCANCODE_DELETE

_EE.SDL_SCANCODE_END_swigconstant(_EE)
SDL_SCANCODE_END = _EE.SDL_SCANCODE_END

_EE.SDL_SCANCODE_PAGEDOWN_swigconstant(_EE)
SDL_SCANCODE_PAGEDOWN = _EE.SDL_SCANCODE_PAGEDOWN

_EE.SDL_SCANCODE_RIGHT_swigconstant(_EE)
SDL_SCANCODE_RIGHT = _EE.SDL_SCANCODE_RIGHT

_EE.SDL_SCANCODE_LEFT_swigconstant(_EE)
SDL_SCANCODE_LEFT = _EE.SDL_SCANCODE_LEFT

_EE.SDL_SCANCODE_DOWN_swigconstant(_EE)
SDL_SCANCODE_DOWN = _EE.SDL_SCANCODE_DOWN

_EE.SDL_SCANCODE_UP_swigconstant(_EE)
SDL_SCANCODE_UP = _EE.SDL_SCANCODE_UP

_EE.SDL_SCANCODE_NUMLOCKCLEAR_swigconstant(_EE)
SDL_SCANCODE_NUMLOCKCLEAR = _EE.SDL_SCANCODE_NUMLOCKCLEAR

_EE.SDL_SCANCODE_KP_DIVIDE_swigconstant(_EE)
SDL_SCANCODE_KP_DIVIDE = _EE.SDL_SCANCODE_KP_DIVIDE

_EE.SDL_SCANCODE_KP_MULTIPLY_swigconstant(_EE)
SDL_SCANCODE_KP_MULTIPLY = _EE.SDL_SCANCODE_KP_MULTIPLY

_EE.SDL_SCANCODE_KP_MINUS_swigconstant(_EE)
SDL_SCANCODE_KP_MINUS = _EE.SDL_SCANCODE_KP_MINUS

_EE.SDL_SCANCODE_KP_PLUS_swigconstant(_EE)
SDL_SCANCODE_KP_PLUS = _EE.SDL_SCANCODE_KP_PLUS

_EE.SDL_SCANCODE_KP_ENTER_swigconstant(_EE)
SDL_SCANCODE_KP_ENTER = _EE.SDL_SCANCODE_KP_ENTER

_EE.SDL_SCANCODE_KP_1_swigconstant(_EE)
SDL_SCANCODE_KP_1 = _EE.SDL_SCANCODE_KP_1

_EE.SDL_SCANCODE_KP_2_swigconstant(_EE)
SDL_SCANCODE_KP_2 = _EE.SDL_SCANCODE_KP_2

_EE.SDL_SCANCODE_KP_3_swigconstant(_EE)
SDL_SCANCODE_KP_3 = _EE.SDL_SCANCODE_KP_3

_EE.SDL_SCANCODE_KP_4_swigconstant(_EE)
SDL_SCANCODE_KP_4 = _EE.SDL_SCANCODE_KP_4

_EE.SDL_SCANCODE_KP_5_swigconstant(_EE)
SDL_SCANCODE_KP_5 = _EE.SDL_SCANCODE_KP_5

_EE.SDL_SCANCODE_KP_6_swigconstant(_EE)
SDL_SCANCODE_KP_6 = _EE.SDL_SCANCODE_KP_6

_EE.SDL_SCANCODE_KP_7_swigconstant(_EE)
SDL_SCANCODE_KP_7 = _EE.SDL_SCANCODE_KP_7

_EE.SDL_SCANCODE_KP_8_swigconstant(_EE)
SDL_SCANCODE_KP_8 = _EE.SDL_SCANCODE_KP_8

_EE.SDL_SCANCODE_KP_9_swigconstant(_EE)
SDL_SCANCODE_KP_9 = _EE.SDL_SCANCODE_KP_9

_EE.SDL_SCANCODE_KP_0_swigconstant(_EE)
SDL_SCANCODE_KP_0 = _EE.SDL_SCANCODE_KP_0

_EE.SDL_SCANCODE_KP_PERIOD_swigconstant(_EE)
SDL_SCANCODE_KP_PERIOD = _EE.SDL_SCANCODE_KP_PERIOD

_EE.SDL_SCANCODE_NONUSBACKSLASH_swigconstant(_EE)
SDL_SCANCODE_NONUSBACKSLASH = _EE.SDL_SCANCODE_NONUSBACKSLASH

_EE.SDL_SCANCODE_APPLICATION_swigconstant(_EE)
SDL_SCANCODE_APPLICATION = _EE.SDL_SCANCODE_APPLICATION

_EE.SDL_SCANCODE_POWER_swigconstant(_EE)
SDL_SCANCODE_POWER = _EE.SDL_SCANCODE_POWER

_EE.SDL_SCANCODE_KP_EQUALS_swigconstant(_EE)
SDL_SCANCODE_KP_EQUALS = _EE.SDL_SCANCODE_KP_EQUALS

_EE.SDL_SCANCODE_F13_swigconstant(_EE)
SDL_SCANCODE_F13 = _EE.SDL_SCANCODE_F13

_EE.SDL_SCANCODE_F14_swigconstant(_EE)
SDL_SCANCODE_F14 = _EE.SDL_SCANCODE_F14

_EE.SDL_SCANCODE_F15_swigconstant(_EE)
SDL_SCANCODE_F15 = _EE.SDL_SCANCODE_F15

_EE.SDL_SCANCODE_F16_swigconstant(_EE)
SDL_SCANCODE_F16 = _EE.SDL_SCANCODE_F16

_EE.SDL_SCANCODE_F17_swigconstant(_EE)
SDL_SCANCODE_F17 = _EE.SDL_SCANCODE_F17

_EE.SDL_SCANCODE_F18_swigconstant(_EE)
SDL_SCANCODE_F18 = _EE.SDL_SCANCODE_F18

_EE.SDL_SCANCODE_F19_swigconstant(_EE)
SDL_SCANCODE_F19 = _EE.SDL_SCANCODE_F19

_EE.SDL_SCANCODE_F20_swigconstant(_EE)
SDL_SCANCODE_F20 = _EE.SDL_SCANCODE_F20

_EE.SDL_SCANCODE_F21_swigconstant(_EE)
SDL_SCANCODE_F21 = _EE.SDL_SCANCODE_F21

_EE.SDL_SCANCODE_F22_swigconstant(_EE)
SDL_SCANCODE_F22 = _EE.SDL_SCANCODE_F22

_EE.SDL_SCANCODE_F23_swigconstant(_EE)
SDL_SCANCODE_F23 = _EE.SDL_SCANCODE_F23

_EE.SDL_SCANCODE_F24_swigconstant(_EE)
SDL_SCANCODE_F24 = _EE.SDL_SCANCODE_F24

_EE.SDL_SCANCODE_EXECUTE_swigconstant(_EE)
SDL_SCANCODE_EXECUTE = _EE.SDL_SCANCODE_EXECUTE

_EE.SDL_SCANCODE_HELP_swigconstant(_EE)
SDL_SCANCODE_HELP = _EE.SDL_SCANCODE_HELP

_EE.SDL_SCANCODE_MENU_swigconstant(_EE)
SDL_SCANCODE_MENU = _EE.SDL_SCANCODE_MENU

_EE.SDL_SCANCODE_SELECT_swigconstant(_EE)
SDL_SCANCODE_SELECT = _EE.SDL_SCANCODE_SELECT

_EE.SDL_SCANCODE_STOP_swigconstant(_EE)
SDL_SCANCODE_STOP = _EE.SDL_SCANCODE_STOP

_EE.SDL_SCANCODE_AGAIN_swigconstant(_EE)
SDL_SCANCODE_AGAIN = _EE.SDL_SCANCODE_AGAIN

_EE.SDL_SCANCODE_UNDO_swigconstant(_EE)
SDL_SCANCODE_UNDO = _EE.SDL_SCANCODE_UNDO

_EE.SDL_SCANCODE_CUT_swigconstant(_EE)
SDL_SCANCODE_CUT = _EE.SDL_SCANCODE_CUT

_EE.SDL_SCANCODE_COPY_swigconstant(_EE)
SDL_SCANCODE_COPY = _EE.SDL_SCANCODE_COPY

_EE.SDL_SCANCODE_PASTE_swigconstant(_EE)
SDL_SCANCODE_PASTE = _EE.SDL_SCANCODE_PASTE

_EE.SDL_SCANCODE_FIND_swigconstant(_EE)
SDL_SCANCODE_FIND = _EE.SDL_SCANCODE_FIND

_EE.SDL_SCANCODE_MUTE_swigconstant(_EE)
SDL_SCANCODE_MUTE = _EE.SDL_SCANCODE_MUTE

_EE.SDL_SCANCODE_VOLUMEUP_swigconstant(_EE)
SDL_SCANCODE_VOLUMEUP = _EE.SDL_SCANCODE_VOLUMEUP

_EE.SDL_SCANCODE_VOLUMEDOWN_swigconstant(_EE)
SDL_SCANCODE_VOLUMEDOWN = _EE.SDL_SCANCODE_VOLUMEDOWN

_EE.SDL_SCANCODE_KP_COMMA_swigconstant(_EE)
SDL_SCANCODE_KP_COMMA = _EE.SDL_SCANCODE_KP_COMMA

_EE.SDL_SCANCODE_KP_EQUALSAS400_swigconstant(_EE)
SDL_SCANCODE_KP_EQUALSAS400 = _EE.SDL_SCANCODE_KP_EQUALSAS400

_EE.SDL_SCANCODE_INTERNATIONAL1_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL1 = _EE.SDL_SCANCODE_INTERNATIONAL1

_EE.SDL_SCANCODE_INTERNATIONAL2_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL2 = _EE.SDL_SCANCODE_INTERNATIONAL2

_EE.SDL_SCANCODE_INTERNATIONAL3_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL3 = _EE.SDL_SCANCODE_INTERNATIONAL3

_EE.SDL_SCANCODE_INTERNATIONAL4_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL4 = _EE.SDL_SCANCODE_INTERNATIONAL4

_EE.SDL_SCANCODE_INTERNATIONAL5_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL5 = _EE.SDL_SCANCODE_INTERNATIONAL5

_EE.SDL_SCANCODE_INTERNATIONAL6_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL6 = _EE.SDL_SCANCODE_INTERNATIONAL6

_EE.SDL_SCANCODE_INTERNATIONAL7_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL7 = _EE.SDL_SCANCODE_INTERNATIONAL7

_EE.SDL_SCANCODE_INTERNATIONAL8_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL8 = _EE.SDL_SCANCODE_INTERNATIONAL8

_EE.SDL_SCANCODE_INTERNATIONAL9_swigconstant(_EE)
SDL_SCANCODE_INTERNATIONAL9 = _EE.SDL_SCANCODE_INTERNATIONAL9

_EE.SDL_SCANCODE_LANG1_swigconstant(_EE)
SDL_SCANCODE_LANG1 = _EE.SDL_SCANCODE_LANG1

_EE.SDL_SCANCODE_LANG2_swigconstant(_EE)
SDL_SCANCODE_LANG2 = _EE.SDL_SCANCODE_LANG2

_EE.SDL_SCANCODE_LANG3_swigconstant(_EE)
SDL_SCANCODE_LANG3 = _EE.SDL_SCANCODE_LANG3

_EE.SDL_SCANCODE_LANG4_swigconstant(_EE)
SDL_SCANCODE_LANG4 = _EE.SDL_SCANCODE_LANG4

_EE.SDL_SCANCODE_LANG5_swigconstant(_EE)
SDL_SCANCODE_LANG5 = _EE.SDL_SCANCODE_LANG5

_EE.SDL_SCANCODE_LANG6_swigconstant(_EE)
SDL_SCANCODE_LANG6 = _EE.SDL_SCANCODE_LANG6

_EE.SDL_SCANCODE_LANG7_swigconstant(_EE)
SDL_SCANCODE_LANG7 = _EE.SDL_SCANCODE_LANG7

_EE.SDL_SCANCODE_LANG8_swigconstant(_EE)
SDL_SCANCODE_LANG8 = _EE.SDL_SCANCODE_LANG8

_EE.SDL_SCANCODE_LANG9_swigconstant(_EE)
SDL_SCANCODE_LANG9 = _EE.SDL_SCANCODE_LANG9

_EE.SDL_SCANCODE_ALTERASE_swigconstant(_EE)
SDL_SCANCODE_ALTERASE = _EE.SDL_SCANCODE_ALTERASE

_EE.SDL_SCANCODE_SYSREQ_swigconstant(_EE)
SDL_SCANCODE_SYSREQ = _EE.SDL_SCANCODE_SYSREQ

_EE.SDL_SCANCODE_CANCEL_swigconstant(_EE)
SDL_SCANCODE_CANCEL = _EE.SDL_SCANCODE_CANCEL

_EE.SDL_SCANCODE_CLEAR_swigconstant(_EE)
SDL_SCANCODE_CLEAR = _EE.SDL_SCANCODE_CLEAR

_EE.SDL_SCANCODE_PRIOR_swigconstant(_EE)
SDL_SCANCODE_PRIOR = _EE.SDL_SCANCODE_PRIOR

_EE.SDL_SCANCODE_RETURN2_swigconstant(_EE)
SDL_SCANCODE_RETURN2 = _EE.SDL_SCANCODE_RETURN2

_EE.SDL_SCANCODE_SEPARATOR_swigconstant(_EE)
SDL_SCANCODE_SEPARATOR = _EE.SDL_SCANCODE_SEPARATOR

_EE.SDL_SCANCODE_OUT_swigconstant(_EE)
SDL_SCANCODE_OUT = _EE.SDL_SCANCODE_OUT

_EE.SDL_SCANCODE_OPER_swigconstant(_EE)
SDL_SCANCODE_OPER = _EE.SDL_SCANCODE_OPER

_EE.SDL_SCANCODE_CLEARAGAIN_swigconstant(_EE)
SDL_SCANCODE_CLEARAGAIN = _EE.SDL_SCANCODE_CLEARAGAIN

_EE.SDL_SCANCODE_CRSEL_swigconstant(_EE)
SDL_SCANCODE_CRSEL = _EE.SDL_SCANCODE_CRSEL

_EE.SDL_SCANCODE_EXSEL_swigconstant(_EE)
SDL_SCANCODE_EXSEL = _EE.SDL_SCANCODE_EXSEL

_EE.SDL_SCANCODE_KP_00_swigconstant(_EE)
SDL_SCANCODE_KP_00 = _EE.SDL_SCANCODE_KP_00

_EE.SDL_SCANCODE_KP_000_swigconstant(_EE)
SDL_SCANCODE_KP_000 = _EE.SDL_SCANCODE_KP_000

_EE.SDL_SCANCODE_THOUSANDSSEPARATOR_swigconstant(_EE)
SDL_SCANCODE_THOUSANDSSEPARATOR = _EE.SDL_SCANCODE_THOUSANDSSEPARATOR

_EE.SDL_SCANCODE_DECIMALSEPARATOR_swigconstant(_EE)
SDL_SCANCODE_DECIMALSEPARATOR = _EE.SDL_SCANCODE_DECIMALSEPARATOR

_EE.SDL_SCANCODE_CURRENCYUNIT_swigconstant(_EE)
SDL_SCANCODE_CURRENCYUNIT = _EE.SDL_SCANCODE_CURRENCYUNIT

_EE.SDL_SCANCODE_CURRENCYSUBUNIT_swigconstant(_EE)
SDL_SCANCODE_CURRENCYSUBUNIT = _EE.SDL_SCANCODE_CURRENCYSUBUNIT

_EE.SDL_SCANCODE_KP_LEFTPAREN_swigconstant(_EE)
SDL_SCANCODE_KP_LEFTPAREN = _EE.SDL_SCANCODE_KP_LEFTPAREN

_EE.SDL_SCANCODE_KP_RIGHTPAREN_swigconstant(_EE)
SDL_SCANCODE_KP_RIGHTPAREN = _EE.SDL_SCANCODE_KP_RIGHTPAREN

_EE.SDL_SCANCODE_KP_LEFTBRACE_swigconstant(_EE)
SDL_SCANCODE_KP_LEFTBRACE = _EE.SDL_SCANCODE_KP_LEFTBRACE

_EE.SDL_SCANCODE_KP_RIGHTBRACE_swigconstant(_EE)
SDL_SCANCODE_KP_RIGHTBRACE = _EE.SDL_SCANCODE_KP_RIGHTBRACE

_EE.SDL_SCANCODE_KP_TAB_swigconstant(_EE)
SDL_SCANCODE_KP_TAB = _EE.SDL_SCANCODE_KP_TAB

_EE.SDL_SCANCODE_KP_BACKSPACE_swigconstant(_EE)
SDL_SCANCODE_KP_BACKSPACE = _EE.SDL_SCANCODE_KP_BACKSPACE

_EE.SDL_SCANCODE_KP_A_swigconstant(_EE)
SDL_SCANCODE_KP_A = _EE.SDL_SCANCODE_KP_A

_EE.SDL_SCANCODE_KP_B_swigconstant(_EE)
SDL_SCANCODE_KP_B = _EE.SDL_SCANCODE_KP_B

_EE.SDL_SCANCODE_KP_C_swigconstant(_EE)
SDL_SCANCODE_KP_C = _EE.SDL_SCANCODE_KP_C

_EE.SDL_SCANCODE_KP_D_swigconstant(_EE)
SDL_SCANCODE_KP_D = _EE.SDL_SCANCODE_KP_D

_EE.SDL_SCANCODE_KP_E_swigconstant(_EE)
SDL_SCANCODE_KP_E = _EE.SDL_SCANCODE_KP_E

_EE.SDL_SCANCODE_KP_F_swigconstant(_EE)
SDL_SCANCODE_KP_F = _EE.SDL_SCANCODE_KP_F

_EE.SDL_SCANCODE_KP_XOR_swigconstant(_EE)
SDL_SCANCODE_KP_XOR = _EE.SDL_SCANCODE_KP_XOR

_EE.SDL_SCANCODE_KP_POWER_swigconstant(_EE)
SDL_SCANCODE_KP_POWER = _EE.SDL_SCANCODE_KP_POWER

_EE.SDL_SCANCODE_KP_PERCENT_swigconstant(_EE)
SDL_SCANCODE_KP_PERCENT = _EE.SDL_SCANCODE_KP_PERCENT

_EE.SDL_SCANCODE_KP_LESS_swigconstant(_EE)
SDL_SCANCODE_KP_LESS = _EE.SDL_SCANCODE_KP_LESS

_EE.SDL_SCANCODE_KP_GREATER_swigconstant(_EE)
SDL_SCANCODE_KP_GREATER = _EE.SDL_SCANCODE_KP_GREATER

_EE.SDL_SCANCODE_KP_AMPERSAND_swigconstant(_EE)
SDL_SCANCODE_KP_AMPERSAND = _EE.SDL_SCANCODE_KP_AMPERSAND

_EE.SDL_SCANCODE_KP_DBLAMPERSAND_swigconstant(_EE)
SDL_SCANCODE_KP_DBLAMPERSAND = _EE.SDL_SCANCODE_KP_DBLAMPERSAND

_EE.SDL_SCANCODE_KP_VERTICALBAR_swigconstant(_EE)
SDL_SCANCODE_KP_VERTICALBAR = _EE.SDL_SCANCODE_KP_VERTICALBAR

_EE.SDL_SCANCODE_KP_DBLVERTICALBAR_swigconstant(_EE)
SDL_SCANCODE_KP_DBLVERTICALBAR = _EE.SDL_SCANCODE_KP_DBLVERTICALBAR

_EE.SDL_SCANCODE_KP_COLON_swigconstant(_EE)
SDL_SCANCODE_KP_COLON = _EE.SDL_SCANCODE_KP_COLON

_EE.SDL_SCANCODE_KP_HASH_swigconstant(_EE)
SDL_SCANCODE_KP_HASH = _EE.SDL_SCANCODE_KP_HASH

_EE.SDL_SCANCODE_KP_SPACE_swigconstant(_EE)
SDL_SCANCODE_KP_SPACE = _EE.SDL_SCANCODE_KP_SPACE

_EE.SDL_SCANCODE_KP_AT_swigconstant(_EE)
SDL_SCANCODE_KP_AT = _EE.SDL_SCANCODE_KP_AT

_EE.SDL_SCANCODE_KP_EXCLAM_swigconstant(_EE)
SDL_SCANCODE_KP_EXCLAM = _EE.SDL_SCANCODE_KP_EXCLAM

_EE.SDL_SCANCODE_KP_MEMSTORE_swigconstant(_EE)
SDL_SCANCODE_KP_MEMSTORE = _EE.SDL_SCANCODE_KP_MEMSTORE

_EE.SDL_SCANCODE_KP_MEMRECALL_swigconstant(_EE)
SDL_SCANCODE_KP_MEMRECALL = _EE.SDL_SCANCODE_KP_MEMRECALL

_EE.SDL_SCANCODE_KP_MEMCLEAR_swigconstant(_EE)
SDL_SCANCODE_KP_MEMCLEAR = _EE.SDL_SCANCODE_KP_MEMCLEAR

_EE.SDL_SCANCODE_KP_MEMADD_swigconstant(_EE)
SDL_SCANCODE_KP_MEMADD = _EE.SDL_SCANCODE_KP_MEMADD

_EE.SDL_SCANCODE_KP_MEMSUBTRACT_swigconstant(_EE)
SDL_SCANCODE_KP_MEMSUBTRACT = _EE.SDL_SCANCODE_KP_MEMSUBTRACT

_EE.SDL_SCANCODE_KP_MEMMULTIPLY_swigconstant(_EE)
SDL_SCANCODE_KP_MEMMULTIPLY = _EE.SDL_SCANCODE_KP_MEMMULTIPLY

_EE.SDL_SCANCODE_KP_MEMDIVIDE_swigconstant(_EE)
SDL_SCANCODE_KP_MEMDIVIDE = _EE.SDL_SCANCODE_KP_MEMDIVIDE

_EE.SDL_SCANCODE_KP_PLUSMINUS_swigconstant(_EE)
SDL_SCANCODE_KP_PLUSMINUS = _EE.SDL_SCANCODE_KP_PLUSMINUS

_EE.SDL_SCANCODE_KP_CLEAR_swigconstant(_EE)
SDL_SCANCODE_KP_CLEAR = _EE.SDL_SCANCODE_KP_CLEAR

_EE.SDL_SCANCODE_KP_CLEARENTRY_swigconstant(_EE)
SDL_SCANCODE_KP_CLEARENTRY = _EE.SDL_SCANCODE_KP_CLEARENTRY

_EE.SDL_SCANCODE_KP_BINARY_swigconstant(_EE)
SDL_SCANCODE_KP_BINARY = _EE.SDL_SCANCODE_KP_BINARY

_EE.SDL_SCANCODE_KP_OCTAL_swigconstant(_EE)
SDL_SCANCODE_KP_OCTAL = _EE.SDL_SCANCODE_KP_OCTAL

_EE.SDL_SCANCODE_KP_DECIMAL_swigconstant(_EE)
SDL_SCANCODE_KP_DECIMAL = _EE.SDL_SCANCODE_KP_DECIMAL

_EE.SDL_SCANCODE_KP_HEXADECIMAL_swigconstant(_EE)
SDL_SCANCODE_KP_HEXADECIMAL = _EE.SDL_SCANCODE_KP_HEXADECIMAL

_EE.SDL_SCANCODE_LCTRL_swigconstant(_EE)
SDL_SCANCODE_LCTRL = _EE.SDL_SCANCODE_LCTRL

_EE.SDL_SCANCODE_LSHIFT_swigconstant(_EE)
SDL_SCANCODE_LSHIFT = _EE.SDL_SCANCODE_LSHIFT

_EE.SDL_SCANCODE_LALT_swigconstant(_EE)
SDL_SCANCODE_LALT = _EE.SDL_SCANCODE_LALT

_EE.SDL_SCANCODE_LGUI_swigconstant(_EE)
SDL_SCANCODE_LGUI = _EE.SDL_SCANCODE_LGUI

_EE.SDL_SCANCODE_RCTRL_swigconstant(_EE)
SDL_SCANCODE_RCTRL = _EE.SDL_SCANCODE_RCTRL

_EE.SDL_SCANCODE_RSHIFT_swigconstant(_EE)
SDL_SCANCODE_RSHIFT = _EE.SDL_SCANCODE_RSHIFT

_EE.SDL_SCANCODE_RALT_swigconstant(_EE)
SDL_SCANCODE_RALT = _EE.SDL_SCANCODE_RALT

_EE.SDL_SCANCODE_RGUI_swigconstant(_EE)
SDL_SCANCODE_RGUI = _EE.SDL_SCANCODE_RGUI

_EE.SDL_SCANCODE_MODE_swigconstant(_EE)
SDL_SCANCODE_MODE = _EE.SDL_SCANCODE_MODE

_EE.SDL_SCANCODE_AUDIONEXT_swigconstant(_EE)
SDL_SCANCODE_AUDIONEXT = _EE.SDL_SCANCODE_AUDIONEXT

_EE.SDL_SCANCODE_AUDIOPREV_swigconstant(_EE)
SDL_SCANCODE_AUDIOPREV = _EE.SDL_SCANCODE_AUDIOPREV

_EE.SDL_SCANCODE_AUDIOSTOP_swigconstant(_EE)
SDL_SCANCODE_AUDIOSTOP = _EE.SDL_SCANCODE_AUDIOSTOP

_EE.SDL_SCANCODE_AUDIOPLAY_swigconstant(_EE)
SDL_SCANCODE_AUDIOPLAY = _EE.SDL_SCANCODE_AUDIOPLAY

_EE.SDL_SCANCODE_AUDIOMUTE_swigconstant(_EE)
SDL_SCANCODE_AUDIOMUTE = _EE.SDL_SCANCODE_AUDIOMUTE

_EE.SDL_SCANCODE_MEDIASELECT_swigconstant(_EE)
SDL_SCANCODE_MEDIASELECT = _EE.SDL_SCANCODE_MEDIASELECT

_EE.SDL_SCANCODE_WWW_swigconstant(_EE)
SDL_SCANCODE_WWW = _EE.SDL_SCANCODE_WWW

_EE.SDL_SCANCODE_MAIL_swigconstant(_EE)
SDL_SCANCODE_MAIL = _EE.SDL_SCANCODE_MAIL

_EE.SDL_SCANCODE_CALCULATOR_swigconstant(_EE)
SDL_SCANCODE_CALCULATOR = _EE.SDL_SCANCODE_CALCULATOR

_EE.SDL_SCANCODE_COMPUTER_swigconstant(_EE)
SDL_SCANCODE_COMPUTER = _EE.SDL_SCANCODE_COMPUTER

_EE.SDL_SCANCODE_AC_SEARCH_swigconstant(_EE)
SDL_SCANCODE_AC_SEARCH = _EE.SDL_SCANCODE_AC_SEARCH

_EE.SDL_SCANCODE_AC_HOME_swigconstant(_EE)
SDL_SCANCODE_AC_HOME = _EE.SDL_SCANCODE_AC_HOME

_EE.SDL_SCANCODE_AC_BACK_swigconstant(_EE)
SDL_SCANCODE_AC_BACK = _EE.SDL_SCANCODE_AC_BACK

_EE.SDL_SCANCODE_AC_FORWARD_swigconstant(_EE)
SDL_SCANCODE_AC_FORWARD = _EE.SDL_SCANCODE_AC_FORWARD

_EE.SDL_SCANCODE_AC_STOP_swigconstant(_EE)
SDL_SCANCODE_AC_STOP = _EE.SDL_SCANCODE_AC_STOP

_EE.SDL_SCANCODE_AC_REFRESH_swigconstant(_EE)
SDL_SCANCODE_AC_REFRESH = _EE.SDL_SCANCODE_AC_REFRESH

_EE.SDL_SCANCODE_AC_BOOKMARKS_swigconstant(_EE)
SDL_SCANCODE_AC_BOOKMARKS = _EE.SDL_SCANCODE_AC_BOOKMARKS

_EE.SDL_SCANCODE_BRIGHTNESSDOWN_swigconstant(_EE)
SDL_SCANCODE_BRIGHTNESSDOWN = _EE.SDL_SCANCODE_BRIGHTNESSDOWN

_EE.SDL_SCANCODE_BRIGHTNESSUP_swigconstant(_EE)
SDL_SCANCODE_BRIGHTNESSUP = _EE.SDL_SCANCODE_BRIGHTNESSUP

_EE.SDL_SCANCODE_DISPLAYSWITCH_swigconstant(_EE)
SDL_SCANCODE_DISPLAYSWITCH = _EE.SDL_SCANCODE_DISPLAYSWITCH

_EE.SDL_SCANCODE_KBDILLUMTOGGLE_swigconstant(_EE)
SDL_SCANCODE_KBDILLUMTOGGLE = _EE.SDL_SCANCODE_KBDILLUMTOGGLE

_EE.SDL_SCANCODE_KBDILLUMDOWN_swigconstant(_EE)
SDL_SCANCODE_KBDILLUMDOWN = _EE.SDL_SCANCODE_KBDILLUMDOWN

_EE.SDL_SCANCODE_KBDILLUMUP_swigconstant(_EE)
SDL_SCANCODE_KBDILLUMUP = _EE.SDL_SCANCODE_KBDILLUMUP

_EE.SDL_SCANCODE_EJECT_swigconstant(_EE)
SDL_SCANCODE_EJECT = _EE.SDL_SCANCODE_EJECT

_EE.SDL_SCANCODE_SLEEP_swigconstant(_EE)
SDL_SCANCODE_SLEEP = _EE.SDL_SCANCODE_SLEEP

_EE.SDL_SCANCODE_APP1_swigconstant(_EE)
SDL_SCANCODE_APP1 = _EE.SDL_SCANCODE_APP1

_EE.SDL_SCANCODE_APP2_swigconstant(_EE)
SDL_SCANCODE_APP2 = _EE.SDL_SCANCODE_APP2

_EE.SDL_NUM_SCANCODES_swigconstant(_EE)
SDL_NUM_SCANCODES = _EE.SDL_NUM_SCANCODES

def hasher():
    return _EE.hasher()
hasher = _EE.hasher

def randUniform(*args):
    return _EE.randUniform(*args)
randUniform = _EE.randUniform

def randBinomial(*args):
    return _EE.randBinomial(*args)
randBinomial = _EE.randBinomial

def randNormal(*args):
    return _EE.randNormal(*args)
randNormal = _EE.randNormal

def GetMaxValueSizeT():
    return _EE.GetMaxValueSizeT()
GetMaxValueSizeT = _EE.GetMaxValueSizeT

def printHello():
    return _EE.printHello()
printHello = _EE.printHello

_EE.CREATETABLE_swigconstant(_EE)
CREATETABLE = _EE.CREATETABLE

_EE.SELECT_swigconstant(_EE)
SELECT = _EE.SELECT

_EE.INSERT_swigconstant(_EE)
INSERT = _EE.INSERT

_EE.DELETE_swigconstant(_EE)
DELETE = _EE.DELETE

_EE.WHERE_swigconstant(_EE)
WHERE = _EE.WHERE

_EE.AS_swigconstant(_EE)
AS = _EE.AS

_EE.CALL_swigconstant(_EE)
CALL = _EE.CALL

_EE.FROM_swigconstant(_EE)
FROM = _EE.FROM

_EE.TO_swigconstant(_EE)
TO = _EE.TO

_EE.UPDATE_swigconstant(_EE)
UPDATE = _EE.UPDATE

_EE.AND_swigconstant(_EE)
AND = _EE.AND

_EE.OR_swigconstant(_EE)
OR = _EE.OR

_EE.LIKE_swigconstant(_EE)
LIKE = _EE.LIKE

_EE.CREATEDATABASE_swigconstant(_EE)
CREATEDATABASE = _EE.CREATEDATABASE

_EE.INTO_swigconstant(_EE)
INTO = _EE.INTO

_EE.IN_swigconstant(_EE)
IN = _EE.IN

_EE.ALL_swigconstant(_EE)
ALL = _EE.ALL

_EE.AOR_swigconstant(_EE)
AOR = _EE.AOR

_EE.ORDERBY_swigconstant(_EE)
ORDERBY = _EE.ORDERBY

_EE.VALUES_swigconstant(_EE)
VALUES = _EE.VALUES

_EE.SET_swigconstant(_EE)
SET = _EE.SET

_EE.AS_TABLE_swigconstant(_EE)
AS_TABLE = _EE.AS_TABLE

_EE.INNER_JOIN_swigconstant(_EE)
INNER_JOIN = _EE.INNER_JOIN

_EE.ON_swigconstant(_EE)
ON = _EE.ON

_EE.JOIN_swigconstant(_EE)
JOIN = _EE.JOIN

_EE.LEFT_JOIN_swigconstant(_EE)
LEFT_JOIN = _EE.LEFT_JOIN

_EE.LEFT_OUTER_JOIN_swigconstant(_EE)
LEFT_OUTER_JOIN = _EE.LEFT_OUTER_JOIN

_EE.BETWEEN_swigconstant(_EE)
BETWEEN = _EE.BETWEEN

_EE.RIGHT_JOIN_swigconstant(_EE)
RIGHT_JOIN = _EE.RIGHT_JOIN

_EE.RIGHT_OUTER_JOIN_swigconstant(_EE)
RIGHT_OUTER_JOIN = _EE.RIGHT_OUTER_JOIN

_EE.FULL_JOIN_swigconstant(_EE)
FULL_JOIN = _EE.FULL_JOIN

_EE.FULL_OUTER_JOIN_swigconstant(_EE)
FULL_OUTER_JOIN = _EE.FULL_OUTER_JOIN

_EE.INTO_SELECT_swigconstant(_EE)
INTO_SELECT = _EE.INTO_SELECT

_EE.UNION_swigconstant(_EE)
UNION = _EE.UNION
class SQLQuery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SQLQuery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SQLQuery, name)
    __repr__ = _swig_repr
    __swig_getmethods__["WILDCARD"] = _EE.SQLQuery_WILDCARD_get
    if _newclass:
        WILDCARD = _swig_property(_EE.SQLQuery_WILDCARD_get)

    def prepareStatement(self, *args):
        return _EE.SQLQuery_prepareStatement(self, *args)

    def __init__(self):
        this = _EE.new_SQLQuery()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_SQLQuery
    __del__ = lambda self: None
SQLQuery_swigregister = _EE.SQLQuery_swigregister
SQLQuery_swigregister(SQLQuery)
cvar = _EE.cvar

class Physics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Physics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Physics, name)
    __repr__ = _swig_repr

    def NewtonianForce(self, *args):
        return _EE.Physics_NewtonianForce(self, *args)

    def Relativity(self, *args):
        return _EE.Physics_Relativity(self, *args)

    def rel_NewtonianForce(self, *args):
        return _EE.Physics_rel_NewtonianForce(self, *args)

    def rel_CalculateForceB(self, relativity):
        return _EE.Physics_rel_CalculateForceB(self, relativity)

    def Impulse(self, inputVector):
        return _EE.Physics_Impulse(self, inputVector)

    def Friction(self, targetMU, relativity):
        return _EE.Physics_Friction(self, targetMU, relativity)

    def Update_Velocity(self, secondsPassed):
        return _EE.Physics_Update_Velocity(self, secondsPassed)

    def UpdateForce(self, *args):
        return _EE.Physics_UpdateForce(self, *args)

    def Update_Acceleration(self):
        return _EE.Physics_Update_Acceleration(self)

    def math_CalculateDirectionDegrees(self, sourceX, sourceY):
        return _EE.Physics_math_CalculateDirectionDegrees(self, sourceX, sourceY)

    def GetDistance(self, source):
        return _EE.Physics_GetDistance(self, source)

    def GetLoc(self):
        return _EE.Physics_GetLoc(self)

    def GetMU(self):
        return _EE.Physics_GetMU(self)

    def GetMass(self):
        return _EE.Physics_GetMass(self)

    def GetB2DDirection(self):
        return _EE.Physics_GetB2DDirection(self)

    def GetBMagnitude(self):
        return _EE.Physics_GetBMagnitude(self)

    def GetGravity(self):
        return _EE.Physics_GetGravity(self)

    def GetVelocity(self, axis):
        return _EE.Physics_GetVelocity(self, axis)

    def GetElasticity(self):
        return _EE.Physics_GetElasticity(self)

    def math_CalculateForceFromChargedParticles(self, Q2, source):
        return _EE.Physics_math_CalculateForceFromChargedParticles(self, Q2, source)

    def math_CalculateEField(self, *args):
        return _EE.Physics_math_CalculateEField(self, *args)

    def math_Sign(self, *args):
        return _EE.Physics_math_Sign(self, *args)

    def math_CalculateMomentum(self, actor, target):
        return _EE.Physics_math_CalculateMomentum(self, actor, target)

    def math_CalculateForceFromMagneticField(self, MagneticField, magnitude):
        return _EE.Physics_math_CalculateForceFromMagneticField(self, MagneticField, magnitude)

    def GetForceCount(self, axis):
        return _EE.Physics_GetForceCount(self, axis)

    def isUnmovable(self):
        return _EE.Physics_isUnmovable(self)

    def SetForceCount(self, *args):
        return _EE.Physics_SetForceCount(self, *args)

    def SetLoc(self, pos):
        return _EE.Physics_SetLoc(self, pos)

    def SetVelocity(self, velocity, axis):
        return _EE.Physics_SetVelocity(self, velocity, axis)

    def AddForce(self, *args):
        return _EE.Physics_AddForce(self, *args)

    def __init__(self, *args):
        this = _EE.new_Physics(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def Update_Position(self, secondsPassed):
        return _EE.Physics_Update_Position(self, secondsPassed)

    def ChangePlanetGravitationalConstant(self, g):
        return _EE.Physics_ChangePlanetGravitationalConstant(self, g)

    def Load_Physics(self, physData):
        return _EE.Physics_Load_Physics(self, physData)

    def GetCharge(self):
        return _EE.Physics_GetCharge(self)
    __swig_destroy__ = _EE.delete_Physics
    __del__ = lambda self: None
Physics_swigregister = _EE.Physics_swigregister
Physics_swigregister(Physics)


def CalculateDistance(A, B):
    return _EE.CalculateDistance(A, B)
CalculateDistance = _EE.CalculateDistance

_EE.ENDOFFILE_swigconstant(_EE)
ENDOFFILE = _EE.ENDOFFILE
class data_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data_base, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EE.new_data_base(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def GetStrBuffer(self):
        return _EE.data_base_GetStrBuffer(self)

    def GetValueFromData(self, search):
        return _EE.data_base_GetValueFromData(self, search)

    def GetStrFromData(self, search):
        return _EE.data_base_GetStrFromData(self, search)

    def GetIntFromData(self, search):
        return _EE.data_base_GetIntFromData(self, search)

    def GetValueFromDataWithLine(self, search, lineIndex):
        return _EE.data_base_GetValueFromDataWithLine(self, search, lineIndex)

    def GetStrFromDataWithLine(self, search, lineIndex):
        return _EE.data_base_GetStrFromDataWithLine(self, search, lineIndex)

    def GetStateOfInternalBuffer(self):
        return _EE.data_base_GetStateOfInternalBuffer(self)

    def OpenFileAndGetBinBuffer(self, location):
        return _EE.data_base_OpenFileAndGetBinBuffer(self, location)

    def OpenFile(self, location, readMode=True):
        return _EE.data_base_OpenFile(self, location, readMode)

    def OpenFileForQuickWrite(self, location):
        return _EE.data_base_OpenFileForQuickWrite(self, location)

    def OpenBinFileForQuickWrite(self, location):
        return _EE.data_base_OpenBinFileForQuickWrite(self, location)

    def CloseFile(self, *args):
        return _EE.data_base_CloseFile(self, *args)

    def GetMode(self):
        return _EE.data_base_GetMode(self)

    def WriteValue(self, *args):
        return _EE.data_base_WriteValue(self, *args)

    def WriteValueWithLineIndex(self, value, search, lineIndex):
        return _EE.data_base_WriteValueWithLineIndex(self, value, search, lineIndex)

    def WriteValueAndFlush(self, value):
        return _EE.data_base_WriteValueAndFlush(self, value)

    def GetLineCount(self):
        return _EE.data_base_GetLineCount(self)

    def GetNumInstances(self, search):
        return _EE.data_base_GetNumInstances(self, search)

    def GetLastOutput(self):
        return _EE.data_base_GetLastOutput(self)

    def isOutputOpen(self):
        return _EE.data_base_isOutputOpen(self)

    def SearchTermExists(self, search):
        return _EE.data_base_SearchTermExists(self, search)

    def RestoreFileContents(self):
        return _EE.data_base_RestoreFileContents(self)

    def RefreshFile(self):
        return _EE.data_base_RefreshFile(self)

    def CreateNewFile(self, *args):
        return _EE.data_base_CreateNewFile(self, *args)

    def CreateNewFile_static(self, location):
        return _EE.data_base_CreateNewFile_static(self, location)
    __swig_destroy__ = _EE.delete_data_base
    __del__ = lambda self: None
    __swig_setmethods__["BUFFER"] = _EE.data_base_BUFFER_set
    __swig_getmethods__["BUFFER"] = _EE.data_base_BUFFER_get
    if _newclass:
        BUFFER = _swig_property(_EE.data_base_BUFFER_get, _EE.data_base_BUFFER_set)
data_base_swigregister = _EE.data_base_swigregister
data_base_swigregister(data_base)


def copyfile(source, destination, binary=True):
    return _EE.copyfile(source, destination, binary)
copyfile = _EE.copyfile

def get_bin_buffer(file, s):
    return _EE.get_bin_buffer(file, s)
get_bin_buffer = _EE.get_bin_buffer
class draw_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, draw_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, draw_base, name)
    __repr__ = _swig_repr

    def Load_Texture(self, source, ren, fps=30):
        return _EE.draw_base_Load_Texture(self, source, ren, fps)

    def apply_surface(self, x, y, destination):
        return _EE.draw_base_apply_surface(self, x, y, destination)

    def GetHeightOfMainRect(self):
        return _EE.draw_base_GetHeightOfMainRect(self)

    def GetWidthOfMainRect(self):
        return _EE.draw_base_GetWidthOfMainRect(self)

    def GetAnimCounter(self):
        return _EE.draw_base_GetAnimCounter(self)

    def isNoLoop(self):
        return _EE.draw_base_isNoLoop(self)

    def GetTexture(self):
        return _EE.draw_base_GetTexture(self)

    def GetTextureNode(self):
        return _EE.draw_base_GetTextureNode(self)

    def setColor(self, red, green, blue):
        return _EE.draw_base_setColor(self, red, green, blue)

    def setBlendMode(self, blending):
        return _EE.draw_base_setBlendMode(self, blending)

    def setAlpha(self, alpha):
        return _EE.draw_base_setAlpha(self, alpha)

    def setRotationPivot(self, p):
        return _EE.draw_base_setRotationPivot(self, p)

    def flip(self, direction=NOFLIP):
        return _EE.draw_base_flip(self, direction)

    def rotate(self, degrees):
        return _EE.draw_base_rotate(self, degrees)

    def copy(self, obj, realloc_texture=False, ren=None):
        return _EE.draw_base_copy(self, obj, realloc_texture, ren)

    def resetRotation(self):
        return _EE.draw_base_resetRotation(self)

    def ClearTexture(self):
        return _EE.draw_base_ClearTexture(self)

    def SetTextureFromPointer(self, ptr):
        return _EE.draw_base_SetTextureFromPointer(self, ptr)

    def SetTextureFromRef(self, tex):
        return _EE.draw_base_SetTextureFromRef(self, tex)

    def __init__(self):
        this = _EE.new_draw_base()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_draw_base
    __del__ = lambda self: None
    __swig_setmethods__["textures"] = _EE.draw_base_textures_set
    __swig_getmethods__["textures"] = _EE.draw_base_textures_get
    if _newclass:
        textures = _swig_property(_EE.draw_base_textures_get, _EE.draw_base_textures_set)
draw_base_swigregister = _EE.draw_base_swigregister
draw_base_swigregister(draw_base)


def apply_surface(x, y, destination, SpriteSheet, height=40, width=40):
    return _EE.apply_surface(x, y, destination, SpriteSheet, height, width)
apply_surface = _EE.apply_surface

def LoadTexture(file, ren):
    return _EE.LoadTexture(file, ren)
LoadTexture = _EE.LoadTexture
class UI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UI, name)
    __repr__ = _swig_repr

    def __init__(self, file, ren):
        this = _EE.new_UI(file, ren)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_UI
    __del__ = lambda self: None

    def isVisible(self):
        return _EE.UI_isVisible(self)

    def isInside(self, x, y):
        return _EE.UI_isInside(self, x, y)

    def toggleVisibility(self):
        return _EE.UI_toggleVisibility(self)

    def GetName(self):
        return _EE.UI_GetName(self)

    def GetID(self):
        return _EE.UI_GetID(self)

    def GetButtonByLoc(self, x, y):
        return _EE.UI_GetButtonByLoc(self, x, y)

    def GetTextboxByLoc(self, x, y):
        return _EE.UI_GetTextboxByLoc(self, x, y)

    def GetRenderer(self):
        return _EE.UI_GetRenderer(self)

    def SetID(self, id):
        return _EE.UI_SetID(self, id)

    def Update(self):
        return _EE.UI_Update(self)

    def ProcessEvents(self, x, y):
        return _EE.UI_ProcessEvents(self, x, y)

    def AddNumToPBar(self, num, name):
        return _EE.UI_AddNumToPBar(self, num, name)

    def Draw(self):
        return _EE.UI_Draw(self)
UI_swigregister = _EE.UI_swigregister
UI_swigregister(UI)


def LoadScript(script, file):
    return _EE.LoadScript(script, file)
LoadScript = _EE.LoadScript
class Unit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Unit, name)
    __repr__ = _swig_repr

    def __init__(self, BlitOrder, path, loc, screen, t_id, hero=False, hasPBar=False):
        this = _EE.new_Unit(BlitOrder, path, loc, screen, t_id, hero, hasPBar)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Unit
    __del__ = lambda self: None

    def isMelee(self):
        return _EE.Unit_isMelee(self)

    def isNPC(self):
        return _EE.Unit_isNPC(self)

    def MoveAI(self):
        return _EE.Unit_MoveAI(self)

    def LoadAI(self, file):
        return _EE.Unit_LoadAI(self, file)

    def AttackAI(self, target):
        return _EE.Unit_AttackAI(self, target)

    def ExecuteAI(self, *args):
        return _EE.Unit_ExecuteAI(self, *args)

    def MoveTowardsAI(self, *args):
        return _EE.Unit_MoveTowardsAI(self, *args)

    def SetTimer(self, timer_id):
        return _EE.Unit_SetTimer(self, timer_id)

    def Update_NewTime(self):
        return _EE.Unit_Update_NewTime(self)

    def Update_OldTime(self):
        return _EE.Unit_Update_OldTime(self)

    def GetTimeChange(self):
        return _EE.Unit_GetTimeChange(self)

    def GetName(self):
        return _EE.Unit_GetName(self)

    def GetPhysics(self):
        return _EE.Unit_GetPhysics(self)

    def GetDefaultDrawObject(self):
        return _EE.Unit_GetDefaultDrawObject(self)

    def ToggleMelee(self):
        return _EE.Unit_ToggleMelee(self)

    def GetHP(self):
        return _EE.Unit_GetHP(self)

    def GetMana(self):
        return _EE.Unit_GetMana(self)

    def GetAD(self):
        return _EE.Unit_GetAD(self)

    def GetAP(self):
        return _EE.Unit_GetAP(self)

    def GetAttackSpeed(self):
        return _EE.Unit_GetAttackSpeed(self)

    def GetRange(self):
        return _EE.Unit_GetRange(self)

    def GetVisionRange(self):
        return _EE.Unit_GetVisionRange(self)

    def GetID(self):
        return _EE.Unit_GetID(self)

    def GetMovementSpeed(self):
        return _EE.Unit_GetMovementSpeed(self)

    def GetType(self):
        return _EE.Unit_GetType(self)

    def GetBlitOrder(self):
        return _EE.Unit_GetBlitOrder(self)

    def SetHP(self, val):
        return _EE.Unit_SetHP(self, val)

    def SetMana(self, val):
        return _EE.Unit_SetMana(self, val)

    def SetAD(self, val):
        return _EE.Unit_SetAD(self, val)

    def SetAP(self, val):
        return _EE.Unit_SetAP(self, val)

    def SetAttackSpeed(self, val):
        return _EE.Unit_SetAttackSpeed(self, val)

    def SetRange(self, val):
        return _EE.Unit_SetRange(self, val)

    def SetVisionRange(self, val):
        return _EE.Unit_SetVisionRange(self, val)

    def SetMovementSpeed(self, val):
        return _EE.Unit_SetMovementSpeed(self, val)

    def SetID(self, id):
        return _EE.Unit_SetID(self, id)

    def SetOwner(self, game):
        return _EE.Unit_SetOwner(self, game)

    def GetDeath(self):
        return _EE.Unit_GetDeath(self)

    def ToggleDeath(self):
        return _EE.Unit_ToggleDeath(self)

    def SetCurrentAnimation(self, name):
        return _EE.Unit_SetCurrentAnimation(self, name)

    def SetCurrentSound(self, name):
        return _EE.Unit_SetCurrentSound(self, name)

    def copy(self, obj):
        return _EE.Unit_copy(self, obj)

    def PlaySounds(self, screenLoc):
        return _EE.Unit_PlaySounds(self, screenLoc)

    def DrawImages(self):
        return _EE.Unit_DrawImages(self)

    def RotateSprite(self, sprite, degrees):
        return _EE.Unit_RotateSprite(self, sprite, degrees)

    def FlipSprite(self, sprite, direction=NOFLIP):
        return _EE.Unit_FlipSprite(self, sprite, direction)

    def ResetRotation(self, sprite):
        return _EE.Unit_ResetRotation(self, sprite)

    def AddBuff(self, buffName):
        return _EE.Unit_AddBuff(self, buffName)

    def RemoveBuff(self, buffName):
        return _EE.Unit_RemoveBuff(self, buffName)

    def BuffExists(self, buffName):
        return _EE.Unit_BuffExists(self, buffName)

    def ApplyBuffs(self):
        return _EE.Unit_ApplyBuffs(self)

    def isColliding(self, target):
        return _EE.Unit_isColliding(self, target)

    def Update_Physics(self, target):
        return _EE.Unit_Update_Physics(self, target)

    def OnCollision(self, target, side):
        return _EE.Unit_OnCollision(self, target, side)
    __swig_setmethods__["ai"] = _EE.Unit_ai_set
    __swig_getmethods__["ai"] = _EE.Unit_ai_get
    if _newclass:
        ai = _swig_property(_EE.Unit_ai_get, _EE.Unit_ai_set)
Unit_swigregister = _EE.Unit_swigregister
Unit_swigregister(Unit)

class Trigger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trigger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trigger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EE.new_Trigger(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Trigger
    __del__ = lambda self: None

    def GetID(self):
        return _EE.Trigger_GetID(self)

    def SetID(self, id):
        return _EE.Trigger_SetID(self, id)

    def GetDeath(self):
        return _EE.Trigger_GetDeath(self)

    def GetLoc(self):
        return _EE.Trigger_GetLoc(self)

    def ToggleDeath(self):
        return _EE.Trigger_ToggleDeath(self)

    def isUnitOnTrigger(self, target):
        return _EE.Trigger_isUnitOnTrigger(self, target)

    def ConsumeTrigger(self, owner, target):
        return _EE.Trigger_ConsumeTrigger(self, owner, target)

    def UpdateTriggerLoc(self, X, Y, Z=0):
        return _EE.Trigger_UpdateTriggerLoc(self, X, Y, Z)
Trigger_swigregister = _EE.Trigger_swigregister
Trigger_swigregister(Trigger)

class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EE.new_Timer()
        try:
            self.this.append(this)
        except:
            self.this = this

    def start(self):
        return _EE.Timer_start(self)

    def stop(self):
        return _EE.Timer_stop(self)

    def pause(self):
        return _EE.Timer_pause(self)

    def unpause(self):
        return _EE.Timer_unpause(self)

    def get_ticks(self):
        return _EE.Timer_get_ticks(self)

    def is_started(self):
        return _EE.Timer_is_started(self)

    def is_paused(self):
        return _EE.Timer_is_paused(self)
    __swig_destroy__ = _EE.delete_Timer
    __del__ = lambda self: None
Timer_swigregister = _EE.Timer_swigregister
Timer_swigregister(Timer)

class unknown_return(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unknown_return, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unknown_return, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flag"] = _EE.unknown_return_flag_set
    __swig_getmethods__["flag"] = _EE.unknown_return_flag_get
    if _newclass:
        flag = _swig_property(_EE.unknown_return_flag_get, _EE.unknown_return_flag_set)
    __swig_setmethods__["number"] = _EE.unknown_return_number_set
    __swig_getmethods__["number"] = _EE.unknown_return_number_get
    if _newclass:
        number = _swig_property(_EE.unknown_return_number_get, _EE.unknown_return_number_set)
    __swig_setmethods__["uNumber"] = _EE.unknown_return_uNumber_set
    __swig_getmethods__["uNumber"] = _EE.unknown_return_uNumber_get
    if _newclass:
        uNumber = _swig_property(_EE.unknown_return_uNumber_get, _EE.unknown_return_uNumber_set)
    __swig_setmethods__["decimal"] = _EE.unknown_return_decimal_set
    __swig_getmethods__["decimal"] = _EE.unknown_return_decimal_get
    if _newclass:
        decimal = _swig_property(_EE.unknown_return_decimal_get, _EE.unknown_return_decimal_set)
    __swig_setmethods__["answer"] = _EE.unknown_return_answer_set
    __swig_getmethods__["answer"] = _EE.unknown_return_answer_get
    if _newclass:
        answer = _swig_property(_EE.unknown_return_answer_get, _EE.unknown_return_answer_set)
    __swig_setmethods__["str"] = _EE.unknown_return_str_set
    __swig_getmethods__["str"] = _EE.unknown_return_str_get
    if _newclass:
        str = _swig_property(_EE.unknown_return_str_get, _EE.unknown_return_str_set)
    __swig_setmethods__["blob"] = _EE.unknown_return_blob_set
    __swig_getmethods__["blob"] = _EE.unknown_return_blob_get
    if _newclass:
        blob = _swig_property(_EE.unknown_return_blob_get, _EE.unknown_return_blob_set)
    __swig_setmethods__["c"] = _EE.unknown_return_c_set
    __swig_getmethods__["c"] = _EE.unknown_return_c_get
    if _newclass:
        c = _swig_property(_EE.unknown_return_c_get, _EE.unknown_return_c_set)
    __swig_setmethods__["ptr"] = _EE.unknown_return_ptr_set
    __swig_getmethods__["ptr"] = _EE.unknown_return_ptr_get
    if _newclass:
        ptr = _swig_property(_EE.unknown_return_ptr_get, _EE.unknown_return_ptr_set)

    def __init__(self):
        this = _EE.new_unknown_return()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_unknown_return
    __del__ = lambda self: None
unknown_return_swigregister = _EE.unknown_return_swigregister
unknown_return_swigregister(unknown_return)

class math_VECTOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, math_VECTOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, math_VECTOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["endX"] = _EE.math_VECTOR_endX_set
    __swig_getmethods__["endX"] = _EE.math_VECTOR_endX_get
    if _newclass:
        endX = _swig_property(_EE.math_VECTOR_endX_get, _EE.math_VECTOR_endX_set)
    __swig_setmethods__["endY"] = _EE.math_VECTOR_endY_set
    __swig_getmethods__["endY"] = _EE.math_VECTOR_endY_get
    if _newclass:
        endY = _swig_property(_EE.math_VECTOR_endY_get, _EE.math_VECTOR_endY_set)
    __swig_setmethods__["direction"] = _EE.math_VECTOR_direction_set
    __swig_getmethods__["direction"] = _EE.math_VECTOR_direction_get
    if _newclass:
        direction = _swig_property(_EE.math_VECTOR_direction_get, _EE.math_VECTOR_direction_set)
    __swig_setmethods__["magnitude"] = _EE.math_VECTOR_magnitude_set
    __swig_getmethods__["magnitude"] = _EE.math_VECTOR_magnitude_get
    if _newclass:
        magnitude = _swig_property(_EE.math_VECTOR_magnitude_get, _EE.math_VECTOR_magnitude_set)

    def __init__(self):
        this = _EE.new_math_VECTOR()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_math_VECTOR
    __del__ = lambda self: None
math_VECTOR_swigregister = _EE.math_VECTOR_swigregister
math_VECTOR_swigregister(math_VECTOR)

class math_point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, math_point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, math_point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _EE.math_point_X_set
    __swig_getmethods__["X"] = _EE.math_point_X_get
    if _newclass:
        X = _swig_property(_EE.math_point_X_get, _EE.math_point_X_set)
    __swig_setmethods__["Y"] = _EE.math_point_Y_set
    __swig_getmethods__["Y"] = _EE.math_point_Y_get
    if _newclass:
        Y = _swig_property(_EE.math_point_Y_get, _EE.math_point_Y_set)
    __swig_setmethods__["Z"] = _EE.math_point_Z_set
    __swig_getmethods__["Z"] = _EE.math_point_Z_get
    if _newclass:
        Z = _swig_property(_EE.math_point_Z_get, _EE.math_point_Z_set)

    def __init__(self):
        this = _EE.new_math_point()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_math_point
    __del__ = lambda self: None
math_point_swigregister = _EE.math_point_swigregister
math_point_swigregister(math_point)

class Range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _EE.Range_i_set
    __swig_getmethods__["i"] = _EE.Range_i_get
    if _newclass:
        i = _swig_property(_EE.Range_i_get, _EE.Range_i_set)
    __swig_setmethods__["f"] = _EE.Range_f_set
    __swig_getmethods__["f"] = _EE.Range_f_get
    if _newclass:
        f = _swig_property(_EE.Range_f_get, _EE.Range_f_set)

    def __init__(self, I=0, F=1000):
        this = _EE.new_Range(I, F)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Range
    __del__ = lambda self: None
Range_swigregister = _EE.Range_swigregister
Range_swigregister(Range)

class Resolution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Resolution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Resolution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["height"] = _EE.Resolution_height_set
    __swig_getmethods__["height"] = _EE.Resolution_height_get
    if _newclass:
        height = _swig_property(_EE.Resolution_height_get, _EE.Resolution_height_set)
    __swig_setmethods__["width"] = _EE.Resolution_width_set
    __swig_getmethods__["width"] = _EE.Resolution_width_get
    if _newclass:
        width = _swig_property(_EE.Resolution_width_get, _EE.Resolution_width_set)

    def __init__(self):
        this = _EE.new_Resolution()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Resolution
    __del__ = lambda self: None
Resolution_swigregister = _EE.Resolution_swigregister
Resolution_swigregister(Resolution)


_EE.NONE_swigconstant(_EE)
NONE = _EE.NONE

_EE.VAR_swigconstant(_EE)
VAR = _EE.VAR

_EE.XML_swigconstant(_EE)
XML = _EE.XML

_EE.LUA_swigconstant(_EE)
LUA = _EE.LUA

_EE.PYTHON_swigconstant(_EE)
PYTHON = _EE.PYTHON

_EE.SQLITE_swigconstant(_EE)
SQLITE = _EE.SQLITE

_EE.MYSQL_swigconstant(_EE)
MYSQL = _EE.MYSQL

_EE.SKEWLEFT_swigconstant(_EE)
SKEWLEFT = _EE.SKEWLEFT

_EE.SKEWRIGHT_swigconstant(_EE)
SKEWRIGHT = _EE.SKEWRIGHT

_EE.SKEWBOTH_swigconstant(_EE)
SKEWBOTH = _EE.SKEWBOTH

_EE.NOFLIP_swigconstant(_EE)
NOFLIP = _EE.NOFLIP

_EE.HORIZONTALLY_swigconstant(_EE)
HORIZONTALLY = _EE.HORIZONTALLY

_EE.VERTICALLY_swigconstant(_EE)
VERTICALLY = _EE.VERTICALLY

_EE.BOTH_swigconstant(_EE)
BOTH = _EE.BOTH
class DataBase(SQLQuery):
    __swig_setmethods__ = {}
    for _s in [SQLQuery]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SQLQuery]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EE.new_DataBase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def connect(self, file):
        return _EE.DataBase_connect(self, file)

    def disconnect(self):
        return _EE.DataBase_disconnect(self)

    def query(self, query):
        return _EE.DataBase_query(self, query)

    def GetResult(self, *args):
        return _EE.DataBase_GetResult(self, *args)

    def GetDBType(self):
        return _EE.DataBase_GetDBType(self)

    def isConnected(self):
        return _EE.DataBase_isConnected(self)
    __swig_destroy__ = _EE.delete_DataBase
    __del__ = lambda self: None
DataBase_swigregister = _EE.DataBase_swigregister
DataBase_swigregister(DataBase)

class pChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pChar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pBuffer"] = _EE.pChar_pBuffer_set
    __swig_getmethods__["pBuffer"] = _EE.pChar_pBuffer_get
    if _newclass:
        pBuffer = _swig_property(_EE.pChar_pBuffer_get, _EE.pChar_pBuffer_set)
    __swig_setmethods__["size"] = _EE.pChar_size_set
    __swig_getmethods__["size"] = _EE.pChar_size_get
    if _newclass:
        size = _swig_property(_EE.pChar_size_get, _EE.pChar_size_set)

    def __init__(self):
        this = _EE.new_pChar()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_pChar
    __del__ = lambda self: None
pChar_swigregister = _EE.pChar_swigregister
pChar_swigregister(pChar)


def charToInt(buffer):
    return _EE.charToInt(buffer)
charToInt = _EE.charToInt

def cStrToInt(buffer):
    return _EE.cStrToInt(buffer)
cStrToInt = _EE.cStrToInt

def intToStr(num):
    return _EE.intToStr(num)
intToStr = _EE.intToStr

def cStrToNum(buffer):
    return _EE.cStrToNum(buffer)
cStrToNum = _EE.cStrToNum

def numToStr(num):
    return _EE.numToStr(num)
numToStr = _EE.numToStr

def searchChar(character, buffer):
    return _EE.searchChar(character, buffer)
searchChar = _EE.searchChar

def findString(target, stringSource, pos=0):
    return _EE.findString(target, stringSource, pos)
findString = _EE.findString

def slicepChar(input, start, end):
    return _EE.slicepChar(input, start, end)
slicepChar = _EE.slicepChar

def shiftArrayLeft(*args):
    return _EE.shiftArrayLeft(*args)
shiftArrayLeft = _EE.shiftArrayLeft

def transferStr(input, array):
    return _EE.transferStr(input, array)
transferStr = _EE.transferStr

def createPCharFromBuffer(buffer, size):
    return _EE.createPCharFromBuffer(buffer, size)
createPCharFromBuffer = _EE.createPCharFromBuffer

def removeCharFromStr(target, cString):
    return _EE.removeCharFromStr(target, cString)
removeCharFromStr = _EE.removeCharFromStr

def removeMultipleCharFromStr(target, cString):
    return _EE.removeMultipleCharFromStr(target, cString)
removeMultipleCharFromStr = _EE.removeMultipleCharFromStr

def searchCharIndex(*args):
    return _EE.searchCharIndex(*args)
searchCharIndex = _EE.searchCharIndex

def sliceStr(input, start, end):
    return _EE.sliceStr(input, start, end)
sliceStr = _EE.sliceStr

def numToInt(value):
    return _EE.numToInt(value)
numToInt = _EE.numToInt

def fuseStrs(Str1, Str2):
    return _EE.fuseStrs(Str1, Str2)
fuseStrs = _EE.fuseStrs

def capitalizeStr(source):
    return _EE.capitalizeStr(source)
capitalizeStr = _EE.capitalizeStr

def replaceCharInStr(source, target, replacement, allInstances=True):
    return _EE.replaceCharInStr(source, target, replacement, allInstances)
replaceCharInStr = _EE.replaceCharInStr

def replaceStrInStr(source, target, replacement, allInstances=True):
    return _EE.replaceStrInStr(source, target, replacement, allInstances)
replaceStrInStr = _EE.replaceStrInStr

def removeLeadingWhiteSpace(source):
    return _EE.removeLeadingWhiteSpace(source)
removeLeadingWhiteSpace = _EE.removeLeadingWhiteSpace

def getCharArrayFromConstArray(s):
    return _EE.getCharArrayFromConstArray(s)
getCharArrayFromConstArray = _EE.getCharArrayFromConstArray

def roundDecimal(value, precision):
    return _EE.roundDecimal(value, precision)
roundDecimal = _EE.roundDecimal

def iroundDecimal(value, precision):
    return _EE.iroundDecimal(value, precision)
iroundDecimal = _EE.iroundDecimal

def changeProgramWorkingDirectory(newPath):
    return _EE.changeProgramWorkingDirectory(newPath)
changeProgramWorkingDirectory = _EE.changeProgramWorkingDirectory

def capitalizeChar(character):
    return _EE.capitalizeChar(character)
capitalizeChar = _EE.capitalizeChar

def lowerCaseChar(character):
    return _EE.lowerCaseChar(character)
lowerCaseChar = _EE.lowerCaseChar

def scientificFormat(*args):
    return _EE.scientificFormat(*args)
scientificFormat = _EE.scientificFormat

def isNum(strNum):
    return _EE.isNum(strNum)
isNum = _EE.isNum
class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    __swig_setmethods__["module"] = _EE.Module_module_set
    __swig_getmethods__["module"] = _EE.Module_module_get
    if _newclass:
        module = _swig_property(_EE.Module_module_get, _EE.Module_module_set)
    __swig_setmethods__["thread_id"] = _EE.Module_thread_id_set
    __swig_getmethods__["thread_id"] = _EE.Module_thread_id_get
    if _newclass:
        thread_id = _swig_property(_EE.Module_thread_id_get, _EE.Module_thread_id_set)
    __swig_setmethods__["mod_id"] = _EE.Module_mod_id_set
    __swig_getmethods__["mod_id"] = _EE.Module_mod_id_get
    if _newclass:
        mod_id = _swig_property(_EE.Module_mod_id_get, _EE.Module_mod_id_set)
    __swig_setmethods__["threaded"] = _EE.Module_threaded_set
    __swig_getmethods__["threaded"] = _EE.Module_threaded_get
    if _newclass:
        threaded = _swig_property(_EE.Module_threaded_get, _EE.Module_threaded_set)

    def __init__(self, owner, file, independent=False, pthread_id=0):
        this = _EE.new_Module(owner, file, independent, pthread_id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Module
    __del__ = lambda self: None
Module_swigregister = _EE.Module_swigregister
Module_swigregister(Module)

class ModuleSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSystem, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_ModuleSystem(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_ModuleSystem
    __del__ = lambda self: None

    def initModSys(self):
        return _EE.ModuleSystem_initModSys(self)

    def RegisterModule(self, file, threaded=False):
        return _EE.ModuleSystem_RegisterModule(self, file, threaded)

    def RegisterFunction(self, name, mod_id):
        return _EE.ModuleSystem_RegisterFunction(self, name, mod_id)

    def RegisterFunctionFromFile(self, file, mod_id):
        return _EE.ModuleSystem_RegisterFunctionFromFile(self, file, mod_id)

    def UnregisterModule(self, mod_id):
        return _EE.ModuleSystem_UnregisterModule(self, mod_id)

    def UnregisterFunction(self, name, mod_id):
        return _EE.ModuleSystem_UnregisterFunction(self, name, mod_id)

    def isFuncRegistered(self, name, mod_id):
        return _EE.ModuleSystem_isFuncRegistered(self, name, mod_id)

    def GetModuleThreadID(self, mod_id):
        return _EE.ModuleSystem_GetModuleThreadID(self, mod_id)

    def isModuleIndependent(self, mod_id):
        return _EE.ModuleSystem_isModuleIndependent(self, mod_id)

    def MarkModuleAsIndependent(self, mod_id):
        return _EE.ModuleSystem_MarkModuleAsIndependent(self, mod_id)

    def RunFunctionsInModule(self, mod_id):
        return _EE.ModuleSystem_RunFunctionsInModule(self, mod_id)

    def RunAllFunctions(self):
        return _EE.ModuleSystem_RunAllFunctions(self)
ModuleSystem_swigregister = _EE.ModuleSystem_swigregister
ModuleSystem_swigregister(ModuleSystem)

class UnitNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pData"] = _EE.UnitNode_pData_set
    __swig_getmethods__["pData"] = _EE.UnitNode_pData_get
    if _newclass:
        pData = _swig_property(_EE.UnitNode_pData_get, _EE.UnitNode_pData_set)
    __swig_setmethods__["Type"] = _EE.UnitNode_Type_set
    __swig_getmethods__["Type"] = _EE.UnitNode_Type_get
    if _newclass:
        Type = _swig_property(_EE.UnitNode_Type_get, _EE.UnitNode_Type_set)
    __swig_setmethods__["id"] = _EE.UnitNode_id_set
    __swig_getmethods__["id"] = _EE.UnitNode_id_get
    if _newclass:
        id = _swig_property(_EE.UnitNode_id_get, _EE.UnitNode_id_set)

    def __init__(self, *args):
        this = _EE.new_UnitNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_UnitNode
    __del__ = lambda self: None
UnitNode_swigregister = _EE.UnitNode_swigregister
UnitNode_swigregister(UnitNode)

class UnitManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_UnitManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_UnitManager
    __del__ = lambda self: None

    def initUnitSys(self):
        return _EE.UnitManager_initUnitSys(self)

    def SpawnUnit(self, type, BlitOrder, loc, file, hero, hasBars):
        return _EE.UnitManager_SpawnUnit(self, type, BlitOrder, loc, file, hero, hasBars)

    def SpawnUnitFromFile(self, file, BlitOrder):
        return _EE.UnitManager_SpawnUnitFromFile(self, file, BlitOrder)

    def SpawnUnitFromList(self, file, BlitOrder):
        return _EE.UnitManager_SpawnUnitFromList(self, file, BlitOrder)

    def CloneUnit(self, unit_id, copies):
        return _EE.UnitManager_CloneUnit(self, unit_id, copies)

    def GetUnit(self, id):
        return _EE.UnitManager_GetUnit(self, id)

    def GetUnitByName(self, name):
        return _EE.UnitManager_GetUnitByName(self, name)

    def FindNearbyUnit(self, pUnit):
        return _EE.UnitManager_FindNearbyUnit(self, pUnit)

    def hasUnit(self, *args):
        return _EE.UnitManager_hasUnit(self, *args)

    def DeleteUnit(self, unit):
        return _EE.UnitManager_DeleteUnit(self, unit)

    def DeleteUnitByID(self, id):
        return _EE.UnitManager_DeleteUnitByID(self, id)

    def DeleteUnitByName(self, name):
        return _EE.UnitManager_DeleteUnitByName(self, name)

    def DeleteAllProjectiles(self):
        return _EE.UnitManager_DeleteAllProjectiles(self)

    def DeleteAllGameObjects(self):
        return _EE.UnitManager_DeleteAllGameObjects(self)

    def DeleteAllUnits(self):
        return _EE.UnitManager_DeleteAllUnits(self)

    def DeleteAll(self):
        return _EE.UnitManager_DeleteAll(self)

    def RunPhysics(self):
        return _EE.UnitManager_RunPhysics(self)

    def DrawUnits(self):
        return _EE.UnitManager_DrawUnits(self)

    def PlayUnitSounds(self):
        return _EE.UnitManager_PlayUnitSounds(self)

    def ProcessUnitEvents(self):
        return _EE.UnitManager_ProcessUnitEvents(self)

    def GC(self):
        return _EE.UnitManager_GC(self)

    def UnlockUnit(self):
        return _EE.UnitManager_UnlockUnit(self)
UnitManager_swigregister = _EE.UnitManager_swigregister
UnitManager_swigregister(UnitManager)


def traversalRender(id, node):
    return _EE.traversalRender(id, node)
traversalRender = _EE.traversalRender
class Particle(Physics):
    __swig_setmethods__ = {}
    for _s in [Physics]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    for _s in [Physics]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr

    def __init__(self, owner, file, location, refParticle=None):
        this = _EE.new_Particle(owner, file, location, refParticle)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Particle
    __del__ = lambda self: None

    def RenderParticle(self):
        return _EE.Particle_RenderParticle(self)

    def OverrideParticlePos(self, newPos):
        return _EE.Particle_OverrideParticlePos(self, newPos)

    def GetParticle(self):
        return _EE.Particle_GetParticle(self)

    def isDead(self):
        return _EE.Particle_isDead(self)

    def SetParticle(self, other):
        return _EE.Particle_SetParticle(self, other)
Particle_swigregister = _EE.Particle_swigregister
Particle_swigregister(Particle)

class ParticleNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EE.new_ParticleNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_ParticleNode
    __del__ = lambda self: None

    def RenderParticles(self):
        return _EE.ParticleNode_RenderParticles(self)

    def RenderParticlesByProximity(self, loc, radius=100):
        return _EE.ParticleNode_RenderParticlesByProximity(self, loc, radius)

    def SetInitialForce(self, force):
        return _EE.ParticleNode_SetInitialForce(self, force)
ParticleNode_swigregister = _EE.ParticleNode_swigregister
ParticleNode_swigregister(ParticleNode)

class ParticleCluster(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleCluster, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleCluster, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_ParticleCluster(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_ParticleCluster
    __del__ = lambda self: None

    def GetParticleCount(self):
        return _EE.ParticleCluster_GetParticleCount(self)

    def SetInitialForce(self, id, force):
        return _EE.ParticleCluster_SetInitialForce(self, id, force)

    def RenderParticleById(self, id):
        return _EE.ParticleCluster_RenderParticleById(self, id)

    def RenderAllParticles(self):
        return _EE.ParticleCluster_RenderAllParticles(self)

    def RenderParticlesByProximity(self, loc, radius=100):
        return _EE.ParticleCluster_RenderParticlesByProximity(self, loc, radius)

    def RegisterParticle(self, *args):
        return _EE.ParticleCluster_RegisterParticle(self, *args)

    def DeleteParticle(self, id):
        return _EE.ParticleCluster_DeleteParticle(self, id)

    def DeleteAllParticles(self):
        return _EE.ParticleCluster_DeleteAllParticles(self)
ParticleCluster_swigregister = _EE.ParticleCluster_swigregister
ParticleCluster_swigregister(ParticleCluster)

class ParticleSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleSystem, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_ParticleSystem(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_ParticleSystem
    __del__ = lambda self: None

    def initParticleSys(self):
        return _EE.ParticleSystem_initParticleSys(self)

    def RegisterUnitParticle(self, *args):
        return _EE.ParticleSystem_RegisterUnitParticle(self, *args)

    def RegisterGameParticle(self, *args):
        return _EE.ParticleSystem_RegisterGameParticle(self, *args)

    def RenderParticleFromUnit(self, unit, id):
        return _EE.ParticleSystem_RenderParticleFromUnit(self, unit, id)

    def RenderAllParticlesFromUnit(self, unit):
        return _EE.ParticleSystem_RenderAllParticlesFromUnit(self, unit)

    def RenderUnitParticlesByProximity(self, unit, radius=100):
        return _EE.ParticleSystem_RenderUnitParticlesByProximity(self, unit, radius)

    def RenderGameParticlesByProximity(self, loc, radius=100):
        return _EE.ParticleSystem_RenderGameParticlesByProximity(self, loc, radius)

    def RenderAllParticlesFromGame(self):
        return _EE.ParticleSystem_RenderAllParticlesFromGame(self)

    def DeleteUnitParticle(self, unit, id):
        return _EE.ParticleSystem_DeleteUnitParticle(self, unit, id)

    def DeleteGameParticle(self, id):
        return _EE.ParticleSystem_DeleteGameParticle(self, id)

    def ClearUnitParticles(self):
        return _EE.ParticleSystem_ClearUnitParticles(self)

    def ClearGameParticles(self):
        return _EE.ParticleSystem_ClearGameParticles(self)

    def ClearAllParticles(self):
        return _EE.ParticleSystem_ClearAllParticles(self)

    def GetUnitParticleCount(self, unit):
        return _EE.ParticleSystem_GetUnitParticleCount(self, unit)

    def GetGameParticleCount(self):
        return _EE.ParticleSystem_GetGameParticleCount(self)

    def SetInitialForceOfUnitParticle(self, unit, id, force):
        return _EE.ParticleSystem_SetInitialForceOfUnitParticle(self, unit, id, force)

    def SetInitialForceOfGameParticle(self, id, force):
        return _EE.ParticleSystem_SetInitialForceOfGameParticle(self, id, force)
ParticleSystem_swigregister = _EE.ParticleSystem_swigregister
ParticleSystem_swigregister(ParticleSystem)

class ThreadSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadSystem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EE.new_ThreadSystem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_ThreadSystem
    __del__ = lambda self: None

    def SpawnThread(self, target, arg):
        return _EE.ThreadSystem_SpawnThread(self, target, arg)

    def SpawnMutex(self):
        return _EE.ThreadSystem_SpawnMutex(self)

    def SpawnCondVar(self):
        return _EE.ThreadSystem_SpawnCondVar(self)

    def GetMutex(self, id):
        return _EE.ThreadSystem_GetMutex(self, id)

    def GetConditionVariable(self, id):
        return _EE.ThreadSystem_GetConditionVariable(self, id)

    def LockMutex(self, mutex_id):
        return _EE.ThreadSystem_LockMutex(self, mutex_id)

    def WaitForCond(self, mutex_id, cond_id):
        return _EE.ThreadSystem_WaitForCond(self, mutex_id, cond_id)

    def SignalCond(self, cond_id):
        return _EE.ThreadSystem_SignalCond(self, cond_id)

    def UnlockMutex(self, mutex_id):
        return _EE.ThreadSystem_UnlockMutex(self, mutex_id)

    def JoinThread(self, id):
        return _EE.ThreadSystem_JoinThread(self, id)

    def CloseThread(self, id):
        return _EE.ThreadSystem_CloseThread(self, id)

    def DeleteMutex(self, id):
        return _EE.ThreadSystem_DeleteMutex(self, id)

    def DeleteConditionVariable(self, id):
        return _EE.ThreadSystem_DeleteConditionVariable(self, id)
ThreadSystem_swigregister = _EE.ThreadSystem_swigregister
ThreadSystem_swigregister(ThreadSystem)


_EE.NO_CLIENT_swigconstant(_EE)
NO_CLIENT = _EE.NO_CLIENT

_EE.TIMEOUT_TRYS_swigconstant(_EE)
TIMEOUT_TRYS = _EE.TIMEOUT_TRYS

_EE.NET_ANYUDPPORT_swigconstant(_EE)
NET_ANYUDPPORT = _EE.NET_ANYUDPPORT

_EE.ANY_CHANNEL_swigconstant(_EE)
ANY_CHANNEL = _EE.ANY_CHANNEL
class UDPClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UDPClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UDPClient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ip"] = _EE.UDPClient_ip_set
    __swig_getmethods__["ip"] = _EE.UDPClient_ip_get
    if _newclass:
        ip = _swig_property(_EE.UDPClient_ip_get, _EE.UDPClient_ip_set)
    __swig_setmethods__["id"] = _EE.UDPClient_id_set
    __swig_getmethods__["id"] = _EE.UDPClient_id_get
    if _newclass:
        id = _swig_property(_EE.UDPClient_id_get, _EE.UDPClient_id_set)
    __swig_setmethods__["udp"] = _EE.UDPClient_udp_set
    __swig_getmethods__["udp"] = _EE.UDPClient_udp_get
    if _newclass:
        udp = _swig_property(_EE.UDPClient_udp_get, _EE.UDPClient_udp_set)

    def __init__(self):
        this = _EE.new_UDPClient()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_UDPClient
    __del__ = lambda self: None
UDPClient_swigregister = _EE.UDPClient_swigregister
UDPClient_swigregister(UDPClient)

class TCPClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCPClient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _EE.TCPClient_id_set
    __swig_getmethods__["id"] = _EE.TCPClient_id_get
    if _newclass:
        id = _swig_property(_EE.TCPClient_id_get, _EE.TCPClient_id_set)
    __swig_setmethods__["host"] = _EE.TCPClient_host_set
    __swig_getmethods__["host"] = _EE.TCPClient_host_get
    if _newclass:
        host = _swig_property(_EE.TCPClient_host_get, _EE.TCPClient_host_set)
    __swig_setmethods__["port"] = _EE.TCPClient_port_set
    __swig_getmethods__["port"] = _EE.TCPClient_port_get
    if _newclass:
        port = _swig_property(_EE.TCPClient_port_get, _EE.TCPClient_port_set)
    __swig_setmethods__["host_name"] = _EE.TCPClient_host_name_set
    __swig_getmethods__["host_name"] = _EE.TCPClient_host_name_get
    if _newclass:
        host_name = _swig_property(_EE.TCPClient_host_name_get, _EE.TCPClient_host_name_set)
    __swig_setmethods__["sock"] = _EE.TCPClient_sock_set
    __swig_getmethods__["sock"] = _EE.TCPClient_sock_get
    if _newclass:
        sock = _swig_property(_EE.TCPClient_sock_get, _EE.TCPClient_sock_set)

    def __init__(self):
        this = _EE.new_TCPClient()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_TCPClient
    __del__ = lambda self: None
TCPClient_swigregister = _EE.TCPClient_swigregister
TCPClient_swigregister(TCPClient)

class NetNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EE.new_NetNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_NetNode
    __del__ = lambda self: None

    def GetAddress(self):
        return _EE.NetNode_GetAddress(self)

    def GetTCPSocket(self, client_id=-1):
        return _EE.NetNode_GetTCPSocket(self, client_id)

    def GetTCPClientInfo(self, client_id):
        return _EE.NetNode_GetTCPClientInfo(self, client_id)

    def GetUDPSocket(self):
        return _EE.NetNode_GetUDPSocket(self)

    def GetUDPClientInfo(self, client_id):
        return _EE.NetNode_GetUDPClientInfo(self, client_id)

    def GetPort(self):
        return _EE.NetNode_GetPort(self)

    def GetNodeID(self):
        return _EE.NetNode_GetNodeID(self)

    def GetClientCount(self):
        return _EE.NetNode_GetClientCount(self)

    def GenerateUDPID(self):
        return _EE.NetNode_GenerateUDPID(self)

    def isUDP(self):
        return _EE.NetNode_isUDP(self)

    def isServer(self):
        return _EE.NetNode_isServer(self)

    def isBad(self):
        return _EE.NetNode_isBad(self)

    def isUDPIDUsed(self, client_id):
        return _EE.NetNode_isUDPIDUsed(self, client_id)

    def AcceptTCPClient(self):
        return _EE.NetNode_AcceptTCPClient(self)

    def RegisterUDPClient(self, ip, channel):
        return _EE.NetNode_RegisterUDPClient(self, ip, channel)

    def UnRegisterTCPClient(self, client_id):
        return _EE.NetNode_UnRegisterTCPClient(self, client_id)

    def UnRegisterUDPClient(self, channel):
        return _EE.NetNode_UnRegisterUDPClient(self, channel)
NetNode_swigregister = _EE.NetNode_swigregister
NetNode_swigregister(NetNode)

class NetworkManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_NetworkManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_NetworkManager
    __del__ = lambda self: None

    def initNetSys(self):
        return _EE.NetworkManager_initNetSys(self)

    def CreateClientConnection(self, host, port, udp=False):
        return _EE.NetworkManager_CreateClientConnection(self, host, port, udp)

    def CreateServer(self, port, udp=False):
        return _EE.NetworkManager_CreateServer(self, port, udp)

    def AcceptTCPClient(self, socket_id):
        return _EE.NetworkManager_AcceptTCPClient(self, socket_id)

    def AcceptUDPClient(self, socket_id):
        return _EE.NetworkManager_AcceptUDPClient(self, socket_id)

    def CloseUDPClient(self, socket_id, channel):
        return _EE.NetworkManager_CloseUDPClient(self, socket_id, channel)

    def SetMTU(self, max):
        return _EE.NetworkManager_SetMTU(self, max)

    def SendData(self, data, len, socket_id, client_id=-1):
        return _EE.NetworkManager_SendData(self, data, len, socket_id, client_id)

    def SendDataStr(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_SendDataStr(self, data, socket_id, client_id)

    def SendDataInt(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_SendDataInt(self, data, socket_id, client_id)

    def SendDataBoolean(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_SendDataBoolean(self, data, socket_id, client_id)

    def SendDataDouble(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_SendDataDouble(self, data, socket_id, client_id)

    def SendDataChar(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_SendDataChar(self, data, socket_id, client_id)

    def SendUDPSignal(self, socket_id, sig_data):
        return _EE.NetworkManager_SendUDPSignal(self, socket_id, sig_data)

    def RecvData(self, data, maxlen, socket_id, client_id=-1):
        return _EE.NetworkManager_RecvData(self, data, maxlen, socket_id, client_id)

    def RecvDataStr(self, data, maxlen, socket_id, client_id=-1):
        return _EE.NetworkManager_RecvDataStr(self, data, maxlen, socket_id, client_id)

    def RecvDataInt(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_RecvDataInt(self, data, socket_id, client_id)

    def RecvDataChar(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_RecvDataChar(self, data, socket_id, client_id)

    def RecvDataBoolean(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_RecvDataBoolean(self, data, socket_id, client_id)

    def RecvDataDouble(self, data, socket_id, client_id=-1):
        return _EE.NetworkManager_RecvDataDouble(self, data, socket_id, client_id)

    def PingUDPClient(self, socket_id, channel, timeout=5000):
        return _EE.NetworkManager_PingUDPClient(self, socket_id, channel, timeout)

    def GetMaxNumUDPChannels(self):
        return _EE.NetworkManager_GetMaxNumUDPChannels(self)

    def GetUDPClientInfo(self, socket_id, channel):
        return _EE.NetworkManager_GetUDPClientInfo(self, socket_id, channel)

    def GetTCPClientInfo(self, socket_id, client_id):
        return _EE.NetworkManager_GetTCPClientInfo(self, socket_id, client_id)
NetworkManager_swigregister = _EE.NetworkManager_swigregister
NetworkManager_swigregister(NetworkManager)

class LocaleNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocaleNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocaleNode, name)
    __repr__ = _swig_repr

    def __init__(self, content):
        this = _EE.new_LocaleNode(content)
        try:
            self.this.append(this)
        except:
            self.this = this

    def GetLocaleStringSize(self):
        return _EE.LocaleNode_GetLocaleStringSize(self)

    def GetLocaleString(self):
        return _EE.LocaleNode_GetLocaleString(self)

    def __eq__(self, input):
        return _EE.LocaleNode___eq__(self, input)
    __swig_destroy__ = _EE.delete_LocaleNode
    __del__ = lambda self: None
LocaleNode_swigregister = _EE.LocaleNode_swigregister
LocaleNode_swigregister(LocaleNode)

class LocaleReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocaleReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocaleReader, name)
    __repr__ = _swig_repr

    def __init__(self, file):
        this = _EE.new_LocaleReader(file)
        try:
            self.this.append(this)
        except:
            self.this = this

    def ExpandInputString(self, raw_input):
        return _EE.LocaleReader_ExpandInputString(self, raw_input)

    def CondenseInputString(self, raw_input):
        return _EE.LocaleReader_CondenseInputString(self, raw_input)

    def GetLocaleName(self):
        return _EE.LocaleReader_GetLocaleName(self)
    __swig_destroy__ = _EE.delete_LocaleReader
    __del__ = lambda self: None
LocaleReader_swigregister = _EE.LocaleReader_swigregister
LocaleReader_swigregister(LocaleReader)

class IONode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IONode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IONode, name)
    __repr__ = _swig_repr

    def __init__(self, inputMode, id, file_path, database=False):
        this = _EE.new_IONode(inputMode, id, file_path, database)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_IONode
    __del__ = lambda self: None

    def DecCount(self):
        return _EE.IONode_DecCount(self)

    def IncCount(self):
        return _EE.IONode_IncCount(self)

    def GetCount(self):
        return _EE.IONode_GetCount(self)

    def GetID(self):
        return _EE.IONode_GetID(self)

    def GetPath(self):
        return _EE.IONode_GetPath(self)

    def GetFile(self):
        return _EE.IONode_GetFile(self)

    def GetDataBase(self):
        return _EE.IONode_GetDataBase(self)
IONode_swigregister = _EE.IONode_swigregister
IONode_swigregister(IONode)

class IOManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_IOManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_IOManager
    __del__ = lambda self: None

    def initIOSys(self):
        return _EE.IOManager_initIOSys(self)

    def GetFile(self, file_id):
        return _EE.IOManager_GetFile(self, file_id)

    def GetDataBase(self, db_id):
        return _EE.IOManager_GetDataBase(self, db_id)

    def ExpandStringFromLocale(self, raw_input):
        return _EE.IOManager_ExpandStringFromLocale(self, raw_input)

    def RegisterFile(self, file_path, inputMode=True):
        return _EE.IOManager_RegisterFile(self, file_path, inputMode)

    def RegisterDataBase(self, file):
        return _EE.IOManager_RegisterDataBase(self, file)

    def SetLocale(self, file):
        return _EE.IOManager_SetLocale(self, file)

    def CloseFile(self, file_id):
        return _EE.IOManager_CloseFile(self, file_id)

    def CloseDBConnection(self, db_id):
        return _EE.IOManager_CloseDBConnection(self, db_id)
IOManager_swigregister = _EE.IOManager_swigregister
IOManager_swigregister(IOManager)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["layer"] = _EE.Layer_layer_set
    __swig_getmethods__["layer"] = _EE.Layer_layer_get
    if _newclass:
        layer = _swig_property(_EE.Layer_layer_get, _EE.Layer_layer_set)
    __swig_setmethods__["id"] = _EE.Layer_id_set
    __swig_getmethods__["id"] = _EE.Layer_id_get
    if _newclass:
        id = _swig_property(_EE.Layer_id_get, _EE.Layer_id_set)
    __swig_setmethods__["loc"] = _EE.Layer_loc_set
    __swig_getmethods__["loc"] = _EE.Layer_loc_get
    if _newclass:
        loc = _swig_property(_EE.Layer_loc_get, _EE.Layer_loc_set)

    def __init__(self, file, owner, l_id):
        this = _EE.new_Layer(file, owner, l_id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Layer
    __del__ = lambda self: None
Layer_swigregister = _EE.Layer_swigregister
Layer_swigregister(Layer)

class LayerSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerSystem, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_LayerSystem(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_LayerSystem
    __del__ = lambda self: None

    def initLayerSys(self):
        return _EE.LayerSystem_initLayerSys(self)

    def AddLayer(self, file):
        return _EE.LayerSystem_AddLayer(self, file)

    def AddLayerSet(self, file):
        return _EE.LayerSystem_AddLayerSet(self, file)

    def DeleteLayer(self, l_id):
        return _EE.LayerSystem_DeleteLayer(self, l_id)

    def DeleteAllLayers(self):
        return _EE.LayerSystem_DeleteAllLayers(self)

    def GetLayer(self, l_id):
        return _EE.LayerSystem_GetLayer(self, l_id)

    def GetLayerCount(self):
        return _EE.LayerSystem_GetLayerCount(self)

    def DrawLayers(self):
        return _EE.LayerSystem_DrawLayers(self)
LayerSystem_swigregister = _EE.LayerSystem_swigregister
LayerSystem_swigregister(LayerSystem)

class ExpansionItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpansionItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpansionItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _EE.ExpansionItem_id_set
    __swig_getmethods__["id"] = _EE.ExpansionItem_id_get
    if _newclass:
        id = _swig_property(_EE.ExpansionItem_id_get, _EE.ExpansionItem_id_set)
    __swig_setmethods__["name"] = _EE.ExpansionItem_name_set
    __swig_getmethods__["name"] = _EE.ExpansionItem_name_get
    if _newclass:
        name = _swig_property(_EE.ExpansionItem_name_get, _EE.ExpansionItem_name_set)
    __swig_setmethods__["path"] = _EE.ExpansionItem_path_set
    __swig_getmethods__["path"] = _EE.ExpansionItem_path_get
    if _newclass:
        path = _swig_property(_EE.ExpansionItem_path_get, _EE.ExpansionItem_path_set)
    __swig_setmethods__["description"] = _EE.ExpansionItem_description_set
    __swig_getmethods__["description"] = _EE.ExpansionItem_description_get
    if _newclass:
        description = _swig_property(_EE.ExpansionItem_description_get, _EE.ExpansionItem_description_set)

    def __init__(self, *args):
        this = _EE.new_ExpansionItem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_ExpansionItem
    __del__ = lambda self: None
ExpansionItem_swigregister = _EE.ExpansionItem_swigregister
ExpansionItem_swigregister(ExpansionItem)

class LocaleItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocaleItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocaleItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _EE.LocaleItem_name_set
    __swig_getmethods__["name"] = _EE.LocaleItem_name_get
    if _newclass:
        name = _swig_property(_EE.LocaleItem_name_get, _EE.LocaleItem_name_set)
    __swig_setmethods__["path"] = _EE.LocaleItem_path_set
    __swig_getmethods__["path"] = _EE.LocaleItem_path_get
    if _newclass:
        path = _swig_property(_EE.LocaleItem_path_get, _EE.LocaleItem_path_set)

    def __init__(self):
        this = _EE.new_LocaleItem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_LocaleItem
    __del__ = lambda self: None
LocaleItem_swigregister = _EE.LocaleItem_swigregister
LocaleItem_swigregister(LocaleItem)

class ExpansionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpansionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpansionInfo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _EE.delete_ExpansionInfo
    __del__ = lambda self: None

    def LoadExpansionInfo(self, *args):
        return _EE.ExpansionInfo_LoadExpansionInfo(self, *args)

    def GetExpansionName(self, id):
        return _EE.ExpansionInfo_GetExpansionName(self, id)

    def GetExpansionPath(self, id):
        return _EE.ExpansionInfo_GetExpansionPath(self, id)

    def GetExpansionDescription(self, id):
        return _EE.ExpansionInfo_GetExpansionDescription(self, id)

    def GenerateExpansionID(self, name):
        return _EE.ExpansionInfo_GenerateExpansionID(self, name)

    def GetExpansionCount(self):
        return _EE.ExpansionInfo_GetExpansionCount(self)
    __swig_getmethods__["INVALID"] = _EE.ExpansionInfo_INVALID_get
    if _newclass:
        INVALID = _swig_property(_EE.ExpansionInfo_INVALID_get)

    def __init__(self):
        this = _EE.new_ExpansionInfo()
        try:
            self.this.append(this)
        except:
            self.this = this
ExpansionInfo_swigregister = _EE.ExpansionInfo_swigregister
ExpansionInfo_swigregister(ExpansionInfo)

class LocaleInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocaleInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocaleInfo, name)
    __repr__ = _swig_repr

    def LoadLocaleListFromLoc(self, dir):
        return _EE.LocaleInfo_LoadLocaleListFromLoc(self, dir)

    def LoadLocaleListFromDB(self, db):
        return _EE.LocaleInfo_LoadLocaleListFromDB(self, db)

    def AddLocaleToList(self, name, path):
        return _EE.LocaleInfo_AddLocaleToList(self, name, path)

    def GetLocaleInfo(self, *args):
        return _EE.LocaleInfo_GetLocaleInfo(self, *args)

    def GetSelectedLocale(self):
        return _EE.LocaleInfo_GetSelectedLocale(self)

    def GetLocaleItemCount(self):
        return _EE.LocaleInfo_GetLocaleItemCount(self)

    def __init__(self):
        this = _EE.new_LocaleInfo()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_LocaleInfo
    __del__ = lambda self: None
LocaleInfo_swigregister = _EE.LocaleInfo_swigregister
LocaleInfo_swigregister(LocaleInfo)

class ScreenInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EE.new_ScreenInfo()
        try:
            self.this.append(this)
        except:
            self.this = this

    def SetScreenInfo(self, *args):
        return _EE.ScreenInfo_SetScreenInfo(self, *args)

    def SetScreenLoc(self, x=0, y=0):
        return _EE.ScreenInfo_SetScreenLoc(self, x, y)

    def SetScreenDeviceStr(self, gfx_card):
        return _EE.ScreenInfo_SetScreenDeviceStr(self, gfx_card)

    def AutoDetectVideoCard(self):
        return _EE.ScreenInfo_AutoDetectVideoCard(self)

    def GetMaxFramesPerSec(self):
        return _EE.ScreenInfo_GetMaxFramesPerSec(self)

    def GetScreenWidth(self):
        return _EE.ScreenInfo_GetScreenWidth(self)

    def GetScreenHeight(self):
        return _EE.ScreenInfo_GetScreenHeight(self)

    def GetScreenLoc(self):
        return _EE.ScreenInfo_GetScreenLoc(self)

    def GetScreenBPP(self):
        return _EE.ScreenInfo_GetScreenBPP(self)

    def GetDisplayIndex(self):
        return _EE.ScreenInfo_GetDisplayIndex(self)

    def GetDisplayCount(self):
        return _EE.ScreenInfo_GetDisplayCount(self)

    def GetScreenMode(self):
        return _EE.ScreenInfo_GetScreenMode(self)

    def GetRenderDriver(self):
        return _EE.ScreenInfo_GetRenderDriver(self)

    def GetGraphicsDeviceName(self):
        return _EE.ScreenInfo_GetGraphicsDeviceName(self)
    __swig_getmethods__["FULLSCREEN"] = _EE.ScreenInfo_FULLSCREEN_get
    if _newclass:
        FULLSCREEN = _swig_property(_EE.ScreenInfo_FULLSCREEN_get)
    __swig_getmethods__["RESIZABLE"] = _EE.ScreenInfo_RESIZABLE_get
    if _newclass:
        RESIZABLE = _swig_property(_EE.ScreenInfo_RESIZABLE_get)
    __swig_getmethods__["MAXIMIZED"] = _EE.ScreenInfo_MAXIMIZED_get
    if _newclass:
        MAXIMIZED = _swig_property(_EE.ScreenInfo_MAXIMIZED_get)
    __swig_getmethods__["OPENGL"] = _EE.ScreenInfo_OPENGL_get
    if _newclass:
        OPENGL = _swig_property(_EE.ScreenInfo_OPENGL_get)
    __swig_getmethods__["DIRECT3D"] = _EE.ScreenInfo_DIRECT3D_get
    if _newclass:
        DIRECT3D = _swig_property(_EE.ScreenInfo_DIRECT3D_get)
    __swig_getmethods__["SOFTWARE"] = _EE.ScreenInfo_SOFTWARE_get
    if _newclass:
        SOFTWARE = _swig_property(_EE.ScreenInfo_SOFTWARE_get)
    __swig_destroy__ = _EE.delete_ScreenInfo
    __del__ = lambda self: None
ScreenInfo_swigregister = _EE.ScreenInfo_swigregister
ScreenInfo_swigregister(ScreenInfo)

class SoundInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EE.new_SoundInfo()
        try:
            self.this.append(this)
        except:
            self.this = this

    def SetSoundInfo(self, frequency=22050, channels=2, chunksize=4096):
        return _EE.SoundInfo_SetSoundInfo(self, frequency, channels, chunksize)

    def SetSoundVolume(self, vol):
        return _EE.SoundInfo_SetSoundVolume(self, vol)

    def SetSoundDeviceStr(self, sound_card):
        return _EE.SoundInfo_SetSoundDeviceStr(self, sound_card)

    def AutoDetectSoundCard(self):
        return _EE.SoundInfo_AutoDetectSoundCard(self)

    def GetSoundFrequency(self):
        return _EE.SoundInfo_GetSoundFrequency(self)

    def GetSoundChannels(self):
        return _EE.SoundInfo_GetSoundChannels(self)

    def GetSoundChunkSize(self):
        return _EE.SoundInfo_GetSoundChunkSize(self)

    def GetMasterVolume(self):
        return _EE.SoundInfo_GetMasterVolume(self)

    def GetSoundDeviceName(self):
        return _EE.SoundInfo_GetSoundDeviceName(self)
    __swig_destroy__ = _EE.delete_SoundInfo
    __del__ = lambda self: None
SoundInfo_swigregister = _EE.SoundInfo_swigregister
SoundInfo_swigregister(SoundInfo)

class GameInfo(ScreenInfo, SoundInfo, ExpansionInfo, LocaleInfo):
    __swig_setmethods__ = {}
    for _s in [ScreenInfo, SoundInfo, ExpansionInfo, LocaleInfo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [ScreenInfo, SoundInfo, ExpansionInfo, LocaleInfo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EE.new_GameInfo()
        try:
            self.this.append(this)
        except:
            self.this = this

    def SetInfo(self, *args):
        return _EE.GameInfo_SetInfo(self, *args)

    def GetRootDirectory(self):
        return _EE.GameInfo_GetRootDirectory(self)

    def GetModName(self):
        return _EE.GameInfo_GetModName(self)

    def GetGameName(self):
        return _EE.GameInfo_GetGameName(self)

    def GetIconLoc(self):
        return _EE.GameInfo_GetIconLoc(self)

    def GetBlitLevels(self):
        return _EE.GameInfo_GetBlitLevels(self)

    def GetRenderQuality(self):
        return _EE.GameInfo_GetRenderQuality(self)
    __swig_destroy__ = _EE.delete_GameInfo
    __del__ = lambda self: None
GameInfo_swigregister = _EE.GameInfo_swigregister
GameInfo_swigregister(GameInfo)

class TriggerManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_TriggerManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_TriggerManager
    __del__ = lambda self: None

    def initTriggerSys(self):
        return _EE.TriggerManager_initTriggerSys(self)

    def RegisterTrigger(self, file):
        return _EE.TriggerManager_RegisterTrigger(self, file)

    def UnRegisterTrigger(self, trigger_id):
        return _EE.TriggerManager_UnRegisterTrigger(self, trigger_id)

    def GetTrigger(self, trigger_id):
        return _EE.TriggerManager_GetTrigger(self, trigger_id)

    def UpdateTriggers(self, unit_id):
        return _EE.TriggerManager_UpdateTriggers(self, unit_id)

    def UpdateTrigger(self, trigger_id, unit_id):
        return _EE.TriggerManager_UpdateTrigger(self, trigger_id, unit_id)

    def UpdateTriggerLocation(self, loc, trigger_id):
        return _EE.TriggerManager_UpdateTriggerLocation(self, loc, trigger_id)
TriggerManager_swigregister = _EE.TriggerManager_swigregister
TriggerManager_swigregister(TriggerManager)

class TimerSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimerSystem, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_TimerSystem(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_TimerSystem
    __del__ = lambda self: None

    def initTimerSys(self):
        return _EE.TimerSystem_initTimerSys(self)

    def GetTicks(self, t_id):
        return _EE.TimerSystem_GetTicks(self, t_id)

    def StopTimer(self, t_id):
        return _EE.TimerSystem_StopTimer(self, t_id)

    def StartTimer(self, t_id):
        return _EE.TimerSystem_StartTimer(self, t_id)

    def PauseTimer(self, t_id):
        return _EE.TimerSystem_PauseTimer(self, t_id)

    def UnpauseTimer(self, t_id):
        return _EE.TimerSystem_UnpauseTimer(self, t_id)

    def isTimerStarted(self, t_id):
        return _EE.TimerSystem_isTimerStarted(self, t_id)

    def isTimerPaused(self, t_id):
        return _EE.TimerSystem_isTimerPaused(self, t_id)

    def CreateTimer(self):
        return _EE.TimerSystem_CreateTimer(self)

    def DeleteTimer(self, t_id):
        return _EE.TimerSystem_DeleteTimer(self, t_id)
TimerSystem_swigregister = _EE.TimerSystem_swigregister
TimerSystem_swigregister(TimerSystem)

class UIManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIManager, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_UIManager(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_UIManager
    __del__ = lambda self: None

    def initUISys(self):
        return _EE.UIManager_initUISys(self)

    def RegisterUI(self, file):
        return _EE.UIManager_RegisterUI(self, file)

    def UnregisterUI(self, ui_id):
        return _EE.UIManager_UnregisterUI(self, ui_id)

    def GetUI(self, ui_id):
        return _EE.UIManager_GetUI(self, ui_id)

    def FindUIByName(self, name):
        return _EE.UIManager_FindUIByName(self, name)

    def uiIDExists(self, id):
        return _EE.UIManager_uiIDExists(self, id)

    def UIUpdate(self):
        return _EE.UIManager_UIUpdate(self)

    def UIProcessEvents(self):
        return _EE.UIManager_UIProcessEvents(self)

    def UIDraw(self):
        return _EE.UIManager_UIDraw(self)
UIManager_swigregister = _EE.UIManager_swigregister
UIManager_swigregister(UIManager)


def helperUIUpdate(game):
    return _EE.helperUIUpdate(game)
helperUIUpdate = _EE.helperUIUpdate

def helperUIProcessEvents(game):
    return _EE.helperUIProcessEvents(game)
helperUIProcessEvents = _EE.helperUIProcessEvents

def helperUIDraw(game):
    return _EE.helperUIDraw(game)
helperUIDraw = _EE.helperUIDraw
class Level(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Level, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Level, name)
    __repr__ = _swig_repr

    def __init__(self, owner, file):
        this = _EE.new_Level(owner, file)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Level
    __del__ = lambda self: None

    def GetMapName(self):
        return _EE.Level_GetMapName(self)

    def GetHeroID(self):
        return _EE.Level_GetHeroID(self)

    def GetLayerIDs(self):
        return _EE.Level_GetLayerIDs(self)

    def GetUnitIDs(self):
        return _EE.Level_GetUnitIDs(self)

    def GetUIIDs(self):
        return _EE.Level_GetUIIDs(self)

    def GetModuleIDs(self):
        return _EE.Level_GetModuleIDs(self)

    def GetTriggerIDs(self):
        return _EE.Level_GetTriggerIDs(self)

    def SetHeroID(self, h_id):
        return _EE.Level_SetHeroID(self, h_id)
Level_swigregister = _EE.Level_swigregister
Level_swigregister(Level)

class SoundQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundQueue, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_SoundQueue(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_SoundQueue
    __del__ = lambda self: None

    def initSoundSys(self):
        return _EE.SoundQueue_initSoundSys(self)

    def AddSoundToQueue(self, soundFile, music=False):
        return _EE.SoundQueue_AddSoundToQueue(self, soundFile, music)

    def AddSoundBufferToQueue(self, soundBuffer, size, isHeaderlessWav=True, music=False):
        return _EE.SoundQueue_AddSoundBufferToQueue(self, soundBuffer, size, isHeaderlessWav, music)

    def FlipMusic(self):
        return _EE.SoundQueue_FlipMusic(self)

    def SetFadeInTime(self, ms):
        return _EE.SoundQueue_SetFadeInTime(self, ms)

    def SetRangeOfEffects(self, range):
        return _EE.SoundQueue_SetRangeOfEffects(self, range)

    def PlayNextSound(self):
        return _EE.SoundQueue_PlayNextSound(self)

    def UpdateMusicAroundHero(self, hero):
        return _EE.SoundQueue_UpdateMusicAroundHero(self, hero)

    def PlayMusicSound(self):
        return _EE.SoundQueue_PlayMusicSound(self)

    def StopMusicSound(self):
        return _EE.SoundQueue_StopMusicSound(self)

    def GCSounds(self):
        return _EE.SoundQueue_GCSounds(self)

    def ClearQueue(self):
        return _EE.SoundQueue_ClearQueue(self)
SoundQueue_swigregister = _EE.SoundQueue_swigregister
SoundQueue_swigregister(SoundQueue)

class SynchData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynchData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SynchData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pts"] = _EE.SynchData_pts_set
    __swig_getmethods__["pts"] = _EE.SynchData_pts_get
    if _newclass:
        pts = _swig_property(_EE.SynchData_pts_get, _EE.SynchData_pts_set)
    __swig_setmethods__["repeats"] = _EE.SynchData_repeats_set
    __swig_getmethods__["repeats"] = _EE.SynchData_repeats_get
    if _newclass:
        repeats = _swig_property(_EE.SynchData_repeats_get, _EE.SynchData_repeats_set)

    def __init__(self):
        this = _EE.new_SynchData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_SynchData
    __del__ = lambda self: None
SynchData_swigregister = _EE.SynchData_swigregister
SynchData_swigregister(SynchData)

class VideoFrame(SynchData):
    __swig_setmethods__ = {}
    for _s in [SynchData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [SynchData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VideoFrame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pYUV420PText"] = _EE.VideoFrame_pYUV420PText_set
    __swig_getmethods__["pYUV420PText"] = _EE.VideoFrame_pYUV420PText_get
    if _newclass:
        pYUV420PText = _swig_property(_EE.VideoFrame_pYUV420PText_get, _EE.VideoFrame_pYUV420PText_set)

    def __init__(self, owner, h, w):
        this = _EE.new_VideoFrame(owner, h, w)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_VideoFrame
    __del__ = lambda self: None
VideoFrame_swigregister = _EE.VideoFrame_swigregister
VideoFrame_swigregister(VideoFrame)

class SubFrame(SynchData):
    __swig_setmethods__ = {}
    for _s in [SynchData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubFrame, name, value)
    __swig_getmethods__ = {}
    for _s in [SynchData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubFrame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["subtitle"] = _EE.SubFrame_subtitle_set
    __swig_getmethods__["subtitle"] = _EE.SubFrame_subtitle_get
    if _newclass:
        subtitle = _swig_property(_EE.SubFrame_subtitle_get, _EE.SubFrame_subtitle_set)
    __swig_setmethods__["rect"] = _EE.SubFrame_rect_set
    __swig_getmethods__["rect"] = _EE.SubFrame_rect_get
    if _newclass:
        rect = _swig_property(_EE.SubFrame_rect_get, _EE.SubFrame_rect_set)
    __swig_setmethods__["beg_time"] = _EE.SubFrame_beg_time_set
    __swig_getmethods__["beg_time"] = _EE.SubFrame_beg_time_get
    if _newclass:
        beg_time = _swig_property(_EE.SubFrame_beg_time_get, _EE.SubFrame_beg_time_set)

    def __init__(self):
        this = _EE.new_SubFrame()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_SubFrame
    __del__ = lambda self: None
SubFrame_swigregister = _EE.SubFrame_swigregister
SubFrame_swigregister(SubFrame)

class SoundChunk(SynchData):
    __swig_setmethods__ = {}
    for _s in [SynchData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [SynchData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoundChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _EE.SoundChunk_size_set
    __swig_getmethods__["size"] = _EE.SoundChunk_size_get
    if _newclass:
        size = _swig_property(_EE.SoundChunk_size_get, _EE.SoundChunk_size_set)
    __swig_setmethods__["chunk"] = _EE.SoundChunk_chunk_set
    __swig_getmethods__["chunk"] = _EE.SoundChunk_chunk_get
    if _newclass:
        chunk = _swig_property(_EE.SoundChunk_chunk_get, _EE.SoundChunk_chunk_set)

    def __init__(self):
        this = _EE.new_SoundChunk()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_SoundChunk
    __del__ = lambda self: None
SoundChunk_swigregister = _EE.SoundChunk_swigregister
SoundChunk_swigregister(SoundChunk)

class VideoPlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoPlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoPlayer, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_VideoPlayer(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_VideoPlayer
    __del__ = lambda self: None

    def initVideoSys(self):
        return _EE.VideoPlayer_initVideoSys(self)

    def LoadVideoFile(self, file):
        return _EE.VideoPlayer_LoadVideoFile(self, file)

    def PlayVideo(self):
        return _EE.VideoPlayer_PlayVideo(self)

    def StopVideo(self):
        return _EE.VideoPlayer_StopVideo(self)

    def UpdateVideo(self):
        return _EE.VideoPlayer_UpdateVideo(self)

    def DrawVideo(self):
        return _EE.VideoPlayer_DrawVideo(self)

    def GetVideoT(self):
        return _EE.VideoPlayer_GetVideoT(self)

    def isSubtitled(self):
        return _EE.VideoPlayer_isSubtitled(self)

    def isPlayingVideo(self):
        return _EE.VideoPlayer_isPlayingVideo(self)

    def InitVideoSystem(self):
        return _EE.VideoPlayer_InitVideoSystem(self)
VideoPlayer_swigregister = _EE.VideoPlayer_swigregister
VideoPlayer_swigregister(VideoPlayer)

class CursorNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CursorNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CursorNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _EE.CursorNode_name_set
    __swig_getmethods__["name"] = _EE.CursorNode_name_get
    if _newclass:
        name = _swig_property(_EE.CursorNode_name_get, _EE.CursorNode_name_set)
    __swig_setmethods__["soundFile"] = _EE.CursorNode_soundFile_set
    __swig_getmethods__["soundFile"] = _EE.CursorNode_soundFile_get
    if _newclass:
        soundFile = _swig_property(_EE.CursorNode_soundFile_get, _EE.CursorNode_soundFile_set)
    __swig_setmethods__["id"] = _EE.CursorNode_id_set
    __swig_getmethods__["id"] = _EE.CursorNode_id_get
    if _newclass:
        id = _swig_property(_EE.CursorNode_id_get, _EE.CursorNode_id_set)
    __swig_setmethods__["cursor"] = _EE.CursorNode_cursor_set
    __swig_getmethods__["cursor"] = _EE.CursorNode_cursor_get
    if _newclass:
        cursor = _swig_property(_EE.CursorNode_cursor_get, _EE.CursorNode_cursor_set)

    def __init__(self):
        this = _EE.new_CursorNode()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_CursorNode
    __del__ = lambda self: None
CursorNode_swigregister = _EE.CursorNode_swigregister
CursorNode_swigregister(CursorNode)

class Cursor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cursor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cursor, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_Cursor(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Cursor
    __del__ = lambda self: None

    def initCursorSys(self):
        return _EE.Cursor_initCursorSys(self)

    def RegisterCursor(self, file):
        return _EE.Cursor_RegisterCursor(self, file)

    def RemoveCursor(self, id):
        return _EE.Cursor_RemoveCursor(self, id)

    def LoadCursors(self, file):
        return _EE.Cursor_LoadCursors(self, file)

    def ChangeToCursor(self, id):
        return _EE.Cursor_ChangeToCursor(self, id)

    def ToggleMouseGrab(self):
        return _EE.Cursor_ToggleMouseGrab(self)

    def DrawCursor(self):
        return _EE.Cursor_DrawCursor(self)

    def PlayCursorSound(self):
        return _EE.Cursor_PlayCursorSound(self)
Cursor_swigregister = _EE.Cursor_swigregister
Cursor_swigregister(Cursor)

class raw_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, raw_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, raw_input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventType"] = _EE.raw_input_eventType_set
    __swig_getmethods__["eventType"] = _EE.raw_input_eventType_get
    if _newclass:
        eventType = _swig_property(_EE.raw_input_eventType_get, _EE.raw_input_eventType_set)
    __swig_setmethods__["type"] = _EE.raw_input_type_set
    __swig_getmethods__["type"] = _EE.raw_input_type_get
    if _newclass:
        type = _swig_property(_EE.raw_input_type_get, _EE.raw_input_type_set)
    __swig_setmethods__["state"] = _EE.raw_input_state_set
    __swig_getmethods__["state"] = _EE.raw_input_state_get
    if _newclass:
        state = _swig_property(_EE.raw_input_state_get, _EE.raw_input_state_set)
    __swig_setmethods__["mx"] = _EE.raw_input_mx_set
    __swig_getmethods__["mx"] = _EE.raw_input_mx_get
    if _newclass:
        mx = _swig_property(_EE.raw_input_mx_get, _EE.raw_input_mx_set)
    __swig_setmethods__["my"] = _EE.raw_input_my_set
    __swig_getmethods__["my"] = _EE.raw_input_my_get
    if _newclass:
        my = _swig_property(_EE.raw_input_my_get, _EE.raw_input_my_set)
    __swig_setmethods__["mx2"] = _EE.raw_input_mx2_set
    __swig_getmethods__["mx2"] = _EE.raw_input_mx2_get
    if _newclass:
        mx2 = _swig_property(_EE.raw_input_mx2_get, _EE.raw_input_mx2_set)
    __swig_setmethods__["my2"] = _EE.raw_input_my2_set
    __swig_getmethods__["my2"] = _EE.raw_input_my2_get
    if _newclass:
        my2 = _swig_property(_EE.raw_input_my2_get, _EE.raw_input_my2_set)
    __swig_setmethods__["mb"] = _EE.raw_input_mb_set
    __swig_getmethods__["mb"] = _EE.raw_input_mb_get
    if _newclass:
        mb = _swig_property(_EE.raw_input_mb_get, _EE.raw_input_mb_set)
    __swig_setmethods__["clicks"] = _EE.raw_input_clicks_set
    __swig_getmethods__["clicks"] = _EE.raw_input_clicks_get
    if _newclass:
        clicks = _swig_property(_EE.raw_input_clicks_get, _EE.raw_input_clicks_set)
    __swig_setmethods__["txt_editing_len"] = _EE.raw_input_txt_editing_len_set
    __swig_getmethods__["txt_editing_len"] = _EE.raw_input_txt_editing_len_get
    if _newclass:
        txt_editing_len = _swig_property(_EE.raw_input_txt_editing_len_get, _EE.raw_input_txt_editing_len_set)
    __swig_setmethods__["key"] = _EE.raw_input_key_set
    __swig_getmethods__["key"] = _EE.raw_input_key_get
    if _newclass:
        key = _swig_property(_EE.raw_input_key_get, _EE.raw_input_key_set)
    __swig_setmethods__["winID"] = _EE.raw_input_winID_set
    __swig_getmethods__["winID"] = _EE.raw_input_winID_get
    if _newclass:
        winID = _swig_property(_EE.raw_input_winID_get, _EE.raw_input_winID_set)
    __swig_setmethods__["pressure"] = _EE.raw_input_pressure_set
    __swig_getmethods__["pressure"] = _EE.raw_input_pressure_get
    if _newclass:
        pressure = _swig_property(_EE.raw_input_pressure_get, _EE.raw_input_pressure_set)
    __swig_setmethods__["tx"] = _EE.raw_input_tx_set
    __swig_getmethods__["tx"] = _EE.raw_input_tx_get
    if _newclass:
        tx = _swig_property(_EE.raw_input_tx_get, _EE.raw_input_tx_set)
    __swig_setmethods__["ty"] = _EE.raw_input_ty_set
    __swig_getmethods__["ty"] = _EE.raw_input_ty_get
    if _newclass:
        ty = _swig_property(_EE.raw_input_ty_get, _EE.raw_input_ty_set)
    __swig_setmethods__["tdx"] = _EE.raw_input_tdx_set
    __swig_getmethods__["tdx"] = _EE.raw_input_tdx_get
    if _newclass:
        tdx = _swig_property(_EE.raw_input_tdx_get, _EE.raw_input_tdx_set)
    __swig_setmethods__["tdy"] = _EE.raw_input_tdy_set
    __swig_getmethods__["tdy"] = _EE.raw_input_tdy_get
    if _newclass:
        tdy = _swig_property(_EE.raw_input_tdy_get, _EE.raw_input_tdy_set)
    __swig_setmethods__["txtBuffer"] = _EE.raw_input_txtBuffer_set
    __swig_getmethods__["txtBuffer"] = _EE.raw_input_txtBuffer_get
    if _newclass:
        txtBuffer = _swig_property(_EE.raw_input_txtBuffer_get, _EE.raw_input_txtBuffer_set)
    __swig_setmethods__["txtEditing"] = _EE.raw_input_txtEditing_set
    __swig_getmethods__["txtEditing"] = _EE.raw_input_txtEditing_get
    if _newclass:
        txtEditing = _swig_property(_EE.raw_input_txtEditing_get, _EE.raw_input_txtEditing_set)

    def __init__(self):
        this = _EE.new_raw_input()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_raw_input
    __del__ = lambda self: None
raw_input_swigregister = _EE.raw_input_swigregister
raw_input_swigregister(raw_input)

class KeyNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _EE.KeyNode_key_set
    __swig_getmethods__["key"] = _EE.KeyNode_key_get
    if _newclass:
        key = _swig_property(_EE.KeyNode_key_get, _EE.KeyNode_key_set)
    __swig_setmethods__["val"] = _EE.KeyNode_val_set
    __swig_getmethods__["val"] = _EE.KeyNode_val_get
    if _newclass:
        val = _swig_property(_EE.KeyNode_val_get, _EE.KeyNode_val_set)

    def __init__(self, *args):
        this = _EE.new_KeyNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_KeyNode
    __del__ = lambda self: None
KeyNode_swigregister = _EE.KeyNode_swigregister
KeyNode_swigregister(KeyNode)


_EE.TEXTINPUT_swigconstant(_EE)
TEXTINPUT = _EE.TEXTINPUT

_EE.KEYBOARD_swigconstant(_EE)
KEYBOARD = _EE.KEYBOARD

_EE.MOUSE_swigconstant(_EE)
MOUSE = _EE.MOUSE

_EE.TOUCH_swigconstant(_EE)
TOUCH = _EE.TOUCH

_EE.CONTROLLER_swigconstant(_EE)
CONTROLLER = _EE.CONTROLLER

_EE.MOUSEMOTION_swigconstant(_EE)
MOUSEMOTION = _EE.MOUSEMOTION
class InputMouse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputMouse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputMouse, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EE.new_InputMouse()
        try:
            self.this.append(this)
        except:
            self.this = this

    def ChangeCoordinates(self, x, y, z=0):
        return _EE.InputMouse_ChangeCoordinates(self, x, y, z)

    def GetCoordinates(self):
        return _EE.InputMouse_GetCoordinates(self)
    __swig_destroy__ = _EE.delete_InputMouse
    __del__ = lambda self: None
InputMouse_swigregister = _EE.InputMouse_swigregister
InputMouse_swigregister(InputMouse)

class InputKeyboard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputKeyboard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputKeyboard, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EE.new_InputKeyboard()
        try:
            self.this.append(this)
        except:
            self.this = this

    def feedBuffer(self, buffer):
        return _EE.InputKeyboard_feedBuffer(self, buffer)

    def toggleTextMode(self):
        return _EE.InputKeyboard_toggleTextMode(self)

    def getText(self):
        return _EE.InputKeyboard_getText(self)

    def GetTextMode(self):
        return _EE.InputKeyboard_GetTextMode(self)

    def StartTextInput(self):
        return _EE.InputKeyboard_StartTextInput(self)

    def StopTextInput(self):
        return _EE.InputKeyboard_StopTextInput(self)
    __swig_destroy__ = _EE.delete_InputKeyboard
    __del__ = lambda self: None
InputKeyboard_swigregister = _EE.InputKeyboard_swigregister
InputKeyboard_swigregister(InputKeyboard)

class Input(InputMouse, InputKeyboard):
    __swig_setmethods__ = {}
    for _s in [InputMouse, InputKeyboard]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Input, name, value)
    __swig_getmethods__ = {}
    for _s in [InputMouse, InputKeyboard]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Input, name)
    __repr__ = _swig_repr

    def __init__(self, owner):
        this = _EE.new_Input(owner)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Input
    __del__ = lambda self: None

    def LoadKeyScript(self, file):
        return _EE.Input_LoadKeyScript(self, file)

    def LoadDefaultKeyBindings(self, file):
        return _EE.Input_LoadDefaultKeyBindings(self, file)

    def LoadCurrentKeyBindings(self, db_id):
        return _EE.Input_LoadCurrentKeyBindings(self, db_id)

    def UpdateInput(self, pEvent):
        return _EE.Input_UpdateInput(self, pEvent)

    def ProcessUIInput(self, bt, txt):
        return _EE.Input_ProcessUIInput(self, bt, txt)

    def ProcessUnitInput(self, unit):
        return _EE.Input_ProcessUnitInput(self, unit)

    def ChangeKeyBinding(self, previousKey, newKey):
        return _EE.Input_ChangeKeyBinding(self, previousKey, newKey)

    def SaveKeyBindings(self, db_id):
        return _EE.Input_SaveKeyBindings(self, db_id)

    def GetRawInput(self):
        return _EE.Input_GetRawInput(self)

    def GetKeyName(self, key):
        return _EE.Input_GetKeyName(self, key)
Input_swigregister = _EE.Input_swigregister
Input_swigregister(Input)

class Game(ThreadSystem, GameInfo, ModuleSystem, UnitManager, IOManager, UIManager, NetworkManager, TriggerManager, LayerSystem, Cursor, TimerSystem, VideoPlayer, Input, SoundQueue, ParticleSystem):
    __swig_setmethods__ = {}
    for _s in [ThreadSystem, GameInfo, ModuleSystem, UnitManager, IOManager, UIManager, NetworkManager, TriggerManager, LayerSystem, Cursor, TimerSystem, VideoPlayer, Input, SoundQueue, ParticleSystem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Game, name, value)
    __swig_getmethods__ = {}
    for _s in [ThreadSystem, GameInfo, ModuleSystem, UnitManager, IOManager, UIManager, NetworkManager, TriggerManager, LayerSystem, Cursor, TimerSystem, VideoPlayer, Input, SoundQueue, ParticleSystem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Game, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _EE.new_Game(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _EE.delete_Game
    __del__ = lambda self: None

    def LoadGame(self, file):
        return _EE.Game_LoadGame(self, file)

    def LoadGameConstants(self, file, hasdb=False):
        return _EE.Game_LoadGameConstants(self, file, hasdb)

    def LoadGlobalModules(self, file):
        return _EE.Game_LoadGlobalModules(self, file)

    def LoadUIs(self, file):
        return _EE.Game_LoadUIs(self, file)

    def initEditorFrameBuffer(self):
        return _EE.Game_initEditorFrameBuffer(self)

    def init(self):
        return _EE.Game_init(self)

    def initSubSys(self):
        return _EE.Game_initSubSys(self)

    def loadLevel(self, file):
        return _EE.Game_loadLevel(self, file)

    def GetCurrentLevel(self):
        return _EE.Game_GetCurrentLevel(self)

    def SetHeroIDForCurrentLevel(self, h_id):
        return _EE.Game_SetHeroIDForCurrentLevel(self, h_id)

    def SetHeroUnitAsLoaded(self):
        return _EE.Game_SetHeroUnitAsLoaded(self)

    def UnsetHeroUnitAsLoaded(self):
        return _EE.Game_UnsetHeroUnitAsLoaded(self)

    def GetRenderer(self, game_mutex):
        return _EE.Game_GetRenderer(self, game_mutex)

    def GetEvents(self):
        return _EE.Game_GetEvents(self)

    def GetMainTimer(self):
        return _EE.Game_GetMainTimer(self)

    def GetHeroID(self):
        return _EE.Game_GetHeroID(self)

    def isMultithreaded(self):
        return _EE.Game_isMultithreaded(self)

    def isGamePaused(self):
        return _EE.Game_isGamePaused(self)

    def GetRelativity(self):
        return _EE.Game_GetRelativity(self)

    def isEngineClosing(self):
        return _EE.Game_isEngineClosing(self)

    def noHero(self):
        return _EE.Game_noHero(self)

    def GetFrameBuffer(self):
        return _EE.Game_GetFrameBuffer(self)

    def GetSizeOfFrameBuffer(self):
        return _EE.Game_GetSizeOfFrameBuffer(self)

    def GetWinID(self):
        return _EE.Game_GetWinID(self)

    def PauseGame(self):
        return _EE.Game_PauseGame(self)

    def ResumeGame(self):
        return _EE.Game_ResumeGame(self)

    def LoadSaveData(self, file):
        return _EE.Game_LoadSaveData(self, file)

    def SaveData(self, query):
        return _EE.Game_SaveData(self, query)

    def SaveGameSettings(self):
        return _EE.Game_SaveGameSettings(self)

    def GetSaveDataHandle(self):
        return _EE.Game_GetSaveDataHandle(self)

    def FrameCapper(self):
        return _EE.Game_FrameCapper(self)

    def ClearEditorFrameBuffer(self):
        return _EE.Game_ClearEditorFrameBuffer(self)

    def RestartRenderer(self):
        return _EE.Game_RestartRenderer(self)

    def RestartVideoAndSound(self):
        return _EE.Game_RestartVideoAndSound(self)

    def RestartAudio(self):
        return _EE.Game_RestartAudio(self)

    def RestartVideo(self):
        return _EE.Game_RestartVideo(self)

    def UnlockRenderer(self, mutex_id):
        return _EE.Game_UnlockRenderer(self, mutex_id)

    def drawWorld(self):
        return _EE.Game_drawWorld(self)

    def playSounds(self):
        return _EE.Game_playSounds(self)

    def runPhysics(self):
        return _EE.Game_runPhysics(self)

    def run(self):
        return _EE.Game_run(self)

    def stopGame(self):
        return _EE.Game_stopGame(self)

    def mainGC(self):
        return _EE.Game_mainGC(self)

    def ShowLoadingScreen(self):
        return _EE.Game_ShowLoadingScreen(self)

    def UpdateLoadingStatus(self, value):
        return _EE.Game_UpdateLoadingStatus(self, value)

    def HideLoadingScreen(self):
        return _EE.Game_HideLoadingScreen(self)

    def ReplaceLoadingScreen(self, file):
        return _EE.Game_ReplaceLoadingScreen(self, file)

    def ShowMainMenu(self):
        return _EE.Game_ShowMainMenu(self)

    def HideMainMenu(self):
        return _EE.Game_HideMainMenu(self)

    def ReplaceMainMenu(self, file):
        return _EE.Game_ReplaceMainMenu(self, file)

    def ShowHUD(self):
        return _EE.Game_ShowHUD(self)

    def HideHUD(self):
        return _EE.Game_HideHUD(self)

    def ReplaceHUD(self, file):
        return _EE.Game_ReplaceHUD(self, file)

    def ShowVideoHUD(self):
        return _EE.Game_ShowVideoHUD(self)

    def HideVideoHUD(self):
        return _EE.Game_HideVideoHUD(self)

    def ReplaceVideoHUD(self, file):
        return _EE.Game_ReplaceVideoHUD(self, file)

    def ShowWindow(self, visible):
        return _EE.Game_ShowWindow(self, visible)
    __swig_getmethods__["loadRate"] = _EE.Game_loadRate_get
    if _newclass:
        loadRate = _swig_property(_EE.Game_loadRate_get)
    __swig_getmethods__["WINDOW_WIDTH"] = _EE.Game_WINDOW_WIDTH_get
    if _newclass:
        WINDOW_WIDTH = _swig_property(_EE.Game_WINDOW_WIDTH_get)
    __swig_getmethods__["WINDOW_HEIGHT"] = _EE.Game_WINDOW_HEIGHT_get
    if _newclass:
        WINDOW_HEIGHT = _swig_property(_EE.Game_WINDOW_HEIGHT_get)
    __swig_getmethods__["FRAME_FORMAT_SIZE"] = _EE.Game_FRAME_FORMAT_SIZE_get
    if _newclass:
        FRAME_FORMAT_SIZE = _swig_property(_EE.Game_FRAME_FORMAT_SIZE_get)
    __swig_getmethods__["FRAME_FORMAT"] = _EE.Game_FRAME_FORMAT_get
    if _newclass:
        FRAME_FORMAT = _swig_property(_EE.Game_FRAME_FORMAT_get)
Game_swigregister = _EE.Game_swigregister
Game_swigregister(Game)


def helperDrawFunction(game):
    return _EE.helperDrawFunction(game)
helperDrawFunction = _EE.helperDrawFunction

def helperSoundFunction(game):
    return _EE.helperSoundFunction(game)
helperSoundFunction = _EE.helperSoundFunction

def helperPhysicsFunction(game):
    return _EE.helperPhysicsFunction(game)
helperPhysicsFunction = _EE.helperPhysicsFunction

def helperEventsFunction(game):
    return _EE.helperEventsFunction(game)
helperEventsFunction = _EE.helperEventsFunction

def helperGCFunction(game):
    return _EE.helperGCFunction(game)
helperGCFunction = _EE.helperGCFunction

def helperPluginFunction(obj):
    return _EE.helperPluginFunction(obj)
helperPluginFunction = _EE.helperPluginFunction

def helperUpdateFunction(game):
    return _EE.helperUpdateFunction(game)
helperUpdateFunction = _EE.helperUpdateFunction
# This file is compatible with both classic and new-style classes.


