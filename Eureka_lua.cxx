/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
<<<<<<< HEAD
 * Version 2.0.11
=======
 * Version 3.0.5
>>>>>>> TheIllusiveMan
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
<<<<<<< HEAD
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
=======
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
>>>>>>> TheIllusiveMan
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
<<<<<<< HEAD
      register size_t i = 0;
=======
      size_t i = 0;
>>>>>>> TheIllusiveMan
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
<<<<<<< HEAD
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
=======
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
>>>>>>> TheIllusiveMan
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
<<<<<<< HEAD
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
=======
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
>>>>>>> TheIllusiveMan
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

<<<<<<< HEAD
=======
#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

>>>>>>> TheIllusiveMan
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
<<<<<<< HEAD
=======
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
>>>>>>> TheIllusiveMan
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
<<<<<<< HEAD
#endif

=======
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
>>>>>>> TheIllusiveMan
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
<<<<<<< HEAD

=======
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
>>>>>>> TheIllusiveMan
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

<<<<<<< HEAD
=======
/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif
>>>>>>> TheIllusiveMan

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

<<<<<<< HEAD
=======
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

>>>>>>> TheIllusiveMan
/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

<<<<<<< HEAD
typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;
=======
#endif
>>>>>>> TheIllusiveMan

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

<<<<<<< HEAD
// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
=======

struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
>>>>>>> TheIllusiveMan
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
<<<<<<< HEAD
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
=======
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
>>>>>>> TheIllusiveMan
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
<<<<<<< HEAD
  swig_lua_namespace    cls_static;
=======
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
>>>>>>> TheIllusiveMan
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

<<<<<<< HEAD
=======
#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

>>>>>>> TheIllusiveMan
/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
<<<<<<< HEAD
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
=======
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
>>>>>>> TheIllusiveMan
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
<<<<<<< HEAD
SWIG_Lua_GetModule(lua_State* L) {
=======
SWIG_Lua_GetModule(lua_State *L) {
>>>>>>> TheIllusiveMan
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
<<<<<<< HEAD
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
=======
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
>>>>>>> TheIllusiveMan
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
<<<<<<< HEAD
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
=======
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
>>>>>>> TheIllusiveMan
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

<<<<<<< HEAD
/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
=======
#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
>>>>>>> TheIllusiveMan
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

<<<<<<< HEAD
SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
=======
SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
>>>>>>> TheIllusiveMan
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
<<<<<<< HEAD
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

=======
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
>>>>>>> TheIllusiveMan
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
<<<<<<< HEAD
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
=======
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
>>>>>>> TheIllusiveMan
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
<<<<<<< HEAD
  lua_rawset(L,-3); /* add namespace to module table */
}
=======

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

>>>>>>> TheIllusiveMan
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

<<<<<<< HEAD
/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
=======
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
>>>>>>> TheIllusiveMan
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
<<<<<<< HEAD
=======
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
>>>>>>> TheIllusiveMan
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
<<<<<<< HEAD
  lua_pushvalue(L,2);  /* key */
=======
  lua_pushvalue(L,substack_start+2);  /* key */
>>>>>>> TheIllusiveMan
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
<<<<<<< HEAD
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
=======
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
>>>>>>> TheIllusiveMan
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
<<<<<<< HEAD
    return 1;
=======
    if(ret)
      *ret = 1;
    return SWIG_OK;
>>>>>>> TheIllusiveMan
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
<<<<<<< HEAD
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
=======
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
>>>>>>> TheIllusiveMan
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
<<<<<<< HEAD
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
=======
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */
>>>>>>> TheIllusiveMan

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
<<<<<<< HEAD
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
=======
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
>>>>>>> TheIllusiveMan
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
<<<<<<< HEAD
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
=======
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
>>>>>>> TheIllusiveMan
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
<<<<<<< HEAD
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
=======
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
>>>>>>> TheIllusiveMan
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
<<<<<<< HEAD
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
=======
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
>>>>>>> TheIllusiveMan
  return 1;
}

/* to manually disown some userdata */
<<<<<<< HEAD
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
=======
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
>>>>>>> TheIllusiveMan
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

<<<<<<< HEAD
/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
=======
/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
>>>>>>> TheIllusiveMan
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
<<<<<<< HEAD
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
=======
    SWIG_Lua_create_class_registry(L);
>>>>>>> TheIllusiveMan
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

<<<<<<< HEAD
/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
=======
SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
>>>>>>> TheIllusiveMan
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

<<<<<<< HEAD
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
=======
/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
>>>>>>> TheIllusiveMan
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
<<<<<<< HEAD
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
=======
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
>>>>>>> TheIllusiveMan
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

<<<<<<< HEAD
  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
=======
  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
>>>>>>> TheIllusiveMan
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
<<<<<<< HEAD
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
=======
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

>>>>>>> TheIllusiveMan
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
<<<<<<< HEAD
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
=======
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
>>>>>>> TheIllusiveMan
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
<<<<<<< HEAD
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
=======
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
>>>>>>> TheIllusiveMan
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
<<<<<<< HEAD
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}
=======
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */
>>>>>>> TheIllusiveMan

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
<<<<<<< HEAD
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
=======
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
>>>>>>> TheIllusiveMan
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
<<<<<<< HEAD
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
=======
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
>>>>>>> TheIllusiveMan
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
<<<<<<< HEAD
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
=======
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
>>>>>>> TheIllusiveMan
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
<<<<<<< HEAD
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
=======
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
>>>>>>> TheIllusiveMan
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

<<<<<<< HEAD
SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
=======
SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
>>>>>>> TheIllusiveMan
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
<<<<<<< HEAD
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
=======
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
>>>>>>> TheIllusiveMan
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
<<<<<<< HEAD
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
=======
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
>>>>>>> TheIllusiveMan
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
<<<<<<< HEAD
  swig_lua_userdata* usr;
=======
  swig_lua_userdata *usr;
>>>>>>> TheIllusiveMan
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
<<<<<<< HEAD
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
=======
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
>>>>>>> TheIllusiveMan
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

<<<<<<< HEAD
/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

=======
>>>>>>> TheIllusiveMan
/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
<<<<<<< HEAD
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
=======
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
>>>>>>> TheIllusiveMan
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
<<<<<<< HEAD
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
=======
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
>>>>>>> TheIllusiveMan
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

<<<<<<< HEAD

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Button swig_types[0]
#define SWIGTYPE_p_Physics swig_types[1]
#define SWIGTYPE_p_ProgressBar swig_types[2]
#define SWIGTYPE_p_SDL_BlendMode swig_types[3]
#define SWIGTYPE_p_SDL_Event swig_types[4]
#define SWIGTYPE_p_SDL_Renderer swig_types[5]
#define SWIGTYPE_p_SDL_Texture swig_types[6]
#define SWIGTYPE_p_ScriptWrap swig_types[7]
#define SWIGTYPE_p_Timer swig_types[8]
#define SWIGTYPE_p_Trigger swig_types[9]
#define SWIGTYPE_p_UI swig_types[10]
#define SWIGTYPE_p_Uint8 swig_types[11]
#define SWIGTYPE_p_Unit swig_types[12]
#define SWIGTYPE_p_bool swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_data_base swig_types[15]
#define SWIGTYPE_p_draw_base swig_types[16]
#define SWIGTYPE_p_inputKeyboard swig_types[17]
#define SWIGTYPE_p_inputMouse swig_types[18]
#define SWIGTYPE_p_int swig_types[19]
#define SWIGTYPE_p_math_VECTOR swig_types[20]
#define SWIGTYPE_p_math_point swig_types[21]
#define SWIGTYPE_p_pChar swig_types[22]
#define SWIGTYPE_p_psudo_type swig_types[23]
#define SWIGTYPE_p_sound_base swig_types[24]
#define SWIGTYPE_p_std__stackT_psudo_type_t swig_types[25]
#define SWIGTYPE_p_std__string swig_types[26]
#define SWIGTYPE_p_std__vectorT_psudo_type_t swig_types[27]
#define SWIGTYPE_p_textbox swig_types[28]
#define SWIGTYPE_p_unsigned_char swig_types[29]
#define SWIGTYPE_p_void_ptr swig_types[30]
static swig_type_info *swig_types[32];
static swig_module_info swig_module = {swig_types, 31, 0, 0, 0, 0};
=======
/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AIStore swig_types[0]
#define SWIGTYPE_p_Button swig_types[1]
#define SWIGTYPE_p_Cursor swig_types[2]
#define SWIGTYPE_p_CursorNode swig_types[3]
#define SWIGTYPE_p_DataBase swig_types[4]
#define SWIGTYPE_p_ExpansionInfo swig_types[5]
#define SWIGTYPE_p_ExpansionItem swig_types[6]
#define SWIGTYPE_p_Game swig_types[7]
#define SWIGTYPE_p_GameInfo swig_types[8]
#define SWIGTYPE_p_IOManager swig_types[9]
#define SWIGTYPE_p_IONode swig_types[10]
#define SWIGTYPE_p_IPaddress swig_types[11]
#define SWIGTYPE_p_Input swig_types[12]
#define SWIGTYPE_p_InputKeyboard swig_types[13]
#define SWIGTYPE_p_InputMouse swig_types[14]
#define SWIGTYPE_p_KeyNode swig_types[15]
#define SWIGTYPE_p_Layer swig_types[16]
#define SWIGTYPE_p_LayerSystem swig_types[17]
#define SWIGTYPE_p_Level swig_types[18]
#define SWIGTYPE_p_LocaleInfo swig_types[19]
#define SWIGTYPE_p_LocaleItem swig_types[20]
#define SWIGTYPE_p_LocaleNode swig_types[21]
#define SWIGTYPE_p_LocaleReader swig_types[22]
#define SWIGTYPE_p_ModAdapter swig_types[23]
#define SWIGTYPE_p_ModuleNode swig_types[24]
#define SWIGTYPE_p_ModuleSystem swig_types[25]
#define SWIGTYPE_p_NetNode swig_types[26]
#define SWIGTYPE_p_NetworkManager swig_types[27]
#define SWIGTYPE_p_Particle swig_types[28]
#define SWIGTYPE_p_ParticleCluster swig_types[29]
#define SWIGTYPE_p_ParticleNode swig_types[30]
#define SWIGTYPE_p_ParticleSystem swig_types[31]
#define SWIGTYPE_p_Physics swig_types[32]
#define SWIGTYPE_p_Range swig_types[33]
#define SWIGTYPE_p_Resolution swig_types[34]
#define SWIGTYPE_p_SDL_BlendMode swig_types[35]
#define SWIGTYPE_p_SDL_Event swig_types[36]
#define SWIGTYPE_p_SDL_Rect swig_types[37]
#define SWIGTYPE_p_SDL_Renderer swig_types[38]
#define SWIGTYPE_p_SDL_Scancode swig_types[39]
#define SWIGTYPE_p_SDL_Texture swig_types[40]
#define SWIGTYPE_p_SQLGenerator swig_types[41]
#define SWIGTYPE_p_SWIGCDATA swig_types[42]
#define SWIGTYPE_p_ScreenInfo swig_types[43]
#define SWIGTYPE_p_ScriptWrap swig_types[44]
#define SWIGTYPE_p_SoundChunk swig_types[45]
#define SWIGTYPE_p_SoundInfo swig_types[46]
#define SWIGTYPE_p_SoundQueue swig_types[47]
#define SWIGTYPE_p_SubFrame swig_types[48]
#define SWIGTYPE_p_SynchData swig_types[49]
#define SWIGTYPE_p_TCPClient swig_types[50]
#define SWIGTYPE_p_TCPsocket swig_types[51]
#define SWIGTYPE_p_TextureNode swig_types[52]
#define SWIGTYPE_p_TextureStore swig_types[53]
#define SWIGTYPE_p_ThreadSystem swig_types[54]
#define SWIGTYPE_p_Timer swig_types[55]
#define SWIGTYPE_p_TimerSystem swig_types[56]
#define SWIGTYPE_p_Trigger swig_types[57]
#define SWIGTYPE_p_TriggerManager swig_types[58]
#define SWIGTYPE_p_UDPClient swig_types[59]
#define SWIGTYPE_p_UDPsocket swig_types[60]
#define SWIGTYPE_p_UI swig_types[61]
#define SWIGTYPE_p_UIManager swig_types[62]
#define SWIGTYPE_p_Uint8 swig_types[63]
#define SWIGTYPE_p_Unit swig_types[64]
#define SWIGTYPE_p_UnitManager swig_types[65]
#define SWIGTYPE_p_UnitNode swig_types[66]
#define SWIGTYPE_p_VideoFrame swig_types[67]
#define SWIGTYPE_p_VideoPlayer swig_types[68]
#define SWIGTYPE_p_bool swig_types[69]
#define SWIGTYPE_p_char swig_types[70]
#define SWIGTYPE_p_data_base swig_types[71]
#define SWIGTYPE_p_double swig_types[72]
#define SWIGTYPE_p_draw_base swig_types[73]
#define SWIGTYPE_p_f_p_void__p_void swig_types[74]
#define SWIGTYPE_p_int swig_types[75]
#define SWIGTYPE_p_math_VECTOR swig_types[76]
#define SWIGTYPE_p_math_point swig_types[77]
#define SWIGTYPE_p_pChar swig_types[78]
#define SWIGTYPE_p_p_ParticleNode swig_types[79]
#define SWIGTYPE_p_p_char swig_types[80]
#define SWIGTYPE_p_psudo_type swig_types[81]
#define SWIGTYPE_p_pthread_cond_t swig_types[82]
#define SWIGTYPE_p_pthread_mutex_t swig_types[83]
#define SWIGTYPE_p_pthreads_opaqueT_pthread_cond_t_t swig_types[84]
#define SWIGTYPE_p_pthreads_opaqueT_pthread_mutex_t_t swig_types[85]
#define SWIGTYPE_p_pthreads_opaqueT_pthread_t_p_t swig_types[86]
#define SWIGTYPE_p_raw_input swig_types[87]
#define SWIGTYPE_p_size_t swig_types[88]
#define SWIGTYPE_p_std__listT_size_t_t swig_types[89]
#define SWIGTYPE_p_std__mapT_unsigned_short_std__string_t swig_types[90]
#define SWIGTYPE_p_std__string swig_types[91]
#define SWIGTYPE_p_std__vectorT_psudo_type_t swig_types[92]
#define SWIGTYPE_p_std__vectorT_size_t_t swig_types[93]
#define SWIGTYPE_p_textbox swig_types[94]
#define SWIGTYPE_p_unsigned_char swig_types[95]
#define SWIGTYPE_p_unsigned_short swig_types[96]
#define SWIGTYPE_p_void swig_types[97]
static swig_type_info *swig_types[99];
static swig_module_info swig_module = {swig_types, 98, 0, 0, 0, 0};
>>>>>>> TheIllusiveMan
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

<<<<<<< HEAD
#define SWIG_name      "Eureka"
#define SWIG_init      luaopen_Eureka
#define SWIG_init_user luaopen_Eureka_user

#define SWIG_LUACODE   luaopen_Eureka_luacode
=======
#define SWIG_name      "EE"
#define SWIG_init      luaopen_EE
#define SWIG_init_user luaopen_EE_user

#define SWIG_LUACODE   luaopen_EE_luacode
>>>>>>> TheIllusiveMan

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


<<<<<<< HEAD
=======
typedef struct SWIGCDATA {
    char *data;
    int   len;
} SWIGCDATA;



/*@SWIG:..\..\Eureka_lua.i,4,static@*/
/*@SWIG@*/ SWIGCDATA cdata_void(void *ptr, int nelements) {




   SWIGCDATA d;
   d.data = (char *) ptr;



   d.len  = nelements;

   return d;
}


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <vector>


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include "rand_generators.h"
#include "sqlkeywords.h"
>>>>>>> TheIllusiveMan
#include "physics.h"
#include "data_base.h"
#include "draw_base.h"
#include "ui.h"
#include "unit.h"
<<<<<<< HEAD
#include "textbox.h"
#include "button.h"
#include "trigger.h"
#include "sound_baseB.h"
#include "Timer.h"
#include "progressbar.h"
#include "globals.h"
#include "conversion.h"
#include "input.h"
#include "scriptwrap.h"
#include "plugin.h"
#include "game.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_math_VECTOR_endX_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::endX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endX",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::endX",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endX_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->endX = arg2;
  
=======
#include "trigger.h"
#include "Timer.h"
#include "database.h"
#include "typedefs.h"
#include "conversion.h"
#include "modules.h"
#include "unitmanager.h"
#include "particlesystem.h"
#include "threading.h"
#include "networking.h"
#include "iomanager.h"
#include "layersystem.h"
#include "info.h"
#include "timersystem.h"
#include "triggermanager.h"
#include "uimanager.h"
#include "level.h"
#include "soundqueue.h"
#include "localesystem.h"
#include "videoplayer.h"
#include "BST.h"
#include "Queue.h"
#include "cursor.h"
#include "input.h"
#include "game.h"
/*This is a small compilation error fix*/
#undef IN
#define IN 0x8000


#include <SDL_scancode.h>
typedef enum EE_Enum
{    /* Joystick events */
    EE_JOYAXISMOTION  = 0x600, /**< Joystick axis motion */
    EE_JOYBALLMOTION,          /**< Joystick trackball motion */
    EE_JOYHATMOTION,           /**< Joystick hat position change */
    EE_JOYBUTTONDOWN,          /**< Joystick button pressed */
    EE_JOYBUTTONUP,            /**< Joystick button released */
    EE_JOYDEVICEADDED,         /**< A new joystick has been inserted into the system */
    EE_JOYDEVICEREMOVED,       /**< An opened joystick has been removed */

    /* Game controller events */
    EE_CONTROLLERAXISMOTION  = 0x650, /**< Game controller axis motion */
    EE_CONTROLLERBUTTONDOWN,          /**< Game controller button pressed */
    EE_CONTROLLERBUTTONUP,            /**< Game controller button released */
    EE_CONTROLLERDEVICEADDED,         /**< A new Game controller has been inserted into the system */
    EE_CONTROLLERDEVICEREMOVED,       /**< An opened Game controller has been removed */
    EE_CONTROLLERDEVICEREMAPPED,      /**< The controller mapping was updated */

    /* Touch events */
    EE_FINGERDOWN      = 0x700,
    EE_FINGERUP,
    EE_FINGERMOTION,

    /* Gesture events */
    EE_DOLLARGESTURE   = 0x800,
    EE_DOLLARRECORD,
    EE_MULTIGESTURE,
};


#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_cdata(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  SWIGCDATA result;
  
  arg2 = 1;
  SWIG_check_num_args("cdata_void",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cdata_void",1,"void *");
  if(lua_gettop(L)>=2 && !lua_isnumber(L,2)) SWIG_fail_arg("cdata_void",2,"int");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"cdata");
  if(lua_gettop(L)>=2){
    arg2 = (int)lua_tonumber(L, 2);
  }
  result = cdata_void(arg1,arg2);
  {
    SWIGCDATA * resultptr = new SWIGCDATA((const SWIGCDATA &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SWIGCDATA,1); SWIG_arg++;
  }
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_VECTOR_endX_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::endX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endX",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endX_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->endX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_memmove(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("memmove",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("memmove",1,"void *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("memmove",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("memmove",3,"int");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"memmove");
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"memmove");
  arg3 = (int)lua_tonumber(L, 3);
  memmove(arg1,(void const *)arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_VECTOR_endY_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::endY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endY",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::endY",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endY_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->endY = arg2;
  
=======
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_VECTOR_endY_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::endY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endY",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endY_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->endY);
=======
static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_VECTOR_direction_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("math_VECTOR::direction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::direction",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::direction",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_direction_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->direction = arg2;
  
=======
static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_VECTOR_direction_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  double result;
  
  SWIG_check_num_args("math_VECTOR::direction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::direction",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_direction_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (double) ((arg1)->direction);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_VECTOR_magnitude_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::magnitude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::magnitude",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::magnitude",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_magnitude_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->magnitude = arg2;
  
=======
static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_VECTOR_magnitude_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::magnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::magnitude",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_magnitude_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->magnitude);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_math_VECTOR(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *result = 0 ;
  
  SWIG_check_num_args("math_VECTOR::math_VECTOR",0,0)
  result = (math_VECTOR *)new math_VECTOR();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math_VECTOR,1); SWIG_arg++; 
=======
static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_math_VECTOR(void *obj) {
math_VECTOR *arg1 = (math_VECTOR *) obj;
delete arg1;
}
static swig_lua_method swig_math_VECTOR_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_math_VECTOR_attributes[] = {
    { "endX", _wrap_math_VECTOR_endX_get, _wrap_math_VECTOR_endX_set},
    { "endY", _wrap_math_VECTOR_endY_get, _wrap_math_VECTOR_endY_set},
    { "direction", _wrap_math_VECTOR_direction_get, _wrap_math_VECTOR_direction_set},
    { "magnitude", _wrap_math_VECTOR_magnitude_get, _wrap_math_VECTOR_magnitude_set},
    {0,0,0}
};
static swig_lua_attribute swig_math_VECTOR_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_math_VECTOR_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_math_VECTOR_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_math_VECTOR_bases[] = {0};
static const char *swig_math_VECTOR_base_names[] = {0};
static swig_lua_class _wrap_class_math_VECTOR = { "math_VECTOR", &SWIGTYPE_p_math_VECTOR,_wrap_new_math_VECTOR, swig_delete_math_VECTOR, swig_math_VECTOR_methods, swig_math_VECTOR_attributes, { "math_VECTOR", swig_math_VECTOR_cls_methods, swig_math_VECTOR_cls_attributes, swig_math_VECTOR_cls_constants }, swig_math_VECTOR_bases, swig_math_VECTOR_base_names };

static int _wrap_math_point_X_set(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_point::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::X",1,"math_point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_point::X",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_X_set",1,SWIGTYPE_p_math_point);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
=======
static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_hasher(lua_State* L) {
  int SWIG_arg = 0;
  size_t result;
  
  SWIG_check_num_args("hasher",0,0)
  result = hasher();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_point_X_get(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int result;
  
  SWIG_check_num_args("math_point::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::X",1,"math_point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_X_get",1,SWIGTYPE_p_math_point);
  }
  
  result = (int) ((arg1)->X);
=======
static int _wrap_randUniform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Range arg1 ;
  Range *argp1 ;
  size_t result;
  
  SWIG_check_num_args("randUniform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("randUniform",1,"Range");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("randUniform",1,SWIGTYPE_p_Range);
  }
  arg1 = *argp1;
  
  result = randUniform(arg1);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_point_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_point::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::Y",1,"math_point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_point::Y",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_Y_set",1,SWIGTYPE_p_math_point);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
=======
static int _wrap_randUniform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t result;
  
  SWIG_check_num_args("randUniform",0,0)
  result = randUniform();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_math_point_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int result;
  
  SWIG_check_num_args("math_point::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::Y",1,"math_point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_Y_get",1,SWIGTYPE_p_math_point);
  }
  
  result = (int) ((arg1)->Y);
=======
static int _wrap_randUniform(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_randUniform__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Range, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_randUniform__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'randUniform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    randUniform(Range)\n"
    "    randUniform()\n");
  lua_error(L);return 0;
}


static int _wrap_randBinomial__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Range arg1 ;
  Range *argp1 ;
  size_t result;
  
  SWIG_check_num_args("randBinomial",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("randBinomial",1,"Range");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("randBinomial",1,SWIGTYPE_p_Range);
  }
  arg1 = *argp1;
  
  result = randBinomial(arg1);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_math_point(lua_State* L) {
  int SWIG_arg = 0;
  math_point *result = 0 ;
  
  SWIG_check_num_args("math_point::math_point",0,0)
  result = (math_point *)new math_point();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math_point,1); SWIG_arg++; 
=======
static int _wrap_randBinomial__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t result;
  
  SWIG_check_num_args("randBinomial",0,0)
  result = randBinomial();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_math_point(void *obj) {
math_point *arg1 = (math_point *) obj;
delete arg1;
}
static swig_lua_method swig_math_point_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_math_point_attributes[] = {
    { "X", _wrap_math_point_X_get, _wrap_math_point_X_set},
    { "Y", _wrap_math_point_Y_get, _wrap_math_point_Y_set},
    {0,0,0}
};
static swig_lua_attribute swig_math_point_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_math_point_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_math_point_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_math_point_bases[] = {0};
static const char *swig_math_point_base_names[] = {0};
static swig_lua_class _wrap_class_math_point = { "math_point", &SWIGTYPE_p_math_point,_wrap_new_math_point, swig_delete_math_point, swig_math_point_methods, swig_math_point_attributes, { "math_point", swig_math_point_cls_methods, swig_math_point_cls_attributes, swig_math_point_cls_constants }, swig_math_point_bases, swig_math_point_base_names };

static int _wrap_Physics_NewtonianForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::NewtonianForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::NewtonianForce",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::NewtonianForce",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->NewtonianForce(arg2);
=======
static int _wrap_randBinomial(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_randBinomial__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Range, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_randBinomial__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'randBinomial'\n"
    "  Possible C/C++ prototypes are:\n"
    "    randBinomial(Range)\n"
    "    randBinomial()\n");
  lua_error(L);return 0;
}


static int _wrap_randNormal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Range arg1 ;
  Range *argp1 ;
  size_t result;
  
  SWIG_check_num_args("randNormal",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("randNormal",1,"Range");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("randNormal",1,SWIGTYPE_p_Range);
  }
  arg1 = *argp1;
  
  result = randNormal(arg1);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_NewtonianForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::NewtonianForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::NewtonianForce",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->NewtonianForce();
=======
static int _wrap_randNormal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t result;
  
  SWIG_check_num_args("randNormal",0,0)
  result = randNormal();
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_NewtonianForce(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_NewtonianForce__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
=======
static int _wrap_randNormal(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_randNormal__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Range, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
<<<<<<< HEAD
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_NewtonianForce__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_NewtonianForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::NewtonianForce(char)\n"
    "    Physics::NewtonianForce()\n");
=======
      return _wrap_randNormal__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'randNormal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    randNormal(Range)\n"
    "    randNormal()\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_Physics_Relativity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::Relativity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Relativity",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::Relativity",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Relativity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->Relativity(arg2);
=======
static int _wrap_GetMaxValueSizeT(lua_State* L) {
  int SWIG_arg = 0;
  size_t result;
  
  SWIG_check_num_args("GetMaxValueSizeT",0,0)
  result = GetMaxValueSizeT();
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_Relativity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::Relativity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Relativity",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Relativity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->Relativity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_printHello(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("printHello",0,0)
  printHello();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_Relativity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_Relativity__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_Relativity__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_Relativity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::Relativity(char)\n"
    "    Physics::Relativity()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_rel_NewtonianForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::rel_NewtonianForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_NewtonianForce",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::rel_NewtonianForce",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->rel_NewtonianForce(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Keywords_set(lua_State* L) {
  int SWIG_arg = 0;
  std::map< word,std::string > *arg1 = (std::map< word,std::string > *) 0 ;
  
  SWIG_check_num_args("Keywords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Keywords",1,"std::map< word,std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_unsigned_short_std__string_t,0))){
    SWIG_fail_ptr("Keywords_set",1,SWIGTYPE_p_std__mapT_unsigned_short_std__string_t);
  }
  
  Keywords = *arg1;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_rel_NewtonianForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::rel_NewtonianForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_NewtonianForce",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->rel_NewtonianForce();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Keywords_get(lua_State* L) {
  int SWIG_arg = 0;
  std::map< word,std::string > *result = 0 ;
  
  SWIG_check_num_args("Keywords",0,0)
  result = (std::map< word,std::string > *)&Keywords;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_unsigned_short_std__string_t,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_rel_NewtonianForce(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_rel_NewtonianForce__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_rel_NewtonianForce__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_rel_NewtonianForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::rel_NewtonianForce(char)\n"
    "    Physics::rel_NewtonianForce()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_rel_CalculateForceB(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::rel_CalculateForceB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_CalculateForceB",1,"Physics *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Physics::rel_CalculateForceB",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_CalculateForceB",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)(arg1)->rel_CalculateForceB(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_SQLQuery_WILDCARD_get(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *arg1 = (SQLGenerator *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("SQLGenerator::WILDCARD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SQLGenerator::WILDCARD",1,"SQLGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SQLGenerator,0))){
    SWIG_fail_ptr("SQLQuery_WILDCARD_get",1,SWIGTYPE_p_SQLGenerator);
  }
  
  result = (std::string *) & ((arg1)->WILDCARD);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SQLQuery_prepareStatement__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *arg1 = (SQLGenerator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  size_t arg7 ;
  std::string result;
  
  SWIG_check_num_args("SQLGenerator::prepareStatement",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SQLGenerator::prepareStatement",1,"SQLGenerator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SQLGenerator::prepareStatement",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SQLGenerator::prepareStatement",3,"std::string");
  if(!lua_isstring(L,4)) SWIG_fail_arg("SQLGenerator::prepareStatement",4,"std::string");
  if(!lua_isstring(L,5)) SWIG_fail_arg("SQLGenerator::prepareStatement",5,"std::string");
  if(!lua_isstring(L,6)) SWIG_fail_arg("SQLGenerator::prepareStatement",6,"std::string");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("SQLGenerator::prepareStatement",7,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SQLGenerator,0))){
    SWIG_fail_ptr("SQLQuery_prepareStatement",1,SWIGTYPE_p_SQLGenerator);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
  (&arg5)->assign(lua_tostring(L,5),lua_rawlen(L,5));
  (&arg6)->assign(lua_tostring(L,6),lua_rawlen(L,6));
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (size_t)lua_tonumber(L, 7);
  result = (arg1)->prepareStatement(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_Impulse(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_VECTOR arg2 ;
  math_VECTOR *argp2 ;
  
  SWIG_check_num_args("Physics::Impulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Impulse",1,"Physics *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::Impulse",2,"math_VECTOR");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Impulse",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("Physics_Impulse",2,SWIGTYPE_p_math_VECTOR);
  }
  arg2 = *argp2;
  
  (arg1)->Impulse(arg2);
  
=======
static int _wrap_SQLQuery_prepareStatement__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *arg1 = (SQLGenerator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string result;
  
  SWIG_check_num_args("SQLGenerator::prepareStatement",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SQLGenerator::prepareStatement",1,"SQLGenerator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SQLGenerator::prepareStatement",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SQLGenerator::prepareStatement",3,"std::string");
  if(!lua_isstring(L,4)) SWIG_fail_arg("SQLGenerator::prepareStatement",4,"std::string");
  if(!lua_isstring(L,5)) SWIG_fail_arg("SQLGenerator::prepareStatement",5,"std::string");
  if(!lua_isstring(L,6)) SWIG_fail_arg("SQLGenerator::prepareStatement",6,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SQLGenerator,0))){
    SWIG_fail_ptr("SQLQuery_prepareStatement",1,SWIGTYPE_p_SQLGenerator);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
  (&arg5)->assign(lua_tostring(L,5),lua_rawlen(L,5));
  (&arg6)->assign(lua_tostring(L,6),lua_rawlen(L,6));
  result = (arg1)->prepareStatement(arg2,arg3,arg4,arg5,arg6);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_Friction(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  bool arg3 ;
  double result;
  
  SWIG_check_num_args("Physics::Friction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Friction",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Friction",2,"double");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Physics::Friction",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Friction",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (double)(arg1)->Friction(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_SQLQuery_prepareStatement__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *arg1 = (SQLGenerator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string result;
  
  SWIG_check_num_args("SQLGenerator::prepareStatement",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SQLGenerator::prepareStatement",1,"SQLGenerator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SQLGenerator::prepareStatement",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SQLGenerator::prepareStatement",3,"std::string");
  if(!lua_isstring(L,4)) SWIG_fail_arg("SQLGenerator::prepareStatement",4,"std::string");
  if(!lua_isstring(L,5)) SWIG_fail_arg("SQLGenerator::prepareStatement",5,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SQLGenerator,0))){
    SWIG_fail_ptr("SQLQuery_prepareStatement",1,SWIGTYPE_p_SQLGenerator);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
  (&arg5)->assign(lua_tostring(L,5),lua_rawlen(L,5));
  result = (arg1)->prepareStatement(arg2,arg3,arg4,arg5);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_Update_Velocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::Update_Velocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Velocity",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Update_Velocity",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Velocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->Update_Velocity(arg2);
  
=======
static int _wrap_SQLQuery_prepareStatement__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *arg1 = (SQLGenerator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  SWIG_check_num_args("SQLGenerator::prepareStatement",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SQLGenerator::prepareStatement",1,"SQLGenerator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SQLGenerator::prepareStatement",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SQLGenerator::prepareStatement",3,"std::string");
  if(!lua_isstring(L,4)) SWIG_fail_arg("SQLGenerator::prepareStatement",4,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SQLGenerator,0))){
    SWIG_fail_ptr("SQLQuery_prepareStatement",1,SWIGTYPE_p_SQLGenerator);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
  result = (arg1)->prepareStatement(arg2,arg3,arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_UpdateForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("Physics::UpdateForce",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::UpdateForce",1,"Physics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::UpdateForce",2,"Physics *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::UpdateForce",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Physics::UpdateForce",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->UpdateForce(arg2,arg3,arg4);
  
=======
static int _wrap_SQLQuery_prepareStatement__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *arg1 = (SQLGenerator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  SWIG_check_num_args("SQLGenerator::prepareStatement",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SQLGenerator::prepareStatement",1,"SQLGenerator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SQLGenerator::prepareStatement",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("SQLGenerator::prepareStatement",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SQLGenerator,0))){
    SWIG_fail_ptr("SQLQuery_prepareStatement",1,SWIGTYPE_p_SQLGenerator);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (arg1)->prepareStatement(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_UpdateForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Physics::UpdateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::UpdateForce",1,"Physics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::UpdateForce",2,"Physics *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::UpdateForce",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->UpdateForce(arg2,arg3);
  
=======
static int _wrap_SQLQuery_prepareStatement__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *arg1 = (SQLGenerator *) 0 ;
  std::string arg2 ;
  std::string result;
  
  SWIG_check_num_args("SQLGenerator::prepareStatement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SQLGenerator::prepareStatement",1,"SQLGenerator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SQLGenerator::prepareStatement",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SQLGenerator,0))){
    SWIG_fail_ptr("SQLQuery_prepareStatement",1,SWIGTYPE_p_SQLGenerator);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (arg1)->prepareStatement(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SQLQuery_prepareStatement__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *arg1 = (SQLGenerator *) 0 ;
  std::string result;
  
  SWIG_check_num_args("SQLGenerator::prepareStatement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SQLGenerator::prepareStatement",1,"SQLGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SQLGenerator,0))){
    SWIG_fail_ptr("SQLQuery_prepareStatement",1,SWIGTYPE_p_SQLGenerator);
  }
  
  result = (arg1)->prepareStatement();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_UpdateForce(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
=======
static int _wrap_SQLQuery_prepareStatement(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SQLGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SQLQuery_prepareStatement__SWIG_6(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SQLGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SQLQuery_prepareStatement__SWIG_5(L);
      }
    }
  }
>>>>>>> TheIllusiveMan
  if (argc == 3) {
    int _v;
    {
      void *ptr;
<<<<<<< HEAD
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
=======
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SQLGenerator, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Physics_UpdateForce__SWIG_1(L);
=======
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_SQLQuery_prepareStatement__SWIG_4(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
<<<<<<< HEAD
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
=======
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SQLGenerator, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Physics_UpdateForce__SWIG_0(L);
=======
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_SQLQuery_prepareStatement__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SQLGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_SQLQuery_prepareStatement__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SQLGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_SQLQuery_prepareStatement__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SQLGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SQLQuery_prepareStatement__SWIG_0(L);
                }
              }
            }
>>>>>>> TheIllusiveMan
          }
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_UpdateForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::UpdateForce(Physics *,int,bool)\n"
    "    Physics::UpdateForce(Physics *,int)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SQLQuery_prepareStatement'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SQLGenerator::prepareStatement(std::string,std::string,std::string,std::string,std::string,size_t)\n"
    "    SQLGenerator::prepareStatement(std::string,std::string,std::string,std::string,std::string)\n"
    "    SQLGenerator::prepareStatement(std::string,std::string,std::string,std::string)\n"
    "    SQLGenerator::prepareStatement(std::string,std::string,std::string)\n"
    "    SQLGenerator::prepareStatement(std::string,std::string)\n"
    "    SQLGenerator::prepareStatement(std::string)\n"
    "    SQLGenerator::prepareStatement()\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_Physics_Update_Acceleration(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  
  SWIG_check_num_args("Physics::Update_Acceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Acceleration",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Acceleration",1,SWIGTYPE_p_Physics);
  }
  
  (arg1)->Update_Acceleration();
  
=======
static int _wrap_new_SQLQuery(lua_State* L) {
  int SWIG_arg = 0;
  SQLGenerator *result = 0 ;
  
  SWIG_check_num_args("SQLGenerator::SQLGenerator",0,0)
  result = (SQLGenerator *)new SQLGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SQLGenerator,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_math_CalculateDirectionDegrees(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateDirectionDegrees",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateDirectionDegrees",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)((Physics const *)arg1)->math_CalculateDirectionDegrees(arg2,arg3);
=======
static void swig_delete_SQLQuery(void *obj) {
SQLGenerator *arg1 = (SQLGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_SQLQuery(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SQLQuery);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SQLQuery_attributes[] = {
    { "WILDCARD", _wrap_SQLQuery_WILDCARD_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_SQLQuery_methods[]= {
    { "prepareStatement", _wrap_SQLQuery_prepareStatement},
    {0,0}
};
static swig_lua_method swig_SQLQuery_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SQLQuery_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SQLQuery_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SQLQuery_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SQLQuery_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SQLQuery_Sf_SwigStatic = {
    "SQLQuery",
    swig_SQLQuery_Sf_SwigStatic_methods,
    swig_SQLQuery_Sf_SwigStatic_attributes,
    swig_SQLQuery_Sf_SwigStatic_constants,
    swig_SQLQuery_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SQLQuery_bases[] = {0};
static const char *swig_SQLQuery_base_names[] = {0};
static swig_lua_class _wrap_class_SQLQuery = { "SQLQuery", "SQLQuery", &SWIGTYPE_p_SQLGenerator,_proxy__wrap_new_SQLQuery, swig_delete_SQLQuery, swig_SQLQuery_methods, swig_SQLQuery_attributes, &swig_SQLQuery_Sf_SwigStatic, swig_SQLQuery_meta, swig_SQLQuery_bases, swig_SQLQuery_base_names };

static int _wrap_Physics_NewtonianForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::NewtonianForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::NewtonianForce",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::NewtonianForce",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->NewtonianForce(arg2);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point arg2 ;
  math_point *argp2 ;
  double result;
  
  SWIG_check_num_args("Physics::GetDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetDistance",1,"Physics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::GetDistance",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetDistance",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_GetDistance",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  result = (double)((Physics const *)arg1)->GetDistance(arg2);
=======
static int _wrap_Physics_NewtonianForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::NewtonianForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::NewtonianForce",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->NewtonianForce();
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetLoc(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point result;
  
  SWIG_check_num_args("Physics::GetLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetLoc",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetLoc",1,SWIGTYPE_p_Physics);
  }
  
  result = ((Physics const *)arg1)->GetLoc();
  {
    math_point * resultptr = new math_point((const math_point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_math_point,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetMU(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetMU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetMU",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetMU",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetMU();
=======
static int _wrap_Physics_NewtonianForce(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_NewtonianForce__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_NewtonianForce__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_NewtonianForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::NewtonianForce(char)\n"
    "    Physics::NewtonianForce()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_Relativity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::Relativity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Relativity",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::Relativity",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Relativity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->Relativity(arg2);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetMass(lua_State* L) {
=======
static int _wrap_Physics_Relativity__SWIG_1(lua_State* L) {
>>>>>>> TheIllusiveMan
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
<<<<<<< HEAD
  SWIG_check_num_args("Physics::GetMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetMass",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetMass",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetMass();
=======
  SWIG_check_num_args("Physics::Relativity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Relativity",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Relativity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->Relativity();
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetB2DDirection(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Physics::GetB2DDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetB2DDirection",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetB2DDirection",1,SWIGTYPE_p_Physics);
  }
  
  result = ((Physics const *)arg1)->GetB2DDirection();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_Physics_Relativity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_Relativity__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_Relativity__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_Relativity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::Relativity(char)\n"
    "    Physics::Relativity()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_rel_NewtonianForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::rel_NewtonianForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_NewtonianForce",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::rel_NewtonianForce",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)(arg1)->rel_NewtonianForce(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetBMagnitude(lua_State* L) {
=======
static int _wrap_Physics_rel_NewtonianForce__SWIG_1(lua_State* L) {
>>>>>>> TheIllusiveMan
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
<<<<<<< HEAD
  SWIG_check_num_args("Physics::GetBMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetBMagnitude",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetBMagnitude",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetBMagnitude();
=======
  SWIG_check_num_args("Physics::rel_NewtonianForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_NewtonianForce",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_NewtonianForce",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)(arg1)->rel_NewtonianForce();
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetGravity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetGravity",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetGravity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetGravity();
=======
static int _wrap_Physics_rel_NewtonianForce(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Physics_rel_NewtonianForce__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Physics_rel_NewtonianForce__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_rel_NewtonianForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::rel_NewtonianForce(char)\n"
    "    Physics::rel_NewtonianForce()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_rel_CalculateForceB(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::rel_CalculateForceB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::rel_CalculateForceB",1,"Physics *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Physics::rel_CalculateForceB",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_rel_CalculateForceB",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)(arg1)->rel_CalculateForceB(arg2);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::GetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetVelocity",1,"Physics const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::GetVelocity",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetVelocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)((Physics const *)arg1)->GetVelocity(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Physics_Impulse(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_VECTOR arg2 ;
  math_VECTOR *argp2 ;
  
  SWIG_check_num_args("Physics::Impulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Impulse",1,"Physics *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::Impulse",2,"math_VECTOR");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Impulse",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("Physics_Impulse",2,SWIGTYPE_p_math_VECTOR);
  }
  arg2 = *argp2;
  
  (arg1)->Impulse(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetElasticity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetElasticity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetElasticity",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetElasticity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetElasticity();
=======
static int _wrap_Physics_Friction(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  bool arg3 ;
  double result;
  
  SWIG_check_num_args("Physics::Friction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Friction",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Friction",2,"double");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Physics::Friction",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Friction",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (double)(arg1)->Friction(arg2,arg3);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_math_CalculateForceFromChargedParticles(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  math_point arg3 ;
  math_point *argp3 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateForceFromChargedParticles",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",3,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromChargedParticles",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromChargedParticles",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  result = (double)((Physics const *)arg1)->math_CalculateForceFromChargedParticles(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Physics_Update_Velocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::Update_Velocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Velocity",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Update_Velocity",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Velocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->Update_Velocity(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_math_CalculateEField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point arg2 ;
  math_point *argp2 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateEField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateEField",1,"Physics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::math_CalculateEField",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  result = (double)((Physics const *)arg1)->math_CalculateEField(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_math_CalculateEField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateEField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateEField",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateEField",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Physics const *)arg1)->math_CalculateEField(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Physics_UpdateForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  int arg3 ;
  bool arg4 ;
  char arg5 ;
  
  SWIG_check_num_args("Physics::UpdateForce",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::UpdateForce",1,"Physics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::UpdateForce",2,"Physics *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::UpdateForce",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Physics::UpdateForce",4,"bool");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("Physics::UpdateForce",5,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_tostring(L, 5))[0];
  (arg1)->UpdateForce(arg2,arg3,arg4,arg5);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_math_CalculateEField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Physics_math_CalculateEField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Physics_math_CalculateEField__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_math_CalculateEField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::math_CalculateEField(math_point) const\n"
    "    Physics::math_CalculateEField(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_math_Sign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("Physics::math_Sign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_Sign",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_Sign",2,"Physics *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Physics::math_Sign",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",1,SWIGTYPE_p_Physics);
=======
static int _wrap_Physics_UpdateForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("Physics::UpdateForce",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::UpdateForce",1,"Physics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::UpdateForce",2,"Physics *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::UpdateForce",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Physics::UpdateForce",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",1,SWIGTYPE_p_Physics);
>>>>>>> TheIllusiveMan
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
<<<<<<< HEAD
    SWIG_fail_ptr("Physics_math_Sign",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((Physics const *)arg1)->math_Sign(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
    SWIG_fail_ptr("Physics_UpdateForce",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->UpdateForce(arg2,arg3,arg4);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_math_Sign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  char arg3 ;
  int result;
  
  SWIG_check_num_args("Physics::math_Sign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_Sign",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_Sign",2,"Physics *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::math_Sign",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",1,SWIGTYPE_p_Physics);
=======
static int _wrap_Physics_UpdateForce__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("Physics::UpdateForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::UpdateForce",1,"Physics *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::UpdateForce",2,"Physics *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::UpdateForce",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_UpdateForce",1,SWIGTYPE_p_Physics);
>>>>>>> TheIllusiveMan
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
<<<<<<< HEAD
    SWIG_fail_ptr("Physics_math_Sign",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  result = (int)((Physics const *)arg1)->math_Sign(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
    SWIG_fail_ptr("Physics_UpdateForce",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->UpdateForce(arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_math_Sign(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
=======
static int _wrap_Physics_UpdateForce(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
>>>>>>> TheIllusiveMan
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
<<<<<<< HEAD
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Physics_math_Sign__SWIG_0(L);
=======
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Physics_UpdateForce__SWIG_2(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  if (argc == 3) {
=======
  if (argc == 4) {
>>>>>>> TheIllusiveMan
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
<<<<<<< HEAD
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_math_Sign__SWIG_1(L);
=======
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Physics_UpdateForce__SWIG_1(L);
          }
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_math_Sign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::math_Sign(Physics *,bool) const\n"
    "    Physics::math_Sign(Physics *,char) const\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_math_CalculateMomentum(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  Physics *arg3 = (Physics *) 0 ;
  
  SWIG_check_num_args("Physics::math_CalculateMomentum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateMomentum",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_CalculateMomentum",2,"Physics *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Physics::math_CalculateMomentum",3,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",2,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",3,SWIGTYPE_p_Physics);
  }
  
  ((Physics const *)arg1)->math_CalculateMomentum(arg2,arg3);
=======
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]) && (lua_rawlen(L,argv[4])==1);
            }
            if (_v) {
              return _wrap_Physics_UpdateForce__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_UpdateForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::UpdateForce(Physics *,int,bool,char)\n"
    "    Physics::UpdateForce(Physics *,int,bool)\n"
    "    Physics::UpdateForce(Physics *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_Update_Acceleration(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  
  SWIG_check_num_args("Physics::Update_Acceleration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Acceleration",1,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Acceleration",1,SWIGTYPE_p_Physics);
  }
  
  (arg1)->Update_Acceleration();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_math_CalculateForceFromMagneticField(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  std::string arg2 ;
  double arg3 ;
  std::string *argp2 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateForceFromMagneticField",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",1,"Physics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromMagneticField",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromMagneticField",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)((Physics const *)arg1)->math_CalculateForceFromMagneticField(arg2,arg3);
=======
static int _wrap_Physics_math_CalculateDirectionDegrees(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateDirectionDegrees",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::math_CalculateDirectionDegrees",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateDirectionDegrees",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)((Physics const *)arg1)->math_CalculateDirectionDegrees(arg2,arg3);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetForceCount(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::GetForceCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetForceCount",1,"Physics const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::GetForceCount",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetForceCount",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)((Physics const *)arg1)->GetForceCount(arg2);
=======
static int _wrap_Physics_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetDistance",1,"Physics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::GetDistance",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetDistance",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_GetDistance",2,SWIGTYPE_p_math_point);
  }
  
  result = (double)((Physics const *)arg1)->GetDistance((math_point const &)*arg2);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_isUnmovable(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  bool result;
  
  SWIG_check_num_args("Physics::isUnmovable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::isUnmovable",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_isUnmovable",1,SWIGTYPE_p_Physics);
  }
  
  result = (bool)((Physics const *)arg1)->isUnmovable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Physics_GetLoc(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point result;
  
  SWIG_check_num_args("Physics::GetLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetLoc",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetLoc",1,SWIGTYPE_p_Physics);
  }
  
  result = ((Physics const *)arg1)->GetLoc();
  {
    math_point * resultptr = new math_point((const math_point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_math_point,1); SWIG_arg++;
  }
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_SetForceCount__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetForceCount",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetForceCount",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetForceCount",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetForceCount",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetForceCount",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetForceCount(arg2,arg3);
  
=======
static int _wrap_Physics_GetMU(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetMU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetMU",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetMU",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetMU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_SetForceCount__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetForceCount",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetForceCount",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetForceCount",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetForceCount",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetForceCount",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetForceCount(arg2,arg3);
  
=======
static int _wrap_Physics_GetMass(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetMass",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetMass",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_SetForceCount(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_SetForceCount__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_SetForceCount__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_SetForceCount'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::SetForceCount(int,char)\n"
    "    Physics::SetForceCount(double,char)\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_SetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetVelocity",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetVelocity",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetVelocity",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetVelocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetVelocity(arg2,arg3);
  
=======
static int _wrap_Physics_GetB2DDirection(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Physics::GetB2DDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetB2DDirection",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetB2DDirection",1,SWIGTYPE_p_Physics);
  }
  
  result = ((Physics const *)arg1)->GetB2DDirection();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_AddForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::AddForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::AddForce",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::AddForce",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::AddForce",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_AddForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->AddForce(arg2,arg3);
  
=======
static int _wrap_Physics_GetBMagnitude(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetBMagnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetBMagnitude",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetBMagnitude",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetBMagnitude();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_AddForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::AddForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::AddForce",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::AddForce",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_AddForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->AddForce(arg2);
  
=======
static int _wrap_Physics_GetGravity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetGravity",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetGravity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetGravity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_AddForce(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Physics_AddForce__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_AddForce__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_AddForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::AddForce(double,char)\n"
    "    Physics::AddForce(double)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Physics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Physics::Physics",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Physics::Physics",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Physics *)new Physics((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Physics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Physics::Physics",0,0)
  result = (Physics *)new Physics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,1); SWIG_arg++; 
=======
static int _wrap_Physics_GetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::GetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetVelocity",1,"Physics const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::GetVelocity",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetVelocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)((Physics const *)arg1)->GetVelocity(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_Physics(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Physics__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Physics__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Physics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::Physics(char const *)\n"
    "    Physics::Physics()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_Update_Position(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::Update_Position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Position",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Update_Position",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Position",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->Update_Position(arg2);
  
=======
static int _wrap_Physics_GetElasticity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetElasticity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetElasticity",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetElasticity",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetElasticity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_ChangePlanetGravitationalConstant(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::ChangePlanetGravitationalConstant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::ChangePlanetGravitationalConstant",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::ChangePlanetGravitationalConstant",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_ChangePlanetGravitationalConstant",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->ChangePlanetGravitationalConstant(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_Load_Physics(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Physics::Load_Physics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Load_Physics",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::Load_Physics",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Load_Physics",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->Load_Physics((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Physics_math_CalculateForceFromChargedParticles(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  math_point *arg3 = 0 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateForceFromChargedParticles",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",2,"double");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Physics::math_CalculateForceFromChargedParticles",3,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromChargedParticles",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromChargedParticles",3,SWIGTYPE_p_math_point);
  }
  
  result = (double)((Physics const *)arg1)->math_CalculateForceFromChargedParticles(arg2,(math_point const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Physics_GetCharge(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetCharge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetCharge",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetCharge",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetCharge();
=======
static int _wrap_Physics_math_CalculateEField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateEField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateEField",1,"Physics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::math_CalculateEField",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",2,SWIGTYPE_p_math_point);
  }
  
  result = (double)((Physics const *)arg1)->math_CalculateEField((math_point const &)*arg2);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_Physics(void *obj) {
Physics *arg1 = (Physics *) obj;
delete arg1;
}
static swig_lua_method swig_Physics_methods[] = {
    {"NewtonianForce", _wrap_Physics_NewtonianForce}, 
    {"Relativity", _wrap_Physics_Relativity}, 
    {"rel_NewtonianForce", _wrap_Physics_rel_NewtonianForce}, 
    {"rel_CalculateForceB", _wrap_Physics_rel_CalculateForceB}, 
    {"Impulse", _wrap_Physics_Impulse}, 
    {"Friction", _wrap_Physics_Friction}, 
    {"Update_Velocity", _wrap_Physics_Update_Velocity}, 
    {"UpdateForce", _wrap_Physics_UpdateForce}, 
    {"Update_Acceleration", _wrap_Physics_Update_Acceleration}, 
    {"math_CalculateDirectionDegrees", _wrap_Physics_math_CalculateDirectionDegrees}, 
    {"GetDistance", _wrap_Physics_GetDistance}, 
    {"GetLoc", _wrap_Physics_GetLoc}, 
    {"GetMU", _wrap_Physics_GetMU}, 
    {"GetMass", _wrap_Physics_GetMass}, 
    {"GetB2DDirection", _wrap_Physics_GetB2DDirection}, 
    {"GetBMagnitude", _wrap_Physics_GetBMagnitude}, 
    {"GetGravity", _wrap_Physics_GetGravity}, 
    {"GetVelocity", _wrap_Physics_GetVelocity}, 
    {"GetElasticity", _wrap_Physics_GetElasticity}, 
    {"math_CalculateForceFromChargedParticles", _wrap_Physics_math_CalculateForceFromChargedParticles}, 
    {"math_CalculateEField", _wrap_Physics_math_CalculateEField}, 
    {"math_Sign", _wrap_Physics_math_Sign}, 
    {"math_CalculateMomentum", _wrap_Physics_math_CalculateMomentum}, 
    {"math_CalculateForceFromMagneticField", _wrap_Physics_math_CalculateForceFromMagneticField}, 
    {"GetForceCount", _wrap_Physics_GetForceCount}, 
    {"isUnmovable", _wrap_Physics_isUnmovable}, 
    {"SetForceCount", _wrap_Physics_SetForceCount}, 
    {"SetVelocity", _wrap_Physics_SetVelocity}, 
    {"AddForce", _wrap_Physics_AddForce}, 
    {"Update_Position", _wrap_Physics_Update_Position}, 
    {"ChangePlanetGravitationalConstant", _wrap_Physics_ChangePlanetGravitationalConstant}, 
    {"Load_Physics", _wrap_Physics_Load_Physics}, 
    {"GetCharge", _wrap_Physics_GetCharge}, 
    {0,0}
};
static swig_lua_attribute swig_Physics_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Physics_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Physics_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Physics_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Physics_bases[] = {0};
static const char *swig_Physics_base_names[] = {0};
static swig_lua_class _wrap_class_Physics = { "Physics", &SWIGTYPE_p_Physics,_wrap_new_Physics, swig_delete_Physics, swig_Physics_methods, swig_Physics_attributes, { "Physics", swig_Physics_cls_methods, swig_Physics_cls_attributes, swig_Physics_cls_constants }, swig_Physics_bases, swig_Physics_base_names };

static int _wrap_CalculateDistance(lua_State* L) {
  int SWIG_arg = 0;
  math_point arg1 ;
  math_point arg2 ;
  math_point *argp1 ;
  math_point *argp2 ;
  int result;
  
  SWIG_check_num_args("CalculateDistance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("CalculateDistance",1,"math_point");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CalculateDistance",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("CalculateDistance",1,SWIGTYPE_p_math_point);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("CalculateDistance",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  result = (int)CalculateDistance(arg1,arg2);
=======
static int _wrap_Physics_math_CalculateEField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateEField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateEField",1,"Physics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::math_CalculateEField",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateEField",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)((Physics const *)arg1)->math_CalculateEField(arg2);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_data_base__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  bool arg2 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("data_base::data_base",1,"char const []");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("data_base::data_base",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (data_base *)new data_base((char const (*))arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_data_base__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("data_base::data_base",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (data_base *)new data_base((char const (*))arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
=======
static int _wrap_Physics_math_CalculateEField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Physics_math_CalculateEField__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Physics_math_CalculateEField__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_math_CalculateEField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::math_CalculateEField(math_point const &) const\n"
    "    Physics::math_CalculateEField(int) const\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_math_Sign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("Physics::math_Sign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_Sign",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_Sign",2,"Physics *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Physics::math_Sign",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((Physics const *)arg1)->math_Sign(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_data_base__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",0,0)
  result = (data_base *)new data_base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
=======
static int _wrap_Physics_math_Sign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  char arg3 ;
  int result;
  
  SWIG_check_num_args("Physics::math_Sign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_Sign",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_Sign",2,"Physics *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::math_Sign",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_Sign",2,SWIGTYPE_p_Physics);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  result = (int)((Physics const *)arg1)->math_Sign(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_data_base(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_data_base__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_data_base__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_data_base__SWIG_0(L);
=======
static int _wrap_Physics_math_Sign(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Physics_math_Sign__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_math_Sign__SWIG_1(L);
        }
>>>>>>> TheIllusiveMan
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_data_base'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::data_base(char const [],bool)\n"
    "    data_base::data_base(char const [])\n"
    "    data_base::data_base()\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_math_Sign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::math_Sign(Physics *,bool) const\n"
    "    Physics::math_Sign(Physics *,char) const\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_data_base_GetStrBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrBuffer",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrBuffer",1,SWIGTYPE_p_data_base);
  }
  
  result = ((data_base const *)arg1)->GetStrBuffer();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_Physics_math_CalculateMomentum(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  Physics *arg2 = (Physics *) 0 ;
  Physics *arg3 = (Physics *) 0 ;
  
  SWIG_check_num_args("Physics::math_CalculateMomentum",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateMomentum",1,"Physics const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Physics::math_CalculateMomentum",2,"Physics *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Physics::math_CalculateMomentum",3,"Physics *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",2,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateMomentum",3,SWIGTYPE_p_Physics);
  }
  
  ((Physics const *)arg1)->math_CalculateMomentum(arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetValueFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("data_base::GetValueFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetValueFromData",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetValueFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetValueFromData",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetValueFromData",2,SWIGTYPE_p_std__string);
  }
  
  result = (double)((data_base const *)arg1)->GetValueFromData((std::string const &)*arg2);
=======
static int _wrap_Physics_math_CalculateForceFromMagneticField(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("Physics::math_CalculateForceFromMagneticField",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",1,"Physics const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Physics::math_CalculateForceFromMagneticField",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_math_CalculateForceFromMagneticField",1,SWIGTYPE_p_Physics);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)((Physics const *)arg1)->math_CalculateForceFromMagneticField(arg2,arg3);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetStrFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrFromData",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetStrFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrFromData",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetStrFromData",2,SWIGTYPE_p_std__string);
  }
  
  result = ((data_base const *)arg1)->GetStrFromData((std::string const &)*arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
=======
static int _wrap_Physics_GetForceCount(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char arg2 ;
  double result;
  
  SWIG_check_num_args("Physics::GetForceCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetForceCount",1,"Physics const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::GetForceCount",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetForceCount",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (double)((Physics const *)arg1)->GetForceCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
>>>>>>> TheIllusiveMan
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetIntFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("data_base::GetIntFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetIntFromData",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetIntFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetIntFromData",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetIntFromData",2,SWIGTYPE_p_std__string);
  }
  
  result = (int)((data_base const *)arg1)->GetIntFromData((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Physics_isUnmovable(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  bool result;
  
  SWIG_check_num_args("Physics::isUnmovable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::isUnmovable",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_isUnmovable",1,SWIGTYPE_p_Physics);
  }
  
  result = (bool)((Physics const *)arg1)->isUnmovable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetValueFromDataWithLine(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double result;
  
  SWIG_check_num_args("data_base::GetValueFromDataWithLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetValueFromDataWithLine",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetValueFromDataWithLine",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)((data_base const *)arg1)->GetValueFromDataWithLine((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Physics_SetForceCount(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  int arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetForceCount",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetForceCount",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetForceCount",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetForceCount",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetForceCount",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetForceCount(arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetStrFromDataWithLine(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrFromDataWithLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrFromDataWithLine",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetStrFromDataWithLine",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((data_base const *)arg1)->GetStrFromDataWithLine((std::string const &)*arg2,arg3);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_Physics_SetForceCountDouble(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetForceCount",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetForceCount",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetForceCount",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetForceCount",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetForceCountDouble",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetForceCount(arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetStateOfInternalBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::GetStateOfInternalBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStateOfInternalBuffer",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStateOfInternalBuffer",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->GetStateOfInternalBuffer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Physics_SetLoc(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  math_point *arg2 = 0 ;
  
  SWIG_check_num_args("Physics::SetLoc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetLoc",1,"Physics *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Physics::SetLoc",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetLoc",1,SWIGTYPE_p_Physics);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Physics_SetLoc",2,SWIGTYPE_p_math_point);
  }
  
  (arg1)->SetLoc((math_point const &)*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_OpenFileAndGetBinBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::OpenFileAndGetBinBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFileAndGetBinBuffer",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFileAndGetBinBuffer",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFileAndGetBinBuffer",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->OpenFileAndGetBinBuffer(arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_Physics_SetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::SetVelocity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::SetVelocity",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::SetVelocity",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::SetVelocity",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_SetVelocity",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->SetVelocity(arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_OpenFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("data_base::OpenFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFile",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("data_base::OpenFile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->OpenFile((char const *)arg2,arg3);
=======
static int _wrap_Physics_AddForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Physics::AddForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::AddForce",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::AddForce",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Physics::AddForce",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_AddForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->AddForce(arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_OpenFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenFile((char const *)arg2);
=======
static int _wrap_Physics_AddForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::AddForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::AddForce",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::AddForce",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_AddForce",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->AddForce(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_OpenFile(lua_State* L) {
=======
static int _wrap_Physics_AddForce(lua_State* L) {
>>>>>>> TheIllusiveMan
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
<<<<<<< HEAD
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
=======
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_data_base_OpenFile__SWIG_1(L);
=======
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Physics_AddForce__SWIG_1(L);
>>>>>>> TheIllusiveMan
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
<<<<<<< HEAD
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
=======
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Physics, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_data_base_OpenFile__SWIG_0(L);
=======
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Physics_AddForce__SWIG_0(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_OpenFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::OpenFile(char const *,bool)\n"
    "    data_base::OpenFile(char const *)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Physics_AddForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::AddForce(double,char)\n"
    "    Physics::AddForce(double)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_data_base_OpenFileForQuickWrite(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenFileForQuickWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFileForQuickWrite",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFileForQuickWrite",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFileForQuickWrite",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenFileForQuickWrite((char const *)arg2);
  
=======
static int _wrap_new_Physics__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Physics::Physics",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Physics::Physics",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Physics *)new Physics((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_OpenBinFileForQuickWrite(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenBinFileForQuickWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenBinFileForQuickWrite",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenBinFileForQuickWrite",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenBinFileForQuickWrite",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenBinFileForQuickWrite((char const *)arg2);
  
=======
static int _wrap_new_Physics__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Physics::Physics",0,0)
  result = (Physics *)new Physics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_CloseFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("data_base::CloseFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CloseFile",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::CloseFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CloseFile",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_CloseFile",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->CloseFile((std::string const &)*arg2);
=======
static int _wrap_new_Physics(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Physics__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Physics__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Physics'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Physics::Physics(char const *)\n"
    "    Physics::Physics()\n");
  lua_error(L);return 0;
}


static int _wrap_Physics_Update_Position(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::Update_Position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Update_Position",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::Update_Position",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Update_Position",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->Update_Position(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_CloseFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::CloseFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CloseFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CloseFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->CloseFile();
=======
static int _wrap_Physics_ChangePlanetGravitationalConstant(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Physics::ChangePlanetGravitationalConstant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::ChangePlanetGravitationalConstant",1,"Physics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Physics::ChangePlanetGravitationalConstant",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_ChangePlanetGravitationalConstant",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->ChangePlanetGravitationalConstant(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_CloseFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_data_base_CloseFile__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_data_base_CloseFile__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_CloseFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::CloseFile(std::string const &)\n"
    "    data_base::CloseFile()\n");
  lua_error(L);return 0;
}


static int _wrap_data_base_GetMode(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::GetMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetMode",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetMode",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->GetMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Physics_Load_Physics(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Physics::Load_Physics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::Load_Physics",1,"Physics *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Physics::Load_Physics",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_Load_Physics",1,SWIGTYPE_p_Physics);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->Load_Physics((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Physics_GetCharge(lua_State* L) {
  int SWIG_arg = 0;
  Physics *arg1 = (Physics *) 0 ;
  double result;
  
  SWIG_check_num_args("Physics::GetCharge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Physics::GetCharge",1,"Physics const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Physics,0))){
    SWIG_fail_ptr("Physics_GetCharge",1,SWIGTYPE_p_Physics);
  }
  
  result = (double)((Physics const *)arg1)->GetCharge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_WriteValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("data_base::WriteValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValue",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::WriteValue",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("data_base::WriteValue",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValue",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValue",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValue",3,SWIGTYPE_p_std__string);
  }
  
  (arg1)->WriteValue((std::string const &)*arg2,(std::string const &)*arg3);
  
=======
static void swig_delete_Physics(void *obj) {
Physics *arg1 = (Physics *) obj;
delete arg1;
}
static int _proxy__wrap_new_Physics(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Physics);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Physics_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Physics_methods[]= {
    { "NewtonianForce", _wrap_Physics_NewtonianForce},
    { "Relativity", _wrap_Physics_Relativity},
    { "rel_NewtonianForce", _wrap_Physics_rel_NewtonianForce},
    { "rel_CalculateForceB", _wrap_Physics_rel_CalculateForceB},
    { "Impulse", _wrap_Physics_Impulse},
    { "Friction", _wrap_Physics_Friction},
    { "Update_Velocity", _wrap_Physics_Update_Velocity},
    { "UpdateForce", _wrap_Physics_UpdateForce},
    { "Update_Acceleration", _wrap_Physics_Update_Acceleration},
    { "math_CalculateDirectionDegrees", _wrap_Physics_math_CalculateDirectionDegrees},
    { "GetDistance", _wrap_Physics_GetDistance},
    { "GetLoc", _wrap_Physics_GetLoc},
    { "GetMU", _wrap_Physics_GetMU},
    { "GetMass", _wrap_Physics_GetMass},
    { "GetB2DDirection", _wrap_Physics_GetB2DDirection},
    { "GetBMagnitude", _wrap_Physics_GetBMagnitude},
    { "GetGravity", _wrap_Physics_GetGravity},
    { "GetVelocity", _wrap_Physics_GetVelocity},
    { "GetElasticity", _wrap_Physics_GetElasticity},
    { "math_CalculateForceFromChargedParticles", _wrap_Physics_math_CalculateForceFromChargedParticles},
    { "math_CalculateEField", _wrap_Physics_math_CalculateEField},
    { "math_Sign", _wrap_Physics_math_Sign},
    { "math_CalculateMomentum", _wrap_Physics_math_CalculateMomentum},
    { "math_CalculateForceFromMagneticField", _wrap_Physics_math_CalculateForceFromMagneticField},
    { "GetForceCount", _wrap_Physics_GetForceCount},
    { "isUnmovable", _wrap_Physics_isUnmovable},
    { "SetForceCount", _wrap_Physics_SetForceCount},
    { "SetForceCountDouble", _wrap_Physics_SetForceCountDouble},
    { "SetLoc", _wrap_Physics_SetLoc},
    { "SetVelocity", _wrap_Physics_SetVelocity},
    { "AddForce", _wrap_Physics_AddForce},
    { "Update_Position", _wrap_Physics_Update_Position},
    { "ChangePlanetGravitationalConstant", _wrap_Physics_ChangePlanetGravitationalConstant},
    { "Load_Physics", _wrap_Physics_Load_Physics},
    { "GetCharge", _wrap_Physics_GetCharge},
    {0,0}
};
static swig_lua_method swig_Physics_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Physics_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Physics_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Physics_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Physics_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Physics_Sf_SwigStatic = {
    "Physics",
    swig_Physics_Sf_SwigStatic_methods,
    swig_Physics_Sf_SwigStatic_attributes,
    swig_Physics_Sf_SwigStatic_constants,
    swig_Physics_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Physics_bases[] = {0};
static const char *swig_Physics_base_names[] = {0};
static swig_lua_class _wrap_class_Physics = { "Physics", "Physics", &SWIGTYPE_p_Physics,_proxy__wrap_new_Physics, swig_delete_Physics, swig_Physics_methods, swig_Physics_attributes, &swig_Physics_Sf_SwigStatic, swig_Physics_meta, swig_Physics_bases, swig_Physics_base_names };

static int _wrap_CalculateDistance(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = 0 ;
  math_point *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("CalculateDistance",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("CalculateDistance",1,"math_point const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("CalculateDistance",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("CalculateDistance",1,SWIGTYPE_p_math_point);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("CalculateDistance",2,SWIGTYPE_p_math_point);
  }
  
  result = CalculateDistance((math_point const &)*arg1,(math_point const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_data_base__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  bool arg2 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("data_base::data_base",1,"char const []");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("data_base::data_base",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (data_base *)new data_base((char const (*))arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_WriteValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("data_base::WriteValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValue",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::WriteValue",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValue",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValue",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->WriteValue((std::string const &)*arg2);
  
=======
static int _wrap_new_data_base__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("data_base::data_base",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (data_base *)new data_base((char const (*))arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_data_base__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  data_base *result = 0 ;
  
  SWIG_check_num_args("data_base::data_base",0,0)
  result = (data_base *)new data_base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_WriteValue(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_data_base_WriteValue__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_data_base_WriteValue__SWIG_0(L);
        }
=======
static int _wrap_new_data_base(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_data_base__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_data_base__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_data_base__SWIG_0(L);
>>>>>>> TheIllusiveMan
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_WriteValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::WriteValue(std::string const &,std::string const &)\n"
    "    data_base::WriteValue(std::string const &)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_data_base'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::data_base(char const [],bool)\n"
    "    data_base::data_base(char const [])\n"
    "    data_base::data_base()\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_data_base_WriteValueWithLineIndex(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("data_base::WriteValueWithLineIndex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValueWithLineIndex",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValueWithLineIndex",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValueWithLineIndex",3,SWIGTYPE_p_std__string);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->WriteValueWithLineIndex((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  
=======
static int _wrap_data_base_GetStrBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrBuffer",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrBuffer",1,SWIGTYPE_p_data_base);
  }
  
  result = ((data_base const *)arg1)->GetStrBuffer();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_WriteValueAndFlush(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("data_base::WriteValueAndFlush",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValueAndFlush",1,"data_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::WriteValueAndFlush",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValueAndFlush",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_WriteValueAndFlush",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->WriteValueAndFlush((std::string const &)*arg2);
  
=======
static int _wrap_data_base_GetValueFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  double result;
  
  SWIG_check_num_args("data_base::GetValueFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetValueFromData",1,"data_base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::GetValueFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetValueFromData",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (double)((data_base const *)arg1)->GetValueFromData((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetLineCount(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  int result;
  
  SWIG_check_num_args("data_base::GetLineCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetLineCount",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetLineCount",1,SWIGTYPE_p_data_base);
  }
  
  result = (int)((data_base const *)arg1)->GetLineCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_data_base_GetStrFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrFromData",1,"data_base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::GetStrFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrFromData",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((data_base const *)arg1)->GetStrFromData((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetNumInstances(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("data_base::GetNumInstances",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetNumInstances",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::GetNumInstances",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetNumInstances",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_GetNumInstances",2,SWIGTYPE_p_std__string);
  }
  
  result = (int)((data_base const *)arg1)->GetNumInstances((std::string const &)*arg2);
=======
static int _wrap_data_base_GetIntFromData(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("data_base::GetIntFromData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetIntFromData",1,"data_base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::GetIntFromData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetIntFromData",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)((data_base const *)arg1)->GetIntFromData((std::string const &)*arg2);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_GetLastOutput(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetLastOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetLastOutput",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetLastOutput",1,SWIGTYPE_p_data_base);
  }
  
  result = ((data_base const *)arg1)->GetLastOutput();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_data_base_GetValueFromDataWithLine(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string temp2 ;
  double result;
  
  SWIG_check_num_args("data_base::GetValueFromDataWithLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",1,"data_base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("data_base::GetValueFromDataWithLine",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetValueFromDataWithLine",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (double)((data_base const *)arg1)->GetValueFromDataWithLine((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_isOutputOpen(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::isOutputOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::isOutputOpen",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_isOutputOpen",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->isOutputOpen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_data_base_GetStrFromDataWithLine(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetStrFromDataWithLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",1,"data_base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("data_base::GetStrFromDataWithLine",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStrFromDataWithLine",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = ((data_base const *)arg1)->GetStrFromDataWithLine((std::string const &)*arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_SearchTermExists(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::SearchTermExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::SearchTermExists",1,"data_base const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("data_base::SearchTermExists",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_SearchTermExists",1,SWIGTYPE_p_data_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("data_base_SearchTermExists",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((data_base const *)arg1)->SearchTermExists((std::string const &)*arg2);
=======
static int _wrap_data_base_GetStateOfInternalBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::GetStateOfInternalBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetStateOfInternalBuffer",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetStateOfInternalBuffer",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->GetStateOfInternalBuffer();
>>>>>>> TheIllusiveMan
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_RestoreFileContents(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::RestoreFileContents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::RestoreFileContents",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_RestoreFileContents",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->RestoreFileContents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_RefreshFile(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::RefreshFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::RefreshFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_RefreshFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->RefreshFile();
  
=======
static int _wrap_data_base_OpenFileAndGetBinBuffer(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::OpenFileAndGetBinBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFileAndGetBinBuffer",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFileAndGetBinBuffer",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFileAndGetBinBuffer",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->OpenFileAndGetBinBuffer(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_CreateNewFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CreateNewFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::CreateNewFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CreateNewFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->CreateNewFile((char const *)arg2);
=======
static int _wrap_data_base_OpenFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("data_base::OpenFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFile",2,"char const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("data_base::OpenFile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->OpenFile((char const *)arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_CreateNewFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CreateNewFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CreateNewFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->CreateNewFile();
=======
static int _wrap_data_base_OpenFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenFile((char const *)arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_data_base_CreateNewFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
=======
static int _wrap_data_base_OpenFile(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
>>>>>>> TheIllusiveMan
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
<<<<<<< HEAD
      return _wrap_data_base_CreateNewFile__SWIG_1(L);
    }
  }
  if (argc == 2) {
=======
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_data_base_OpenFile__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
>>>>>>> TheIllusiveMan
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
<<<<<<< HEAD
        return _wrap_data_base_CreateNewFile__SWIG_0(L);
=======
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_data_base_OpenFile__SWIG_0(L);
        }
>>>>>>> TheIllusiveMan
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_CreateNewFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::CreateNewFile(char const *)\n"
    "    data_base::CreateNewFile()\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_OpenFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::OpenFile(char const *,bool)\n"
    "    data_base::OpenFile(char const *)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_data_base_CreateNewFile_static(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile_static",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("data_base::CreateNewFile_static",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  data_base::CreateNewFile_static((char const *)arg1);
=======
static int _wrap_data_base_OpenFileForQuickWrite(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenFileForQuickWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenFileForQuickWrite",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenFileForQuickWrite",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenFileForQuickWrite",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenFileForQuickWrite((char const *)arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_data_base(void *obj) {
data_base *arg1 = (data_base *) obj;
delete arg1;
}
static swig_lua_method swig_data_base_methods[] = {
    {"GetStrBuffer", _wrap_data_base_GetStrBuffer}, 
    {"GetValueFromData", _wrap_data_base_GetValueFromData}, 
    {"GetStrFromData", _wrap_data_base_GetStrFromData}, 
    {"GetIntFromData", _wrap_data_base_GetIntFromData}, 
    {"GetValueFromDataWithLine", _wrap_data_base_GetValueFromDataWithLine}, 
    {"GetStrFromDataWithLine", _wrap_data_base_GetStrFromDataWithLine}, 
    {"GetStateOfInternalBuffer", _wrap_data_base_GetStateOfInternalBuffer}, 
    {"OpenFileAndGetBinBuffer", _wrap_data_base_OpenFileAndGetBinBuffer}, 
    {"OpenFile", _wrap_data_base_OpenFile}, 
    {"OpenFileForQuickWrite", _wrap_data_base_OpenFileForQuickWrite}, 
    {"OpenBinFileForQuickWrite", _wrap_data_base_OpenBinFileForQuickWrite}, 
    {"CloseFile", _wrap_data_base_CloseFile}, 
    {"GetMode", _wrap_data_base_GetMode}, 
    {"WriteValue", _wrap_data_base_WriteValue}, 
    {"WriteValueWithLineIndex", _wrap_data_base_WriteValueWithLineIndex}, 
    {"WriteValueAndFlush", _wrap_data_base_WriteValueAndFlush}, 
    {"GetLineCount", _wrap_data_base_GetLineCount}, 
    {"GetNumInstances", _wrap_data_base_GetNumInstances}, 
    {"GetLastOutput", _wrap_data_base_GetLastOutput}, 
    {"isOutputOpen", _wrap_data_base_isOutputOpen}, 
    {"SearchTermExists", _wrap_data_base_SearchTermExists}, 
    {"RestoreFileContents", _wrap_data_base_RestoreFileContents}, 
    {"RefreshFile", _wrap_data_base_RefreshFile}, 
    {"CreateNewFile", _wrap_data_base_CreateNewFile}, 
    {0,0}
};
static swig_lua_attribute swig_data_base_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_data_base_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_data_base_cls_methods[] = {
    {"CreateNewFile_static", _wrap_data_base_CreateNewFile_static}, 
    {0,0}
};
static swig_lua_const_info swig_data_base_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_data_base_bases[] = {0};
static const char *swig_data_base_base_names[] = {0};
static swig_lua_class _wrap_class_data_base = { "data_base", &SWIGTYPE_p_data_base,_wrap_new_data_base, swig_delete_data_base, swig_data_base_methods, swig_data_base_attributes, { "data_base", swig_data_base_cls_methods, swig_data_base_cls_attributes, swig_data_base_cls_constants }, swig_data_base_bases, swig_data_base_base_names };

static int _wrap_copyfile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("copyfile",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("copyfile",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copyfile",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("copyfile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("copyfile",1,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("copyfile",2,SWIGTYPE_p_std__string);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)copyfile((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_data_base_OpenBinFileForQuickWrite(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::OpenBinFileForQuickWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::OpenBinFileForQuickWrite",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::OpenBinFileForQuickWrite",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_OpenBinFileForQuickWrite",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->OpenBinFileForQuickWrite((char const *)arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_copyfile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("copyfile",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("copyfile",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("copyfile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("copyfile",1,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("copyfile",2,SWIGTYPE_p_std__string);
  }
  
  result = (bool)copyfile((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_data_base_CloseFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("data_base::CloseFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CloseFile",1,"data_base *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::CloseFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CloseFile",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->CloseFile((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_CloseFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::CloseFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CloseFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CloseFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->CloseFile();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_copyfile(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
static int _wrap_data_base_CloseFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
<<<<<<< HEAD
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_copyfile__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
      return _wrap_data_base_CloseFile__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_copyfile__SWIG_0(L);
        }
=======
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_data_base_CloseFile__SWIG_0(L);
>>>>>>> TheIllusiveMan
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'copyfile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    copyfile(std::string const &,std::string const &,bool)\n"
    "    copyfile(std::string const &,std::string const &)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_CloseFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::CloseFile(std::string const &)\n"
    "    data_base::CloseFile()\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_draw_base_Load_Texture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("draw_base::Load_Texture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::Load_Texture",1,"draw_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("draw_base::Load_Texture",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::Load_Texture",3,"SDL_Renderer &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw_base::Load_Texture",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->Load_Texture((char const *)arg2,*arg3,arg4);
=======
static int _wrap_data_base_GetMode(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::GetMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetMode",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetMode",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->GetMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_data_base_WriteValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("data_base::WriteValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValue",1,"data_base *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::WriteValue",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("data_base::WriteValue",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValue",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->WriteValue((std::string const &)*arg2,(std::string const &)*arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_Load_Texture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  
  SWIG_check_num_args("draw_base::Load_Texture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::Load_Texture",1,"draw_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("draw_base::Load_Texture",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::Load_Texture",3,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->Load_Texture((char const *)arg2,*arg3);
=======
static int _wrap_data_base_WriteValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("data_base::WriteValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValue",1,"data_base *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::WriteValue",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValue",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->WriteValue((std::string const &)*arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_Load_Texture(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
=======
static int _wrap_data_base_WriteValue(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_draw_base_Load_Texture__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
=======
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_data_base_WriteValue__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_draw_base_Load_Texture__SWIG_0(L);
          }
=======
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_data_base_WriteValue__SWIG_0(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'draw_base_Load_Texture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    draw_base::Load_Texture(char const *,SDL_Renderer &,int)\n"
    "    draw_base::Load_Texture(char const *,SDL_Renderer &)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_WriteValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::WriteValue(std::string const &,std::string const &)\n"
    "    data_base::WriteValue(std::string const &)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_draw_base_apply_surface(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int arg2 ;
  int arg3 ;
  SDL_Renderer *arg4 = 0 ;
  
  SWIG_check_num_args("draw_base::apply_surface",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::apply_surface",1,"draw_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("draw_base::apply_surface",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("draw_base::apply_surface",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("draw_base::apply_surface",4,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_apply_surface",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_apply_surface",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->apply_surface(arg2,arg3,*arg4);
=======
static int _wrap_data_base_WriteValueWithLineIndex(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("data_base::WriteValueWithLineIndex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",1,"data_base *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("data_base::WriteValueWithLineIndex",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValueWithLineIndex",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->WriteValueWithLineIndex((std::string const &)*arg2,(std::string const &)*arg3,arg4);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_GetHeightOfMainRect(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetHeightOfMainRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetHeightOfMainRect",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetHeightOfMainRect",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetHeightOfMainRect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_data_base_WriteValueAndFlush(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("data_base::WriteValueAndFlush",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::WriteValueAndFlush",1,"data_base *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::WriteValueAndFlush",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_WriteValueAndFlush",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->WriteValueAndFlush((std::string const &)*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_GetWidthOfMainRect(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetWidthOfMainRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetWidthOfMainRect",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetWidthOfMainRect",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetWidthOfMainRect();
=======
static int _wrap_data_base_GetLineCount(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  int result;
  
  SWIG_check_num_args("data_base::GetLineCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetLineCount",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetLineCount",1,SWIGTYPE_p_data_base);
  }
  
  result = (int)((data_base const *)arg1)->GetLineCount();
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_GetAnimCounter(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetAnimCounter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetAnimCounter",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetAnimCounter",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetAnimCounter();
=======
static int _wrap_data_base_GetNumInstances(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("data_base::GetNumInstances",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetNumInstances",1,"data_base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::GetNumInstances",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetNumInstances",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)((data_base const *)arg1)->GetNumInstances((std::string const &)*arg2);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_GetDOM(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("draw_base::GetDOM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetDOM",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetDOM",1,SWIGTYPE_p_draw_base);
  }
  
  result = (data_base *)((draw_base const *)arg1)->GetDOM();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,0); SWIG_arg++; 
=======
static int _wrap_data_base_GetLastOutput(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string result;
  
  SWIG_check_num_args("data_base::GetLastOutput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::GetLastOutput",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_GetLastOutput",1,SWIGTYPE_p_data_base);
  }
  
  result = ((data_base const *)arg1)->GetLastOutput();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_isNoLoop(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("draw_base::isNoLoop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::isNoLoop",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_isNoLoop",1,SWIGTYPE_p_draw_base);
  }
  
  result = (bool)((draw_base const *)arg1)->isNoLoop();
=======
static int _wrap_data_base_isOutputOpen(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("data_base::isOutputOpen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::isOutputOpen",1,"data_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_isOutputOpen",1,SWIGTYPE_p_data_base);
  }
  
  result = (bool)((data_base const *)arg1)->isOutputOpen();
>>>>>>> TheIllusiveMan
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_GetTexture(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_Texture *result = 0 ;
  
  SWIG_check_num_args("draw_base::GetTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetTexture",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetTexture",1,SWIGTYPE_p_draw_base);
  }
  
  result = (SDL_Texture *) &((draw_base const *)arg1)->GetTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Texture,0); SWIG_arg++; 
=======
static int _wrap_data_base_SearchTermExists(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("data_base::SearchTermExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::SearchTermExists",1,"data_base const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("data_base::SearchTermExists",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_SearchTermExists",1,SWIGTYPE_p_data_base);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((data_base const *)arg1)->SearchTermExists((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_setColor(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  Uint8 arg2 ;
  Uint8 arg3 ;
  Uint8 arg4 ;
  Uint8 *argp2 ;
  Uint8 *argp3 ;
  Uint8 *argp4 ;
  
  SWIG_check_num_args("draw_base::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setColor",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setColor",2,"Uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::setColor",3,"Uint8");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("draw_base::setColor",4,"Uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setColor",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",2,SWIGTYPE_p_Uint8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",3,SWIGTYPE_p_Uint8);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",4,SWIGTYPE_p_Uint8);
  }
  arg4 = *argp4;
  
  (arg1)->setColor(arg2,arg3,arg4);
=======
static int _wrap_data_base_RestoreFileContents(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::RestoreFileContents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::RestoreFileContents",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_RestoreFileContents",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->RestoreFileContents();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_setBlendMode(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_BlendMode arg2 ;
  SDL_BlendMode *argp2 ;
  
  SWIG_check_num_args("draw_base::setBlendMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setBlendMode",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setBlendMode",2,"SDL_BlendMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setBlendMode",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SDL_BlendMode,0))){
    SWIG_fail_ptr("draw_base_setBlendMode",2,SWIGTYPE_p_SDL_BlendMode);
  }
  arg2 = *argp2;
  
  (arg1)->setBlendMode(arg2);
=======
static int _wrap_data_base_RefreshFile(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::RefreshFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::RefreshFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_RefreshFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->RefreshFile();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_setAlpha(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  Uint8 arg2 ;
  Uint8 *argp2 ;
  
  SWIG_check_num_args("draw_base::setAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setAlpha",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setAlpha",2,"Uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setAlpha",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setAlpha",2,SWIGTYPE_p_Uint8);
  }
  arg2 = *argp2;
  
  (arg1)->setAlpha(arg2);
=======
static int _wrap_data_base_CreateNewFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CreateNewFile",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::CreateNewFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CreateNewFile",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->CreateNewFile((char const *)arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_ClearTexture(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  
  SWIG_check_num_args("draw_base::ClearTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::ClearTexture",1,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_ClearTexture",1,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->ClearTexture();
=======
static int _wrap_data_base_CreateNewFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CreateNewFile",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CreateNewFile",1,SWIGTYPE_p_data_base);
  }
  
  (arg1)->CreateNewFile();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_draw_base_SetTextureFromPointer(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_Texture *arg2 = (SDL_Texture *) 0 ;
  
  SWIG_check_num_args("draw_base::SetTextureFromPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::SetTextureFromPointer",1,"draw_base *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("draw_base::SetTextureFromPointer",2,"SDL_Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromPointer",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromPointer",2,SWIGTYPE_p_SDL_Texture);
  }
  
  (arg1)->SetTextureFromPointer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_SetTextureFromRef(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_Texture *arg2 = 0 ;
  
  SWIG_check_num_args("draw_base::SetTextureFromRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::SetTextureFromRef",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::SetTextureFromRef",2,"SDL_Texture &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromRef",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromRef",2,SWIGTYPE_p_SDL_Texture);
  }
  
  (arg1)->SetTextureFromRef(*arg2);
=======
static int _wrap_data_base_CreateNewFile(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_data_base_CreateNewFile__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_data_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_data_base_CreateNewFile__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'data_base_CreateNewFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    data_base::CreateNewFile(char const *)\n"
    "    data_base::CreateNewFile()\n");
  lua_error(L);return 0;
}


static int _wrap_data_base_CreateNewFile_static(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::CreateNewFile_static",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::CreateNewFile_static",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::CreateNewFile_static",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_CreateNewFile_static",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->CreateNewFile_static((char const *)arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_draw_base(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("draw_base::draw_base",0,0)
  result = (draw_base *)new draw_base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,1); SWIG_arg++; 
=======
static int _wrap_data_base_BUFFER_set(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("data_base::BUFFER",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::BUFFER",1,"data_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("data_base::BUFFER",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_BUFFER_set",1,SWIGTYPE_p_data_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->BUFFER = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BUFFER, (const char *)arg2);
    } else {
      arg1->BUFFER = 0;
    }
  }
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_draw_base(void *obj) {
draw_base *arg1 = (draw_base *) obj;
delete arg1;
}
static swig_lua_method swig_draw_base_methods[] = {
    {"Load_Texture", _wrap_draw_base_Load_Texture}, 
    {"apply_surface", _wrap_draw_base_apply_surface}, 
    {"GetHeightOfMainRect", _wrap_draw_base_GetHeightOfMainRect}, 
    {"GetWidthOfMainRect", _wrap_draw_base_GetWidthOfMainRect}, 
    {"GetAnimCounter", _wrap_draw_base_GetAnimCounter}, 
    {"GetDOM", _wrap_draw_base_GetDOM}, 
    {"isNoLoop", _wrap_draw_base_isNoLoop}, 
    {"GetTexture", _wrap_draw_base_GetTexture}, 
    {"setColor", _wrap_draw_base_setColor}, 
    {"setBlendMode", _wrap_draw_base_setBlendMode}, 
    {"setAlpha", _wrap_draw_base_setAlpha}, 
    {"ClearTexture", _wrap_draw_base_ClearTexture}, 
    {"SetTextureFromPointer", _wrap_draw_base_SetTextureFromPointer}, 
    {"SetTextureFromRef", _wrap_draw_base_SetTextureFromRef}, 
    {0,0}
};
static swig_lua_attribute swig_draw_base_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_draw_base_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_draw_base_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_draw_base_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_draw_base_bases[] = {0};
static const char *swig_draw_base_base_names[] = {0};
static swig_lua_class _wrap_class_draw_base = { "draw_base", &SWIGTYPE_p_draw_base,_wrap_new_draw_base, swig_delete_draw_base, swig_draw_base_methods, swig_draw_base_attributes, { "draw_base", swig_draw_base_cls_methods, swig_draw_base_cls_attributes, swig_draw_base_cls_constants }, swig_draw_base_bases, swig_draw_base_base_names };

static int _wrap_apply_surface__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  SWIG_check_num_args("apply_surface",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("apply_surface",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("apply_surface",6,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  apply_surface(arg1,arg2,*arg3,*arg4,arg5,arg6);
  
=======
static int _wrap_data_base_BUFFER_get(lua_State* L) {
  int SWIG_arg = 0;
  data_base *arg1 = (data_base *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("data_base::BUFFER",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data_base::BUFFER",1,"data_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_data_base,0))){
    SWIG_fail_ptr("data_base_BUFFER_get",1,SWIGTYPE_p_data_base);
  }
  
  result = (char *) ((arg1)->BUFFER);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_apply_surface__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  int arg5 ;
  
  SWIG_check_num_args("apply_surface",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("apply_surface",5,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  apply_surface(arg1,arg2,*arg3,*arg4,arg5);
  
=======
static void swig_delete_data_base(void *obj) {
data_base *arg1 = (data_base *) obj;
delete arg1;
}
static int _proxy__wrap_new_data_base(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_data_base);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_data_base_attributes[] = {
    { "BUFFER", _wrap_data_base_BUFFER_get, _wrap_data_base_BUFFER_set },
    {0,0,0}
};
static swig_lua_method swig_data_base_methods[]= {
    { "GetStrBuffer", _wrap_data_base_GetStrBuffer},
    { "GetValueFromData", _wrap_data_base_GetValueFromData},
    { "GetStrFromData", _wrap_data_base_GetStrFromData},
    { "GetIntFromData", _wrap_data_base_GetIntFromData},
    { "GetValueFromDataWithLine", _wrap_data_base_GetValueFromDataWithLine},
    { "GetStrFromDataWithLine", _wrap_data_base_GetStrFromDataWithLine},
    { "GetStateOfInternalBuffer", _wrap_data_base_GetStateOfInternalBuffer},
    { "OpenFileAndGetBinBuffer", _wrap_data_base_OpenFileAndGetBinBuffer},
    { "OpenFile", _wrap_data_base_OpenFile},
    { "OpenFileForQuickWrite", _wrap_data_base_OpenFileForQuickWrite},
    { "OpenBinFileForQuickWrite", _wrap_data_base_OpenBinFileForQuickWrite},
    { "CloseFile", _wrap_data_base_CloseFile},
    { "GetMode", _wrap_data_base_GetMode},
    { "WriteValue", _wrap_data_base_WriteValue},
    { "WriteValueWithLineIndex", _wrap_data_base_WriteValueWithLineIndex},
    { "WriteValueAndFlush", _wrap_data_base_WriteValueAndFlush},
    { "GetLineCount", _wrap_data_base_GetLineCount},
    { "GetNumInstances", _wrap_data_base_GetNumInstances},
    { "GetLastOutput", _wrap_data_base_GetLastOutput},
    { "isOutputOpen", _wrap_data_base_isOutputOpen},
    { "SearchTermExists", _wrap_data_base_SearchTermExists},
    { "RestoreFileContents", _wrap_data_base_RestoreFileContents},
    { "RefreshFile", _wrap_data_base_RefreshFile},
    { "CreateNewFile", _wrap_data_base_CreateNewFile},
    { "CreateNewFile_static", _wrap_data_base_CreateNewFile_static},
    {0,0}
};
static swig_lua_method swig_data_base_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_data_base_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_data_base_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_data_base_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_data_base_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_data_base_Sf_SwigStatic = {
    "data_base",
    swig_data_base_Sf_SwigStatic_methods,
    swig_data_base_Sf_SwigStatic_attributes,
    swig_data_base_Sf_SwigStatic_constants,
    swig_data_base_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_data_base_bases[] = {0};
static const char *swig_data_base_base_names[] = {0};
static swig_lua_class _wrap_class_data_base = { "data_base", "data_base", &SWIGTYPE_p_data_base,_proxy__wrap_new_data_base, swig_delete_data_base, swig_data_base_methods, swig_data_base_attributes, &swig_data_base_Sf_SwigStatic, swig_data_base_meta, swig_data_base_bases, swig_data_base_base_names };

static int _wrap_copyfile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string temp1 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("copyfile",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("copyfile",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("copyfile",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("copyfile",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)copyfile((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_apply_surface__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  
  SWIG_check_num_args("apply_surface",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  apply_surface(arg1,arg2,*arg3,*arg4);
  
=======
static int _wrap_copyfile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("copyfile",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("copyfile",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("copyfile",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)copyfile((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_apply_surface(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_apply_surface__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
=======
static int _wrap_copyfile(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_copyfile__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_copyfile__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'copyfile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    copyfile(std::string const &,std::string const &,bool)\n"
    "    copyfile(std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_get_bin_buffer(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  size_t *arg2 = 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("get_bin_buffer",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("get_bin_buffer",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("get_bin_buffer",2,"size_t &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("get_bin_buffer",2,SWIGTYPE_p_size_t);
  }
  
  result = (unsigned char *)get_bin_buffer((char const *)arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_Load_Texture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  int arg4 ;
  
  SWIG_check_num_args("draw_base::Load_Texture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::Load_Texture",1,"draw_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("draw_base::Load_Texture",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::Load_Texture",3,"SDL_Renderer &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw_base::Load_Texture",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->Load_Texture((char const *)arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_Load_Texture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  
  SWIG_check_num_args("draw_base::Load_Texture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::Load_Texture",1,"draw_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("draw_base::Load_Texture",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::Load_Texture",3,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_Load_Texture",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->Load_Texture((char const *)arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_Load_Texture(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
>>>>>>> TheIllusiveMan
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
<<<<<<< HEAD
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_apply_surface__SWIG_1(L);
            }
          }
=======
          return _wrap_draw_base_Load_Texture__SWIG_1(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
=======
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
>>>>>>> TheIllusiveMan
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
<<<<<<< HEAD
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_apply_surface__SWIG_0(L);
              }
            }
=======
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_draw_base_Load_Texture__SWIG_0(L);
>>>>>>> TheIllusiveMan
          }
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'apply_surface'\n"
    "  Possible C/C++ prototypes are:\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &,int,int)\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &,int)\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'draw_base_Load_Texture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    draw_base::Load_Texture(char const *,SDL_Renderer &,int)\n"
    "    draw_base::Load_Texture(char const *,SDL_Renderer &)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_LoadTexture(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  SDL_Texture *result = 0 ;
  
  SWIG_check_num_args("LoadTexture",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LoadTexture",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LoadTexture",2,"SDL_Renderer &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("LoadTexture",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (SDL_Texture *)LoadTexture((char const *)arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Texture,0); SWIG_arg++; 
=======
static int _wrap_draw_base_apply_surface(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int arg2 ;
  int arg3 ;
  SDL_Renderer *arg4 = 0 ;
  
  SWIG_check_num_args("draw_base::apply_surface",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::apply_surface",1,"draw_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("draw_base::apply_surface",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("draw_base::apply_surface",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("draw_base::apply_surface",4,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_apply_surface",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_apply_surface",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->apply_surface(arg2,arg3,*arg4);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_UI(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  UI *result = 0 ;
  
  SWIG_check_num_args("UI::UI",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("UI::UI",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("UI::UI",2,"SDL_Renderer &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_UI",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (UI *)new UI((char const *)arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UI,1); SWIG_arg++; 
=======
static int _wrap_draw_base_GetHeightOfMainRect(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetHeightOfMainRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetHeightOfMainRect",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetHeightOfMainRect",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetHeightOfMainRect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_UI_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  bool result;
  
  SWIG_check_num_args("UI::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::isVisible",1,"UI const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_isVisible",1,SWIGTYPE_p_UI);
  }
  
  result = (bool)((UI const *)arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_draw_base_GetWidthOfMainRect(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetWidthOfMainRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetWidthOfMainRect",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetWidthOfMainRect",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetWidthOfMainRect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_UI_toggleVisibility(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::toggleVisibility",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::toggleVisibility",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_toggleVisibility",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->toggleVisibility();
  
=======
static int _wrap_draw_base_GetAnimCounter(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  int result;
  
  SWIG_check_num_args("draw_base::GetAnimCounter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetAnimCounter",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetAnimCounter",1,SWIGTYPE_p_draw_base);
  }
  
  result = (int)((draw_base const *)arg1)->GetAnimCounter();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_UI_Update(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::Update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::Update",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_Update",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->Update();
  
=======
static int _wrap_draw_base_isNoLoop(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("draw_base::isNoLoop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::isNoLoop",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_isNoLoop",1,SWIGTYPE_p_draw_base);
  }
  
  result = (bool)((draw_base const *)arg1)->isNoLoop();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_UI_ProcessEvents(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  SDL_Event *arg2 = (SDL_Event *) 0 ;
  
  SWIG_check_num_args("UI::ProcessEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::ProcessEvents",1,"UI *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("UI::ProcessEvents",2,"SDL_Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_ProcessEvents",1,SWIGTYPE_p_UI);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("UI_ProcessEvents",2,SWIGTYPE_p_SDL_Event);
  }
  
  (arg1)->ProcessEvents(arg2);
  
=======
static int _wrap_draw_base_GetTexture(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_Texture *result = 0 ;
  
  SWIG_check_num_args("draw_base::GetTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetTexture",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetTexture",1,SWIGTYPE_p_draw_base);
  }
  
  result = (SDL_Texture *) &((draw_base const *)arg1)->GetTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_GetTextureNode(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  TextureNode *result = 0 ;
  
  SWIG_check_num_args("draw_base::GetTextureNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::GetTextureNode",1,"draw_base const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_GetTextureNode",1,SWIGTYPE_p_draw_base);
  }
  
  result = (TextureNode *)((draw_base const *)arg1)->GetTextureNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureNode,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_UI_AddNumToPBar(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("UI::AddNumToPBar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::AddNumToPBar",1,"UI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UI::AddNumToPBar",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("UI::AddNumToPBar",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_AddNumToPBar",1,SWIGTYPE_p_UI);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("UI_AddNumToPBar",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->AddNumToPBar(arg2,arg3);
=======
static int _wrap_draw_base_setColor(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  Uint8 arg2 ;
  Uint8 arg3 ;
  Uint8 arg4 ;
  Uint8 *argp2 ;
  Uint8 *argp3 ;
  Uint8 *argp4 ;
  
  SWIG_check_num_args("draw_base::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setColor",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setColor",2,"Uint8");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("draw_base::setColor",3,"Uint8");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("draw_base::setColor",4,"Uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setColor",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",2,SWIGTYPE_p_Uint8);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",3,SWIGTYPE_p_Uint8);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setColor",4,SWIGTYPE_p_Uint8);
  }
  arg4 = *argp4;
  
  (arg1)->setColor(arg2,arg3,arg4);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_UI_Draw(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::Draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::Draw",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_Draw",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->Draw();
=======
static int _wrap_draw_base_setBlendMode(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  SDL_BlendMode arg2 ;
  SDL_BlendMode *argp2 ;
  
  SWIG_check_num_args("draw_base::setBlendMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setBlendMode",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setBlendMode",2,"SDL_BlendMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setBlendMode",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SDL_BlendMode,0))){
    SWIG_fail_ptr("draw_base_setBlendMode",2,SWIGTYPE_p_SDL_BlendMode);
  }
  arg2 = *argp2;
  
  (arg1)->setBlendMode(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_UI(void *obj) {
UI *arg1 = (UI *) obj;
delete arg1;
}
static swig_lua_method swig_UI_methods[] = {
    {"isVisible", _wrap_UI_isVisible}, 
    {"toggleVisibility", _wrap_UI_toggleVisibility}, 
    {"Update", _wrap_UI_Update}, 
    {"ProcessEvents", _wrap_UI_ProcessEvents}, 
    {"AddNumToPBar", _wrap_UI_AddNumToPBar}, 
    {"Draw", _wrap_UI_Draw}, 
    {0,0}
};
static swig_lua_attribute swig_UI_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_UI_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UI_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_UI_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_UI_bases[] = {0};
static const char *swig_UI_base_names[] = {0};
static swig_lua_class _wrap_class_UI = { "UI", &SWIGTYPE_p_UI,_wrap_new_UI, swig_delete_UI, swig_UI_methods, swig_UI_attributes, { "UI", swig_UI_cls_methods, swig_UI_cls_attributes, swig_UI_cls_constants }, swig_UI_bases, swig_UI_base_names };

static int _wrap_new_Unit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  Timer *arg5 = 0 ;
  bool arg6 ;
  bool arg7 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Unit::Unit",5,"Timer &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Unit::Unit",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Unit::Unit",7,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Unit",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("new_Unit",5,SWIGTYPE_p_Timer);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,*arg4,*arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
=======
static int _wrap_draw_base_setAlpha(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  Uint8 arg2 ;
  Uint8 *argp2 ;
  
  SWIG_check_num_args("draw_base::setAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setAlpha",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setAlpha",2,"Uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setAlpha",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Uint8,0))){
    SWIG_fail_ptr("draw_base_setAlpha",2,SWIGTYPE_p_Uint8);
  }
  arg2 = *argp2;
  
  (arg1)->setAlpha(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_Unit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  Timer *arg5 = 0 ;
  bool arg6 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Unit::Unit",5,"Timer &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Unit::Unit",6,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Unit",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("new_Unit",5,SWIGTYPE_p_Timer);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,*arg4,*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
=======
static int _wrap_draw_base_setRotationPivot(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  math_point arg2 ;
  math_point *argp2 ;
  
  SWIG_check_num_args("draw_base::setRotationPivot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::setRotationPivot",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::setRotationPivot",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_setRotationPivot",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("draw_base_setRotationPivot",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  (arg1)->setRotationPivot(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_Unit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  Timer *arg5 = 0 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Unit::Unit",5,"Timer &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Unit",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("new_Unit",5,SWIGTYPE_p_Timer);
  }
  
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,*arg4,*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
=======
static int _wrap_draw_base_flip__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("draw_base::flip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::flip",1,"draw_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("draw_base::flip",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_flip",1,SWIGTYPE_p_draw_base);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->flip(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_draw_base_flip__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  
  SWIG_check_num_args("draw_base::flip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::flip",1,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_flip",1,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->flip();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_Unit(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Timer, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_Unit__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Timer, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_Unit__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Timer, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_Unit__SWIG_0(L);
                }
              }
            }
          }
        }
=======
static int _wrap_draw_base_flip(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_draw_base_flip__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_draw_base_flip__SWIG_0(L);
>>>>>>> TheIllusiveMan
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Unit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer &,Timer &,bool,bool)\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer &,Timer &,bool)\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer &,Timer &)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'draw_base_flip'\n"
    "  Possible C/C++ prototypes are:\n"
    "    draw_base::flip(size_t)\n"
    "    draw_base::flip()\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_Unit_isMelee(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Unit::isMelee",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::isMelee",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isMelee",1,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Unit const *)arg1)->isMelee();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_LoadScript(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  ScriptWrap *arg2 = (ScriptWrap *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadScript",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadScript",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::LoadScript",2,"ScriptWrap *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Unit::LoadScript",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadScript",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("Unit_LoadScript",2,SWIGTYPE_p_ScriptWrap);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->LoadScript(arg2,(char const *)arg3);
=======
static int _wrap_draw_base_rotate(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("draw_base::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::rotate",1,"draw_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("draw_base::rotate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_rotate",1,SWIGTYPE_p_draw_base);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->rotate(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_MoveAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::MoveAI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveAI",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveAI",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->MoveAI();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_LoadAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadAI",1,"Unit *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Unit::LoadAI",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->LoadAI((char const *)arg2);
=======
static int _wrap_draw_base_copy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  draw_base *arg2 = 0 ;
  bool arg3 ;
  SDL_Renderer *arg4 = (SDL_Renderer *) 0 ;
  
  SWIG_check_num_args("draw_base::copy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::copy",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::copy",2,"draw_base const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("draw_base::copy",3,"bool");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("draw_base::copy",4,"SDL_Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_copy",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_copy",2,SWIGTYPE_p_draw_base);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("draw_base_copy",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->copy((draw_base const &)*arg2,arg3,arg4);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_AttackAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::AttackAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::AttackAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::AttackAI",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AttackAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AttackAI",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->AttackAI(arg2);
=======
static int _wrap_draw_base_copy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  draw_base *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("draw_base::copy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::copy",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::copy",2,"draw_base const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("draw_base::copy",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_copy",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_copy",2,SWIGTYPE_p_draw_base);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->copy((draw_base const &)*arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_ExecuteAI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  char arg3 ;
  
  SWIG_check_num_args("Unit::ExecuteAI",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ExecuteAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::ExecuteAI",2,"Unit *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Unit::ExecuteAI",3,"char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",2,SWIGTYPE_p_Unit);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->ExecuteAI(arg2,arg3);
=======
static int _wrap_draw_base_copy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  draw_base *arg2 = 0 ;
  
  SWIG_check_num_args("draw_base::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::copy",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::copy",2,"draw_base const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_copy",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_copy",2,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->copy((draw_base const &)*arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_ExecuteAI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ExecuteAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ExecuteAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::ExecuteAI",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ExecuteAI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ExecuteAI(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
=======
static int _wrap_draw_base_copy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
>>>>>>> TheIllusiveMan
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
<<<<<<< HEAD
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
=======
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
=======
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
<<<<<<< HEAD
        return _wrap_Unit_ExecuteAI__SWIG_1(L);
=======
        return _wrap_draw_base_copy__SWIG_2(L);
>>>>>>> TheIllusiveMan
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
<<<<<<< HEAD
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
=======
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
=======
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
<<<<<<< HEAD
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Unit_ExecuteAI__SWIG_0(L);
=======
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_draw_base_copy__SWIG_1(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Unit_ExecuteAI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::ExecuteAI(Unit *,char const)\n"
    "    Unit::ExecuteAI(Unit *)\n");
  lua_error(L);return 0;
}


static int _wrap_Unit_MoveTowardsAI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Unit::MoveTowardsAI",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveTowardsAI",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::MoveTowardsAI",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Unit::MoveTowardsAI",3,"char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveTowardsAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->MoveTowardsAI(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_MoveTowardsAI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Unit::MoveTowardsAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveTowardsAI",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::MoveTowardsAI",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveTowardsAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->MoveTowardsAI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_MoveTowardsAI(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Unit_MoveTowardsAI__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
=======
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Unit_MoveTowardsAI__SWIG_0(L);
=======
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_draw_base_copy__SWIG_0(L);
          }
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Unit_MoveTowardsAI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::MoveTowardsAI(double,char const)\n"
    "    Unit::MoveTowardsAI(double)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'draw_base_copy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    draw_base::copy(draw_base const &,bool,SDL_Renderer *)\n"
    "    draw_base::copy(draw_base const &,bool)\n"
    "    draw_base::copy(draw_base const &)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_Unit_SetTimer(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Timer *arg2 = (Timer *) 0 ;
  
  SWIG_check_num_args("Unit::SetTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetTimer",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::SetTimer",2,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetTimer",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Unit_SetTimer",2,SWIGTYPE_p_Timer);
  }
  
  (arg1)->SetTimer(arg2);
=======
static int _wrap_draw_base_resetRotation(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  
  SWIG_check_num_args("draw_base::resetRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::resetRotation",1,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_resetRotation",1,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->resetRotation();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_Update_NewTime(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_NewTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_NewTime",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_NewTime",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_NewTime();
=======
static int _wrap_draw_base_ClearTexture(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  
  SWIG_check_num_args("draw_base::ClearTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::ClearTexture",1,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_ClearTexture",1,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->ClearTexture();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_Update_OldTime(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_OldTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_OldTime",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_OldTime",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_OldTime();
=======
static int _wrap_draw_base_SetTextureFromPointer(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  TextureNode *arg2 = (TextureNode *) 0 ;
  
  SWIG_check_num_args("draw_base::SetTextureFromPointer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::SetTextureFromPointer",1,"draw_base *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("draw_base::SetTextureFromPointer",2,"TextureNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromPointer",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TextureNode,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromPointer",2,SWIGTYPE_p_TextureNode);
  }
  
  (arg1)->SetTextureFromPointer(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetTimeChange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  SWIG_check_num_args("Unit::GetTimeChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetTimeChange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetTimeChange",1,SWIGTYPE_p_Unit);
  }
  
  result = (double)((Unit const *)arg1)->GetTimeChange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_draw_base_SetTextureFromRef(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  TextureNode *arg2 = 0 ;
  
  SWIG_check_num_args("draw_base::SetTextureFromRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::SetTextureFromRef",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::SetTextureFromRef",2,"TextureNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromRef",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TextureNode,0))){
    SWIG_fail_ptr("draw_base_SetTextureFromRef",2,SWIGTYPE_p_TextureNode);
  }
  
  (arg1)->SetTextureFromRef(*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetName",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetName",1,SWIGTYPE_p_Unit);
  }
  
  result = ((Unit const *)arg1)->GetName();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_new_draw_base(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("draw_base::draw_base",0,0)
  result = (draw_base *)new draw_base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetPhysics(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Unit::GetPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetPhysics",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetPhysics",1,SWIGTYPE_p_Unit);
  }
  
  result = (Physics *)((Unit const *)arg1)->GetPhysics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,0); SWIG_arg++; 
=======
static int _wrap_draw_base_textures_set(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  TextureStore arg2 ;
  TextureStore *argp2 ;
  
  SWIG_check_num_args("draw_base::textures",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::textures",1,"draw_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw_base::textures",2,"TextureStore");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_textures_set",1,SWIGTYPE_p_draw_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TextureStore,0))){
    SWIG_fail_ptr("draw_base_textures_set",2,SWIGTYPE_p_TextureStore);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->textures = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetDefaultDrawObject(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("Unit::GetDefaultDrawObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetDefaultDrawObject",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetDefaultDrawObject",1,SWIGTYPE_p_Unit);
  }
  
  result = (draw_base *)(arg1)->GetDefaultDrawObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_ToggleMelee(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ToggleMelee",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ToggleMelee",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ToggleMelee",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ToggleMelee();
  
=======
static int _wrap_draw_base_textures_get(lua_State* L) {
  int SWIG_arg = 0;
  draw_base *arg1 = (draw_base *) 0 ;
  TextureStore result;
  
  SWIG_check_num_args("draw_base::textures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw_base::textures",1,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("draw_base_textures_get",1,SWIGTYPE_p_draw_base);
  }
  
  result =  ((arg1)->textures);
  {
    TextureStore * resultptr = new TextureStore((const TextureStore &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TextureStore,1); SWIG_arg++;
  }
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetHP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetHP",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetHP",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetAD(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAD",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAD",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAD();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetAP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAP",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAP",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetAttackSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAttackSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAttackSpeed",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAttackSpeed",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAttackSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static void swig_delete_draw_base(void *obj) {
draw_base *arg1 = (draw_base *) obj;
delete arg1;
}
static int _proxy__wrap_new_draw_base(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_draw_base);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_draw_base_attributes[] = {
    { "textures", _wrap_draw_base_textures_get, _wrap_draw_base_textures_set },
    {0,0,0}
};
static swig_lua_method swig_draw_base_methods[]= {
    { "Load_Texture", _wrap_draw_base_Load_Texture},
    { "apply_surface", _wrap_draw_base_apply_surface},
    { "GetHeightOfMainRect", _wrap_draw_base_GetHeightOfMainRect},
    { "GetWidthOfMainRect", _wrap_draw_base_GetWidthOfMainRect},
    { "GetAnimCounter", _wrap_draw_base_GetAnimCounter},
    { "isNoLoop", _wrap_draw_base_isNoLoop},
    { "GetTexture", _wrap_draw_base_GetTexture},
    { "GetTextureNode", _wrap_draw_base_GetTextureNode},
    { "setColor", _wrap_draw_base_setColor},
    { "setBlendMode", _wrap_draw_base_setBlendMode},
    { "setAlpha", _wrap_draw_base_setAlpha},
    { "setRotationPivot", _wrap_draw_base_setRotationPivot},
    { "flip", _wrap_draw_base_flip},
    { "rotate", _wrap_draw_base_rotate},
    { "copy", _wrap_draw_base_copy},
    { "resetRotation", _wrap_draw_base_resetRotation},
    { "ClearTexture", _wrap_draw_base_ClearTexture},
    { "SetTextureFromPointer", _wrap_draw_base_SetTextureFromPointer},
    { "SetTextureFromRef", _wrap_draw_base_SetTextureFromRef},
    {0,0}
};
static swig_lua_method swig_draw_base_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_draw_base_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_draw_base_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_draw_base_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_draw_base_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_draw_base_Sf_SwigStatic = {
    "draw_base",
    swig_draw_base_Sf_SwigStatic_methods,
    swig_draw_base_Sf_SwigStatic_attributes,
    swig_draw_base_Sf_SwigStatic_constants,
    swig_draw_base_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_draw_base_bases[] = {0};
static const char *swig_draw_base_base_names[] = {0};
static swig_lua_class _wrap_class_draw_base = { "draw_base", "draw_base", &SWIGTYPE_p_draw_base,_proxy__wrap_new_draw_base, swig_delete_draw_base, swig_draw_base_methods, swig_draw_base_attributes, &swig_draw_base_Sf_SwigStatic, swig_draw_base_meta, swig_draw_base_bases, swig_draw_base_base_names };

static int _wrap_apply_surface__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  SWIG_check_num_args("apply_surface",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("apply_surface",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("apply_surface",6,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  apply_surface(arg1,arg2,*arg3,*arg4,arg5,arg6);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetRange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetRange",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetVisionRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetVisionRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetVisionRange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetVisionRange",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetVisionRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_apply_surface__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  int arg5 ;
  
  SWIG_check_num_args("apply_surface",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("apply_surface",5,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  apply_surface(arg1,arg2,*arg3,*arg4,arg5);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetID(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Unit::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetID",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetID",1,SWIGTYPE_p_Unit);
  }
  
  result = (unsigned int)((Unit const *)arg1)->GetID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetMovementSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  SWIG_check_num_args("Unit::GetMovementSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetMovementSpeed",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetMovementSpeed",1,SWIGTYPE_p_Unit);
  }
  
  result = (double)((Unit const *)arg1)->GetMovementSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_apply_surface__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  SDL_Renderer *arg3 = 0 ;
  SDL_Texture *arg4 = 0 ;
  
  SWIG_check_num_args("apply_surface",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("apply_surface",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("apply_surface",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply_surface",3,"SDL_Renderer &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("apply_surface",4,"SDL_Texture &");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("apply_surface",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Texture,0))){
    SWIG_fail_ptr("apply_surface",4,SWIGTYPE_p_SDL_Texture);
  }
  
  apply_surface(arg1,arg2,*arg3,*arg4);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetType",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetType",1,SWIGTYPE_p_Unit);
  }
  
  result = ((Unit const *)arg1)->GetType();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_apply_surface(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_apply_surface__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_apply_surface__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Texture, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_apply_surface__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'apply_surface'\n"
    "  Possible C/C++ prototypes are:\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &,int,int)\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &,int)\n"
    "    apply_surface(int,int,SDL_Renderer &,SDL_Texture &)\n");
  lua_error(L);return 0;
}


static int _wrap_LoadTexture(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  TextureNode *result = 0 ;
  
  SWIG_check_num_args("LoadTexture",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LoadTexture",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("LoadTexture",2,"SDL_Renderer &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("LoadTexture",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (TextureNode *)LoadTexture((char const *)arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TextureNode,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_SetHP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetHP",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetHP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetHP",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetHP(arg2);
  
=======
static int _wrap_new_UI(lua_State* L) {
  int SWIG_arg = 0;
  cstr arg1 = (cstr) 0 ;
  SDL_Renderer *arg2 = 0 ;
  UI *result = 0 ;
  
  SWIG_check_num_args("UI::UI",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("UI::UI",1,"cstr");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("UI::UI",2,"SDL_Renderer &");
  arg1 = (cstr)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_UI",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (UI *)new UI(arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UI,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_SetAD(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAD",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAD",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAD",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAD(arg2);
  
=======
static int _wrap_UI_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  bool result;
  
  SWIG_check_num_args("UI::isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::isVisible",1,"UI const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_isVisible",1,SWIGTYPE_p_UI);
  }
  
  result = (bool)((UI const *)arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_SetAP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAP",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAP",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAP(arg2);
  
=======
static int _wrap_UI_isInside(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  bool result;
  
  SWIG_check_num_args("UI::isInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::isInside",1,"UI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UI::isInside",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UI::isInside",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_isInside",1,SWIGTYPE_p_UI);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (bool)(arg1)->isInside(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_SetAttackSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAttackSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAttackSpeed",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAttackSpeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAttackSpeed",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAttackSpeed(arg2);
=======
static int _wrap_UI_toggleVisibility(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::toggleVisibility",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::toggleVisibility",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_toggleVisibility",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->toggleVisibility();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_SetRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetRange",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetRange",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetRange",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetRange(arg2);
  
=======
static int _wrap_UI_GetName(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  std::string result;
  
  SWIG_check_num_args("UI::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::GetName",1,"UI const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_GetName",1,SWIGTYPE_p_UI);
  }
  
  result = ((UI const *)arg1)->GetName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_SetVisionRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetVisionRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetVisionRange",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetVisionRange",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetVisionRange",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetVisionRange(arg2);
  
=======
static int _wrap_UI_GetID(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  size_t result;
  
  SWIG_check_num_args("UI::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::GetID",1,"UI const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_GetID",1,SWIGTYPE_p_UI);
  }
  
  result = ((UI const *)arg1)->GetID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_SetMovementSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Unit::SetMovementSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetMovementSpeed",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetMovementSpeed",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetMovementSpeed",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetMovementSpeed(arg2);
  
=======
static int _wrap_UI_GetButtonByLoc(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  Button *result = 0 ;
  
  SWIG_check_num_args("UI::GetButtonByLoc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::GetButtonByLoc",1,"UI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UI::GetButtonByLoc",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UI::GetButtonByLoc",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_GetButtonByLoc",1,SWIGTYPE_p_UI);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (Button *)(arg1)->GetButtonByLoc(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Button,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_SetID(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Unit::SetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetID",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetID",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetID",1,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->SetID(arg2);
  
=======
static int _wrap_UI_GetTextboxByLoc(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  textbox *result = 0 ;
  
  SWIG_check_num_args("UI::GetTextboxByLoc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::GetTextboxByLoc",1,"UI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UI::GetTextboxByLoc",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UI::GetTextboxByLoc",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_GetTextboxByLoc",1,SWIGTYPE_p_UI);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (textbox *)(arg1)->GetTextboxByLoc(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_textbox,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_GetDeath(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Unit::GetDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetDeath",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetDeath",1,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Unit const *)arg1)->GetDeath();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_UI_GetRenderer(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  SDL_Renderer *result = 0 ;
  
  SWIG_check_num_args("UI::GetRenderer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::GetRenderer",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_GetRenderer",1,SWIGTYPE_p_UI);
  }
  
  result = (SDL_Renderer *)(arg1)->GetRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Renderer,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_ToggleDeath(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ToggleDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ToggleDeath",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ToggleDeath",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ToggleDeath();
=======
static int _wrap_UI_SetID(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("UI::SetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::SetID",1,"UI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UI::SetID",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_SetID",1,SWIGTYPE_p_UI);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetID(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_UpdateAssets(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  Unit *arg3 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::UpdateAssets",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::UpdateAssets",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::UpdateAssets",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Unit::UpdateAssets",3,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_UpdateAssets",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_UpdateAssets",3,SWIGTYPE_p_Unit);
  }
  
  (arg1)->UpdateAssets(arg2,arg3);
=======
static int _wrap_UI_Update(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::Update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::Update",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_Update",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->Update();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_AddBuff(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("Unit::AddBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::AddBuff",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::AddBuff",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AddBuff",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_AddBuff",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->AddBuff(arg2);
=======
static int _wrap_UI_ProcessEvents(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("UI::ProcessEvents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::ProcessEvents",1,"UI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UI::ProcessEvents",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UI::ProcessEvents",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_ProcessEvents",1,SWIGTYPE_p_UI);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ProcessEvents(arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_RemoveBuff(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("Unit::RemoveBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::RemoveBuff",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::RemoveBuff",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_RemoveBuff",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_RemoveBuff",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->RemoveBuff(arg2);
=======
static int _wrap_UI_AddNumToPBar(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("UI::AddNumToPBar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::AddNumToPBar",1,"UI *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UI::AddNumToPBar",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("UI::AddNumToPBar",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_AddNumToPBar",1,SWIGTYPE_p_UI);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->AddNumToPBar(arg2,(std::string const &)*arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_BuffExists(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  bool result;
  
  SWIG_check_num_args("Unit::BuffExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::BuffExists",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::BuffExists",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_BuffExists",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_BuffExists",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->BuffExists(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_UI_Draw(lua_State* L) {
  int SWIG_arg = 0;
  UI *arg1 = (UI *) 0 ;
  
  SWIG_check_num_args("UI::Draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UI::Draw",1,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("UI_Draw",1,SWIGTYPE_p_UI);
  }
  
  (arg1)->Draw();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_ApplyBuffs(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ApplyBuffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ApplyBuffs",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ApplyBuffs",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ApplyBuffs();
=======
static void swig_delete_UI(void *obj) {
UI *arg1 = (UI *) obj;
delete arg1;
}
static int _proxy__wrap_new_UI(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UI);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UI_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UI_methods[]= {
    { "isVisible", _wrap_UI_isVisible},
    { "isInside", _wrap_UI_isInside},
    { "toggleVisibility", _wrap_UI_toggleVisibility},
    { "GetName", _wrap_UI_GetName},
    { "GetID", _wrap_UI_GetID},
    { "GetButtonByLoc", _wrap_UI_GetButtonByLoc},
    { "GetTextboxByLoc", _wrap_UI_GetTextboxByLoc},
    { "GetRenderer", _wrap_UI_GetRenderer},
    { "SetID", _wrap_UI_SetID},
    { "Update", _wrap_UI_Update},
    { "ProcessEvents", _wrap_UI_ProcessEvents},
    { "AddNumToPBar", _wrap_UI_AddNumToPBar},
    { "Draw", _wrap_UI_Draw},
    {0,0}
};
static swig_lua_method swig_UI_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UI_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UI_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UI_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UI_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UI_Sf_SwigStatic = {
    "UI",
    swig_UI_Sf_SwigStatic_methods,
    swig_UI_Sf_SwigStatic_attributes,
    swig_UI_Sf_SwigStatic_constants,
    swig_UI_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UI_bases[] = {0};
static const char *swig_UI_base_names[] = {0};
static swig_lua_class _wrap_class_UI = { "UI", "UI", &SWIGTYPE_p_UI,_proxy__wrap_new_UI, swig_delete_UI, swig_UI_methods, swig_UI_attributes, &swig_UI_Sf_SwigStatic, swig_UI_meta, swig_UI_bases, swig_UI_base_names };

static int _wrap_LoadScript(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("LoadScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LoadScript",1,"ScriptWrap *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LoadScript",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("LoadScript",1,SWIGTYPE_p_ScriptWrap);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  LoadScript(arg1,(char const *)arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_isColliding(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::isColliding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::isColliding",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::isColliding",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isColliding",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isColliding",2,SWIGTYPE_p_Unit);
  }
  
  result = (arg1)->isColliding(arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_new_Unit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = (SDL_Renderer *) 0 ;
  size_t arg5 ;
  bool arg6 ;
  bool arg7 ;
  std::string temp2 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Unit::Unit",5,"size_t");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Unit::Unit",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Unit::Unit",7,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_Update_Physics(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_Physics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_Physics",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::Update_Physics",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_Physics",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_Physics",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_Physics(arg2);
  
=======
static int _wrap_new_Unit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = (SDL_Renderer *) 0 ;
  size_t arg5 ;
  bool arg6 ;
  std::string temp2 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Unit::Unit",5,"size_t");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Unit::Unit",6,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_OnCollision(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("Unit::OnCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::OnCollision",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::OnCollision",2,"Unit *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::OnCollision",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_OnCollision",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_OnCollision",2,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_OnCollision",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->OnCollision(arg2,arg3);
  
=======
static int _wrap_new_Unit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = (SDL_Renderer *) 0 ;
  size_t arg5 ;
  std::string temp2 ;
  math_point *argp3 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("Unit::Unit",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Unit::Unit",1,"int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Unit::Unit",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Unit::Unit",3,"math_point");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Unit::Unit",4,"SDL_Renderer *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Unit::Unit",5,"size_t");
  arg1 = (int)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Unit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Unit",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  result = (Unit *)new Unit(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_ProcessKeyEvent(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("Unit::ProcessKeyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ProcessKeyEvent",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::ProcessKeyEvent",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ProcessKeyEvent",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Unit_ProcessKeyEvent",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  (arg1)->ProcessKeyEvent(arg2);
  
=======
static int _wrap_new_Unit(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Unit__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_Unit__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_Unit__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Unit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer *,size_t,bool,bool)\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer *,size_t,bool)\n"
    "    Unit::Unit(int,std::string const &,math_point,SDL_Renderer *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Unit_isMelee(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Unit::isMelee",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::isMelee",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isMelee",1,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Unit const *)arg1)->isMelee();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_LoadKeyScript(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadKeyScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadKeyScript",1,"Unit *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Unit::LoadKeyScript",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadKeyScript",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->LoadKeyScript((char const *)arg2);
  
=======
static int _wrap_Unit_isNPC(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Unit::isNPC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::isNPC",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isNPC",1,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Unit const *)arg1)->isNPC();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_LoadKeyBindings(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadKeyBindings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadKeyBindings",1,"Unit *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Unit::LoadKeyBindings",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadKeyBindings",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->LoadKeyBindings((char const *)arg2);
=======
static int _wrap_Unit_MoveAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::MoveAI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveAI",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveAI",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->MoveAI();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_ProcessMouseMovement(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Unit::ProcessMouseMovement",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ProcessMouseMovement",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::ProcessMouseMovement",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Unit::ProcessMouseMovement",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ProcessMouseMovement",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ProcessMouseMovement(arg2,arg3);
=======
static int _wrap_Unit_LoadAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("Unit::LoadAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::LoadAI",1,"Unit *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Unit::LoadAI",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_LoadAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->LoadAI((char const *)arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Unit_ProcessMouseKey(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Unit::ProcessMouseKey",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ProcessMouseKey",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::ProcessMouseKey",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Unit::ProcessMouseKey",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Unit::ProcessMouseKey",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ProcessMouseKey",1,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->ProcessMouseKey(arg2,arg3,arg4);
=======
static int _wrap_Unit_AttackAI(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::AttackAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::AttackAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::AttackAI",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AttackAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AttackAI",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->AttackAI(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_Unit(void *obj) {
Unit *arg1 = (Unit *) obj;
delete arg1;
}
static swig_lua_method swig_Unit_methods[] = {
    {"isMelee", _wrap_Unit_isMelee}, 
    {"LoadScript", _wrap_Unit_LoadScript}, 
    {"MoveAI", _wrap_Unit_MoveAI}, 
    {"LoadAI", _wrap_Unit_LoadAI}, 
    {"AttackAI", _wrap_Unit_AttackAI}, 
    {"ExecuteAI", _wrap_Unit_ExecuteAI}, 
    {"MoveTowardsAI", _wrap_Unit_MoveTowardsAI}, 
    {"SetTimer", _wrap_Unit_SetTimer}, 
    {"Update_NewTime", _wrap_Unit_Update_NewTime}, 
    {"Update_OldTime", _wrap_Unit_Update_OldTime}, 
    {"GetTimeChange", _wrap_Unit_GetTimeChange}, 
    {"GetName", _wrap_Unit_GetName}, 
    {"GetPhysics", _wrap_Unit_GetPhysics}, 
    {"GetDefaultDrawObject", _wrap_Unit_GetDefaultDrawObject}, 
    {"ToggleMelee", _wrap_Unit_ToggleMelee}, 
    {"GetHP", _wrap_Unit_GetHP}, 
    {"GetAD", _wrap_Unit_GetAD}, 
    {"GetAP", _wrap_Unit_GetAP}, 
    {"GetAttackSpeed", _wrap_Unit_GetAttackSpeed}, 
    {"GetRange", _wrap_Unit_GetRange}, 
    {"GetVisionRange", _wrap_Unit_GetVisionRange}, 
    {"GetID", _wrap_Unit_GetID}, 
    {"GetMovementSpeed", _wrap_Unit_GetMovementSpeed}, 
    {"GetType", _wrap_Unit_GetType}, 
    {"SetHP", _wrap_Unit_SetHP}, 
    {"SetAD", _wrap_Unit_SetAD}, 
    {"SetAP", _wrap_Unit_SetAP}, 
    {"SetAttackSpeed", _wrap_Unit_SetAttackSpeed}, 
    {"SetRange", _wrap_Unit_SetRange}, 
    {"SetVisionRange", _wrap_Unit_SetVisionRange}, 
    {"SetMovementSpeed", _wrap_Unit_SetMovementSpeed}, 
    {"SetID", _wrap_Unit_SetID}, 
    {"GetDeath", _wrap_Unit_GetDeath}, 
    {"ToggleDeath", _wrap_Unit_ToggleDeath}, 
    {"UpdateAssets", _wrap_Unit_UpdateAssets}, 
    {"AddBuff", _wrap_Unit_AddBuff}, 
    {"RemoveBuff", _wrap_Unit_RemoveBuff}, 
    {"BuffExists", _wrap_Unit_BuffExists}, 
    {"ApplyBuffs", _wrap_Unit_ApplyBuffs}, 
    {"isColliding", _wrap_Unit_isColliding}, 
    {"Update_Physics", _wrap_Unit_Update_Physics}, 
    {"OnCollision", _wrap_Unit_OnCollision}, 
    {"ProcessKeyEvent", _wrap_Unit_ProcessKeyEvent}, 
    {"LoadKeyScript", _wrap_Unit_LoadKeyScript}, 
    {"LoadKeyBindings", _wrap_Unit_LoadKeyBindings}, 
    {"ProcessMouseMovement", _wrap_Unit_ProcessMouseMovement}, 
    {"ProcessMouseKey", _wrap_Unit_ProcessMouseKey}, 
    {0,0}
};
static swig_lua_attribute swig_Unit_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Unit_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Unit_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Unit_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Unit_bases[] = {0};
static const char *swig_Unit_base_names[] = {0};
static swig_lua_class _wrap_class_Unit = { "Unit", &SWIGTYPE_p_Unit,_wrap_new_Unit, swig_delete_Unit, swig_Unit_methods, swig_Unit_attributes, { "Unit", swig_Unit_cls_methods, swig_Unit_cls_attributes, swig_Unit_cls_constants }, swig_Unit_bases, swig_Unit_base_names };

static int _wrap_new_textbox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  int arg4 ;
  std::string *argp1 ;
  textbox *result = 0 ;
  
  SWIG_check_num_args("textbox::textbox",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("textbox::textbox",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("textbox::textbox",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("textbox::textbox",3,"SDL_Renderer &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("textbox::textbox",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_textbox",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_textbox",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (textbox *)new textbox(arg1,(char const *)arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_textbox,1); SWIG_arg++; 
=======
static int _wrap_Unit_ExecuteAI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  char arg3 ;
  
  SWIG_check_num_args("Unit::ExecuteAI",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ExecuteAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::ExecuteAI",2,"Unit *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Unit::ExecuteAI",3,"char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",2,SWIGTYPE_p_Unit);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->ExecuteAI(arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_textbox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  std::string *argp1 ;
  textbox *result = 0 ;
  
  SWIG_check_num_args("textbox::textbox",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("textbox::textbox",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("textbox::textbox",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("textbox::textbox",3,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_textbox",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_textbox",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (textbox *)new textbox(arg1,(char const *)arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_textbox,1); SWIG_arg++; 
=======
static int _wrap_Unit_ExecuteAI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ExecuteAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ExecuteAI",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::ExecuteAI",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ExecuteAI",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ExecuteAI(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_textbox(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
static int _wrap_Unit_ExecuteAI(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_textbox__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Unit_ExecuteAI__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
<<<<<<< HEAD
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_textbox__SWIG_0(L);
          }
=======
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Unit_ExecuteAI__SWIG_0(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_textbox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    textbox::textbox(std::string,char const *,SDL_Renderer &,int)\n"
    "    textbox::textbox(std::string,char const *,SDL_Renderer &)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Unit_ExecuteAI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::ExecuteAI(Unit *,char const)\n"
    "    Unit::ExecuteAI(Unit *)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_textbox_Draw(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  
  SWIG_check_num_args("textbox::Draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::Draw",1,"textbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("textbox::Draw",2,"SDL_Renderer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_Draw",1,SWIGTYPE_p_textbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("textbox_Draw",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->Draw(*arg2);
=======
static int _wrap_Unit_MoveTowardsAI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("Unit::MoveTowardsAI",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveTowardsAI",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::MoveTowardsAI",2,"double");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Unit::MoveTowardsAI",3,"char const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveTowardsAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->MoveTowardsAI(arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_SetLoc(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("textbox::SetLoc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::SetLoc",1,"textbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("textbox::SetLoc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("textbox::SetLoc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_SetLoc",1,SWIGTYPE_p_textbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetLoc(arg2,arg3);
=======
static int _wrap_Unit_MoveTowardsAI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Unit::MoveTowardsAI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::MoveTowardsAI",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::MoveTowardsAI",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_MoveTowardsAI",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->MoveTowardsAI(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_GetType(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  std::string result;
  
  SWIG_check_num_args("textbox::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetType",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetType",1,SWIGTYPE_p_textbox);
  }
  
  result = ((textbox const *)arg1)->GetType();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_textbox_GetDeath(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  bool result;
  
  SWIG_check_num_args("textbox::GetDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetDeath",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetDeath",1,SWIGTYPE_p_textbox);
  }
  
  result = (bool)((textbox const *)arg1)->GetDeath();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_MoveTowardsAI(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Unit_MoveTowardsAI__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Unit_MoveTowardsAI__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Unit_MoveTowardsAI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::MoveTowardsAI(double,char const)\n"
    "    Unit::MoveTowardsAI(double)\n");
  lua_error(L);return 0;
}


static int _wrap_Unit_SetTimer(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Unit::SetTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetTimer",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetTimer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetTimer",1,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetTimer(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_GetBlitOrder(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  int result;
  
  SWIG_check_num_args("textbox::GetBlitOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetBlitOrder",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetBlitOrder",1,SWIGTYPE_p_textbox);
  }
  
  result = (int)((textbox const *)arg1)->GetBlitOrder();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Unit_Update_NewTime(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_NewTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_NewTime",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_NewTime",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_NewTime();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_ToggleDeath(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  
  SWIG_check_num_args("textbox::ToggleDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::ToggleDeath",1,"textbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_ToggleDeath",1,SWIGTYPE_p_textbox);
  }
  
  (arg1)->ToggleDeath();
=======
static int _wrap_Unit_Update_OldTime(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_OldTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_OldTime",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_OldTime",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_OldTime();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_SetOwner(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  UI *arg2 = (UI *) 0 ;
  
  SWIG_check_num_args("textbox::SetOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::SetOwner",1,"textbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("textbox::SetOwner",2,"UI *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_SetOwner",1,SWIGTYPE_p_textbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_UI,0))){
    SWIG_fail_ptr("textbox_SetOwner",2,SWIGTYPE_p_UI);
  }
  
  (arg1)->SetOwner(arg2);
  
=======
static int _wrap_Unit_GetTimeChange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  SWIG_check_num_args("Unit::GetTimeChange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetTimeChange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetTimeChange",1,SWIGTYPE_p_Unit);
  }
  
  result = (double)((Unit const *)arg1)->GetTimeChange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_GetOwner(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  UI *result = 0 ;
  
  SWIG_check_num_args("textbox::GetOwner",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetOwner",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetOwner",1,SWIGTYPE_p_textbox);
  }
  
  result = (UI *)((textbox const *)arg1)->GetOwner();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UI,0); SWIG_arg++; 
=======
static int _wrap_Unit_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetName",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetName",1,SWIGTYPE_p_Unit);
  }
  
  result = ((Unit const *)arg1)->GetName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_GetText(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  std::string result;
  
  SWIG_check_num_args("textbox::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetText",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetText",1,SWIGTYPE_p_textbox);
  }
  
  result = ((textbox const *)arg1)->GetText();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_Unit_GetPhysics(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Physics *result = 0 ;
  
  SWIG_check_num_args("Unit::GetPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetPhysics",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetPhysics",1,SWIGTYPE_p_Unit);
  }
  
  result = (Physics *)((Unit const *)arg1)->GetPhysics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Physics,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_GetLoc(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  math_point result;
  
  SWIG_check_num_args("textbox::GetLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetLoc",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetLoc",1,SWIGTYPE_p_textbox);
  }
  
  result = ((textbox const *)arg1)->GetLoc();
  {
    math_point * resultptr = new math_point((const math_point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_math_point,1); SWIG_arg++;
  }
=======
static int _wrap_Unit_GetDefaultDrawObject(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("Unit::GetDefaultDrawObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetDefaultDrawObject",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetDefaultDrawObject",1,SWIGTYPE_p_Unit);
  }
  
  result = (draw_base *)(arg1)->GetDefaultDrawObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_GetDOM(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("textbox::GetDOM",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetDOM",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetDOM",1,SWIGTYPE_p_textbox);
  }
  
  result = (data_base *)((textbox const *)arg1)->GetDOM();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,0); SWIG_arg++; 
=======
static int _wrap_Unit_ToggleMelee(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ToggleMelee",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ToggleMelee",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ToggleMelee",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ToggleMelee();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_GetDrawObject(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("textbox::GetDrawObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetDrawObject",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetDrawObject",1,SWIGTYPE_p_textbox);
  }
  
  result = (draw_base *)((textbox const *)arg1)->GetDrawObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,0); SWIG_arg++; 
=======
static int _wrap_Unit_GetHP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetHP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetHP",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetHP",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetHP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_GetRenderer(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  SDL_Renderer *result = 0 ;
  
  SWIG_check_num_args("textbox::GetRenderer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::GetRenderer",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_GetRenderer",1,SWIGTYPE_p_textbox);
  }
  
  result = (SDL_Renderer *)((textbox const *)arg1)->GetRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Renderer,0); SWIG_arg++; 
=======
static int _wrap_Unit_GetMana(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetMana",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetMana",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetMana",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetMana();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_isInside(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  SWIG_check_num_args("textbox::isInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::isInside",1,"textbox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("textbox::isInside",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("textbox::isInside",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_isInside",1,SWIGTYPE_p_textbox);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (bool)((textbox const *)arg1)->isInside(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_GetAD(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAD",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAD",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAD();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_changeMsg(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  std::string arg2 ;
  SDL_Renderer *arg3 = (SDL_Renderer *) 0 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("textbox::changeMsg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::changeMsg",1,"textbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("textbox::changeMsg",2,"std::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("textbox::changeMsg",3,"SDL_Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_changeMsg",1,SWIGTYPE_p_textbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("textbox_changeMsg",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("textbox_changeMsg",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->changeMsg(arg2,arg3);
  
=======
static int _wrap_Unit_GetAP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAP",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAP",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Unit_GetAttackSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetAttackSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetAttackSpeed",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetAttackSpeed",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetAttackSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_changeFont(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("textbox::changeFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::changeFont",1,"textbox *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("textbox::changeFont",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_changeFont",1,SWIGTYPE_p_textbox);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->changeFont(arg2);
  
=======
static int _wrap_Unit_GetRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetRange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetRange",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_changeColor(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("textbox::changeColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::changeColor",1,"textbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("textbox::changeColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("textbox::changeColor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("textbox::changeColor",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_changeColor",1,SWIGTYPE_p_textbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->changeColor(arg2,arg3,arg4);
  
=======
static int _wrap_Unit_GetVisionRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetVisionRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetVisionRange",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetVisionRange",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetVisionRange();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_changeFontSize(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("textbox::changeFontSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::changeFontSize",1,"textbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("textbox::changeFontSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_changeFontSize",1,SWIGTYPE_p_textbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->changeFontSize(arg2);
  
=======
static int _wrap_Unit_GetID(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Unit::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetID",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetID",1,SWIGTYPE_p_Unit);
  }
  
  result = (unsigned int)((Unit const *)arg1)->GetID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_textbox_isWritable(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  bool result;
  
  SWIG_check_num_args("textbox::isWritable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("textbox::isWritable",1,"textbox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("textbox_isWritable",1,SWIGTYPE_p_textbox);
  }
  
  result = (bool)((textbox const *)arg1)->isWritable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_GetMovementSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double result;
  
  SWIG_check_num_args("Unit::GetMovementSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetMovementSpeed",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetMovementSpeed",1,SWIGTYPE_p_Unit);
  }
  
  result = (double)((Unit const *)arg1)->GetMovementSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_textbox(void *obj) {
textbox *arg1 = (textbox *) obj;
delete arg1;
}
static swig_lua_method swig_textbox_methods[] = {
    {"Draw", _wrap_textbox_Draw}, 
    {"SetLoc", _wrap_textbox_SetLoc}, 
    {"GetType", _wrap_textbox_GetType}, 
    {"GetDeath", _wrap_textbox_GetDeath}, 
    {"GetBlitOrder", _wrap_textbox_GetBlitOrder}, 
    {"ToggleDeath", _wrap_textbox_ToggleDeath}, 
    {"SetOwner", _wrap_textbox_SetOwner}, 
    {"GetOwner", _wrap_textbox_GetOwner}, 
    {"GetText", _wrap_textbox_GetText}, 
    {"GetLoc", _wrap_textbox_GetLoc}, 
    {"GetDOM", _wrap_textbox_GetDOM}, 
    {"GetDrawObject", _wrap_textbox_GetDrawObject}, 
    {"GetRenderer", _wrap_textbox_GetRenderer}, 
    {"isInside", _wrap_textbox_isInside}, 
    {"changeMsg", _wrap_textbox_changeMsg}, 
    {"changeFont", _wrap_textbox_changeFont}, 
    {"changeColor", _wrap_textbox_changeColor}, 
    {"changeFontSize", _wrap_textbox_changeFontSize}, 
    {"isWritable", _wrap_textbox_isWritable}, 
    {0,0}
};
static swig_lua_attribute swig_textbox_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_textbox_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_textbox_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_textbox_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_textbox_bases[] = {0};
static const char *swig_textbox_base_names[] = {0};
static swig_lua_class _wrap_class_textbox = { "textbox", &SWIGTYPE_p_textbox,_wrap_new_textbox, swig_delete_textbox, swig_textbox_methods, swig_textbox_attributes, { "textbox", swig_textbox_cls_methods, swig_textbox_cls_attributes, swig_textbox_cls_constants }, swig_textbox_bases, swig_textbox_base_names };

static int _wrap_grabText(lua_State* L) {
  int SWIG_arg = 0;
  textbox *arg1 = (textbox *) 0 ;
  SDL_Event *arg2 = 0 ;
  
  SWIG_check_num_args("grabText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("grabText",1,"textbox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("grabText",2,"SDL_Event const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("grabText",1,SWIGTYPE_p_textbox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("grabText",2,SWIGTYPE_p_SDL_Event);
  }
  
  grabText(arg1,(SDL_Event const &)*arg2);
  
=======
static int _wrap_Unit_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetType",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetType",1,SWIGTYPE_p_Unit);
  }
  
  result = ((Unit const *)arg1)->GetType();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_Button(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char *arg2 = (char *) 0 ;
  SDL_Renderer *arg3 = 0 ;
  int arg4 ;
  std::string *argp1 ;
  Button *result = 0 ;
  
  SWIG_check_num_args("Button::Button",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Button::Button",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Button::Button",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Button::Button",3,"SDL_Renderer &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Button::Button",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("new_Button",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_Button",3,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (Button *)new Button(arg1,(char const *)arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Button,1); SWIG_arg++; 
=======
static int _wrap_Unit_GetBlitOrder(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int result;
  
  SWIG_check_num_args("Unit::GetBlitOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetBlitOrder",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetBlitOrder",1,SWIGTYPE_p_Unit);
  }
  
  result = (int)((Unit const *)arg1)->GetBlitOrder();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Button_ProcessMouseLoc(lua_State* L) {
  int SWIG_arg = 0;
  Button *arg1 = (Button *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Button::ProcessMouseLoc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Button::ProcessMouseLoc",1,"Button *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Button::ProcessMouseLoc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Button::ProcessMouseLoc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Button,0))){
    SWIG_fail_ptr("Button_ProcessMouseLoc",1,SWIGTYPE_p_Button);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ProcessMouseLoc(arg2,arg3);
=======
static int _wrap_Unit_SetHP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetHP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetHP",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetHP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetHP",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetHP(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Button_MouseClick(lua_State* L) {
  int SWIG_arg = 0;
  Button *arg1 = (Button *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("Button::MouseClick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Button::MouseClick",1,"Button *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Button::MouseClick",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Button::MouseClick",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Button::MouseClick",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Button::MouseClick",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Button,0))){
    SWIG_fail_ptr("Button_MouseClick",1,SWIGTYPE_p_Button);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->MouseClick(arg2,arg3,arg4,arg5);
=======
static int _wrap_Unit_SetMana(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetMana",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetMana",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetMana",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetMana",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetMana(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_Button(void *obj) {
Button *arg1 = (Button *) obj;
delete arg1;
}
static swig_lua_method swig_Button_methods[] = {
    {"ProcessMouseLoc", _wrap_Button_ProcessMouseLoc}, 
    {"MouseClick", _wrap_Button_MouseClick}, 
    {0,0}
};
static swig_lua_attribute swig_Button_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Button_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Button_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Button_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Button_bases[] = {0,0};
static const char *swig_Button_base_names[] = {"textbox *",0};
static swig_lua_class _wrap_class_Button = { "Button", &SWIGTYPE_p_Button,_wrap_new_Button, swig_delete_Button, swig_Button_methods, swig_Button_attributes, { "Button", swig_Button_cls_methods, swig_Button_cls_attributes, swig_Button_cls_constants }, swig_Button_bases, swig_Button_base_names };

static int _wrap_new_Trigger(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  Trigger *result = 0 ;
  
  SWIG_check_num_args("Trigger::Trigger",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Trigger::Trigger",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (Trigger *)new Trigger((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Trigger,1); SWIG_arg++; 
=======
static int _wrap_Unit_SetAD(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAD",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAD",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAD",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAD(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Trigger_GetID(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  int result;
  
  SWIG_check_num_args("Trigger::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::GetID",1,"Trigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_GetID",1,SWIGTYPE_p_Trigger);
  }
  
  result = (int)((Trigger const *)arg1)->GetID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Unit_SetAP(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAP",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAP",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAP",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAP(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Trigger_SetID(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Trigger::SetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::SetID",1,"Trigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Trigger::SetID",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_SetID",1,SWIGTYPE_p_Trigger);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetID(arg2);
=======
static int _wrap_Unit_SetAttackSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetAttackSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetAttackSpeed",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetAttackSpeed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetAttackSpeed",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetAttackSpeed(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Trigger_isUnitOnTrigger(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Trigger::isUnitOnTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::isUnitOnTrigger",1,"Trigger const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Trigger::isUnitOnTrigger",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_isUnitOnTrigger",1,SWIGTYPE_p_Trigger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Trigger_isUnitOnTrigger",2,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Trigger const *)arg1)->isUnitOnTrigger(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_SetRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetRange",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetRange",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetRange",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetRange(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Trigger_ConsumeTrigger(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Trigger::ConsumeTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::ConsumeTrigger",1,"Trigger *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Trigger::ConsumeTrigger",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_ConsumeTrigger",1,SWIGTYPE_p_Trigger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Trigger_ConsumeTrigger",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ConsumeTrigger(arg2);
=======
static int _wrap_Unit_SetVisionRange(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Unit::SetVisionRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetVisionRange",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetVisionRange",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetVisionRange",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetVisionRange(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Trigger_GetDeath(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  SWIG_check_num_args("Trigger::GetDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::GetDeath",1,"Trigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_GetDeath",1,SWIGTYPE_p_Trigger);
  }
  
  result = (bool)((Trigger const *)arg1)->GetDeath();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_SetMovementSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("Unit::SetMovementSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetMovementSpeed",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetMovementSpeed",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetMovementSpeed",1,SWIGTYPE_p_Unit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetMovementSpeed(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Trigger_ToggleDeath(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  
  SWIG_check_num_args("Trigger::ToggleDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::ToggleDeath",1,"Trigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_ToggleDeath",1,SWIGTYPE_p_Trigger);
  }
  
  (arg1)->ToggleDeath();
=======
static int _wrap_Unit_SetID(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("Unit::SetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetID",1,"Unit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Unit::SetID",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetID",1,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->SetID(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_Trigger(void *obj) {
Trigger *arg1 = (Trigger *) obj;
delete arg1;
}
static swig_lua_method swig_Trigger_methods[] = {
    {"GetID", _wrap_Trigger_GetID}, 
    {"SetID", _wrap_Trigger_SetID}, 
    {"isUnitOnTrigger", _wrap_Trigger_isUnitOnTrigger}, 
    {"ConsumeTrigger", _wrap_Trigger_ConsumeTrigger}, 
    {"GetDeath", _wrap_Trigger_GetDeath}, 
    {"ToggleDeath", _wrap_Trigger_ToggleDeath}, 
    {0,0}
};
static swig_lua_attribute swig_Trigger_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Trigger_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Trigger_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Trigger_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Trigger_bases[] = {0};
static const char *swig_Trigger_base_names[] = {0};
static swig_lua_class _wrap_class_Trigger = { "Trigger", &SWIGTYPE_p_Trigger,_wrap_new_Trigger, swig_delete_Trigger, swig_Trigger_methods, swig_Trigger_attributes, { "Trigger", swig_Trigger_cls_methods, swig_Trigger_cls_attributes, swig_Trigger_cls_constants }, swig_Trigger_bases, swig_Trigger_base_names };

static int _wrap_sound_base_Load_Sound__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("sound_base::Load_Sound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Load_Sound",1,"sound_base *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("sound_base::Load_Sound",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Load_Sound",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->Load_Sound((char const *)arg2);
=======
static int _wrap_Unit_SetOwner(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Game *arg2 = (Game *) 0 ;
  
  SWIG_check_num_args("Unit::SetOwner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetOwner",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::SetOwner",2,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetOwner",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Unit_SetOwner",2,SWIGTYPE_p_Game);
  }
  
  (arg1)->SetOwner(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_Load_Sound__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  SWIG_check_num_args("sound_base::Load_Sound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Load_Sound",1,"sound_base *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("sound_base::Load_Sound",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Load_Sound",1,SWIGTYPE_p_sound_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("sound_base_Load_Sound",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (bool)(arg1)->Load_Sound(arg2);
=======
static int _wrap_Unit_GetDeath(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Unit::GetDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::GetDeath",1,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_GetDeath",1,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Unit const *)arg1)->GetDeath();
>>>>>>> TheIllusiveMan
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_Load_Sound(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_sound_base_Load_Sound__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_sound_base_Load_Sound__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sound_base_Load_Sound'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sound_base::Load_Sound(char const *)\n"
    "    sound_base::Load_Sound(unsigned char *)\n");
  lua_error(L);return 0;
}


static int _wrap_sound_base_Play__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sound_base::Play",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Play",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::Play",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Play",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->Play(arg2);
=======
static int _wrap_Unit_ToggleDeath(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ToggleDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ToggleDeath",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ToggleDeath",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ToggleDeath();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_Play__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  
  SWIG_check_num_args("sound_base::Play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Play",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Play",1,SWIGTYPE_p_sound_base);
  }
  
  (arg1)->Play();
=======
static int _wrap_Unit_SetCurrentAnimation(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Unit::SetCurrentAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetCurrentAnimation",1,"Unit *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Unit::SetCurrentAnimation",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetCurrentAnimation",1,SWIGTYPE_p_Unit);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SetCurrentAnimation((std::string const &)*arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_Play(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_sound_base_Play__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_sound_base_Play__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sound_base_Play'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sound_base::Play(int)\n"
    "    sound_base::Play()\n");
  lua_error(L);return 0;
}


static int _wrap_sound_base_Pause(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  
  SWIG_check_num_args("sound_base::Pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Pause",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Pause",1,SWIGTYPE_p_sound_base);
  }
  
  (arg1)->Pause();
=======
static int _wrap_Unit_SetCurrentSound(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Unit::SetCurrentSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::SetCurrentSound",1,"Unit *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Unit::SetCurrentSound",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_SetCurrentSound",1,SWIGTYPE_p_Unit);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SetCurrentSound((std::string const &)*arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_Stop(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  
  SWIG_check_num_args("sound_base::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Stop",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Stop",1,SWIGTYPE_p_sound_base);
  }
  
  (arg1)->Stop();
=======
static int _wrap_Unit_copy(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = 0 ;
  
  SWIG_check_num_args("Unit::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::copy",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::copy",2,"Unit const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_copy",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_copy",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->copy((Unit const &)*arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_isPlaying(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("sound_base::isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::isPlaying",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_isPlaying",1,SWIGTYPE_p_sound_base);
  }
  
  result = (bool)(arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_PlaySounds(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  math_point *arg2 = 0 ;
  
  SWIG_check_num_args("Unit::PlaySounds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::PlaySounds",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::PlaySounds",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_PlaySounds",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Unit_PlaySounds",2,SWIGTYPE_p_math_point);
  }
  
  (arg1)->PlaySounds((math_point const &)*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_PlayEffect(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("sound_base::PlayEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::PlayEffect",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::PlayEffect",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_PlayEffect",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->PlayEffect(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_DrawImages(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::DrawImages",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::DrawImages",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_DrawImages",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->DrawImages();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_isLoopingEffect(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  bool result;
  
  SWIG_check_num_args("sound_base::isLoopingEffect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::isLoopingEffect",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_isLoopingEffect",1,SWIGTYPE_p_sound_base);
  }
  
  result = (bool)(arg1)->isLoopingEffect();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_RotateSprite(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  draw_base *arg2 = (draw_base *) 0 ;
  double arg3 ;
  
  SWIG_check_num_args("Unit::RotateSprite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::RotateSprite",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::RotateSprite",2,"draw_base *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Unit::RotateSprite",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_RotateSprite",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("Unit_RotateSprite",2,SWIGTYPE_p_draw_base);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->RotateSprite(arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_FadeOut(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sound_base::FadeOut",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::FadeOut",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::FadeOut",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_FadeOut",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->FadeOut(arg2);
=======
static int _wrap_Unit_FlipSprite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  draw_base *arg2 = (draw_base *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Unit::FlipSprite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::FlipSprite",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::FlipSprite",2,"draw_base *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Unit::FlipSprite",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_FlipSprite",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("Unit_FlipSprite",2,SWIGTYPE_p_draw_base);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->FlipSprite(arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_SetVol(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("sound_base::SetVol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::SetVol",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::SetVol",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_SetVol",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetVol(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_SoundType(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  char result;
  
  SWIG_check_num_args("sound_base::SoundType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::SoundType",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_SoundType",1,SWIGTYPE_p_sound_base);
  }
  
  result = (char)(arg1)->SoundType();
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_SetPoint(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  
  SWIG_check_num_args("sound_base::SetPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::SetPoint",1,"sound_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_SetPoint",1,SWIGTYPE_p_sound_base);
  }
  
  (arg1)->SetPoint();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Update_Sound_Distance__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  math_point arg2 ;
  int arg3 ;
  math_point *argp2 ;
  
  SWIG_check_num_args("sound_base::Update_Sound_Distance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Update_Sound_Distance",1,"sound_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sound_base::Update_Sound_Distance",2,"math_point");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sound_base::Update_Sound_Distance",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Distance",1,SWIGTYPE_p_sound_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Distance",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->Update_Sound_Distance(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sound_base_Update_Sound_Distance__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  math_point arg2 ;
  math_point *argp2 ;
  
  SWIG_check_num_args("sound_base::Update_Sound_Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Update_Sound_Distance",1,"sound_base *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("sound_base::Update_Sound_Distance",2,"math_point");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Distance",1,SWIGTYPE_p_sound_base);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Distance",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  (arg1)->Update_Sound_Distance(arg2);
=======
static int _wrap_Unit_FlipSprite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  draw_base *arg2 = (draw_base *) 0 ;
  
  SWIG_check_num_args("Unit::FlipSprite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::FlipSprite",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::FlipSprite",2,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_FlipSprite",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("Unit_FlipSprite",2,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->FlipSprite(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_sound_base_Update_Sound_Distance(lua_State* L) {
=======
static int _wrap_Unit_FlipSprite(lua_State* L) {
>>>>>>> TheIllusiveMan
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
<<<<<<< HEAD
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
=======
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
=======
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
<<<<<<< HEAD
        return _wrap_sound_base_Update_Sound_Distance__SWIG_1(L);
=======
        return _wrap_Unit_FlipSprite__SWIG_1(L);
>>>>>>> TheIllusiveMan
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
<<<<<<< HEAD
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_sound_base, 0)) {
=======
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
=======
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
<<<<<<< HEAD
          return _wrap_sound_base_Update_Sound_Distance__SWIG_0(L);
=======
          return _wrap_Unit_FlipSprite__SWIG_0(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sound_base_Update_Sound_Distance'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sound_base::Update_Sound_Distance(math_point,int)\n"
    "    sound_base::Update_Sound_Distance(math_point)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Unit_FlipSprite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Unit::FlipSprite(draw_base *,size_t)\n"
    "    Unit::FlipSprite(draw_base *)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_sound_base_Update_Sound_Position(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *arg1 = (sound_base *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("sound_base::Update_Sound_Position",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sound_base::Update_Sound_Position",1,"sound_base *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sound_base::Update_Sound_Position",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sound_base::Update_Sound_Position",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_sound_base,0))){
    SWIG_fail_ptr("sound_base_Update_Sound_Position",1,SWIGTYPE_p_sound_base);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->Update_Sound_Position(arg2,arg3);
=======
static int _wrap_Unit_ResetRotation(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  draw_base *arg2 = (draw_base *) 0 ;
  
  SWIG_check_num_args("Unit::ResetRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ResetRotation",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::ResetRotation",2,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ResetRotation",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("Unit_ResetRotation",2,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->ResetRotation(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_sound_base__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  sound_base *result = 0 ;
  
  SWIG_check_num_args("sound_base::sound_base",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("sound_base::sound_base",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (sound_base *)new sound_base(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sound_base,1); SWIG_arg++; 
=======
static int _wrap_Unit_AddBuff(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("Unit::AddBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::AddBuff",1,"Unit *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Unit::AddBuff",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_AddBuff",1,SWIGTYPE_p_Unit);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->AddBuff(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_sound_base__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  sound_base *result = 0 ;
  
  SWIG_check_num_args("sound_base::sound_base",0,0)
  result = (sound_base *)new sound_base();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_sound_base,1); SWIG_arg++; 
=======
static int _wrap_Unit_RemoveBuff(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("Unit::RemoveBuff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::RemoveBuff",1,"Unit *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Unit::RemoveBuff",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_RemoveBuff",1,SWIGTYPE_p_Unit);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->RemoveBuff(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_sound_base(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_sound_base__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_sound_base__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_sound_base'\n"
    "  Possible C/C++ prototypes are:\n"
    "    sound_base::sound_base(bool)\n"
    "    sound_base::sound_base()\n");
  lua_error(L);return 0;
}


static void swig_delete_sound_base(void *obj) {
sound_base *arg1 = (sound_base *) obj;
delete arg1;
}
static swig_lua_method swig_sound_base_methods[] = {
    {"Load_Sound", _wrap_sound_base_Load_Sound}, 
    {"Play", _wrap_sound_base_Play}, 
    {"Pause", _wrap_sound_base_Pause}, 
    {"Stop", _wrap_sound_base_Stop}, 
    {"isPlaying", _wrap_sound_base_isPlaying}, 
    {"PlayEffect", _wrap_sound_base_PlayEffect}, 
    {"isLoopingEffect", _wrap_sound_base_isLoopingEffect}, 
    {"FadeOut", _wrap_sound_base_FadeOut}, 
    {"SetVol", _wrap_sound_base_SetVol}, 
    {"SoundType", _wrap_sound_base_SoundType}, 
    {"SetPoint", _wrap_sound_base_SetPoint}, 
    {"Update_Sound_Distance", _wrap_sound_base_Update_Sound_Distance}, 
    {"Update_Sound_Position", _wrap_sound_base_Update_Sound_Position}, 
    {0,0}
};
static swig_lua_attribute swig_sound_base_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_sound_base_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_sound_base_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_sound_base_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_sound_base_bases[] = {0};
static const char *swig_sound_base_base_names[] = {0};
static swig_lua_class _wrap_class_sound_base = { "sound_base", &SWIGTYPE_p_sound_base,_wrap_new_sound_base, swig_delete_sound_base, swig_sound_base_methods, swig_sound_base_attributes, { "sound_base", swig_sound_base_cls_methods, swig_sound_base_cls_attributes, swig_sound_base_cls_constants }, swig_sound_base_bases, swig_sound_base_base_names };

static int _wrap_new_Timer(lua_State* L) {
  int SWIG_arg = 0;
  Timer *result = 0 ;
  
  SWIG_check_num_args("Timer::Timer",0,0)
  result = (Timer *)new Timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Timer,1); SWIG_arg++; 
=======
static int _wrap_Unit_BuffExists(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("Unit::BuffExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::BuffExists",1,"Unit *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Unit::BuffExists",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_BuffExists",1,SWIGTYPE_p_Unit);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->BuffExists(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Timer_start(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::start",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_start",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->start();
=======
static int _wrap_Unit_ApplyBuffs(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::ApplyBuffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ApplyBuffs",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ApplyBuffs",1,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ApplyBuffs();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Timer_stop(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::stop",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_stop",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->stop();
  
=======
static int _wrap_Unit_isColliding(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Unit::isColliding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::isColliding",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::isColliding",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isColliding",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_isColliding",2,SWIGTYPE_p_Unit);
  }
  
  result = (arg1)->isColliding(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Timer_pause(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::pause",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_pause",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->pause();
=======
static int _wrap_Unit_Update_Physics(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Unit::Update_Physics",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::Update_Physics",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::Update_Physics",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_Physics",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_Update_Physics",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->Update_Physics(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Timer_unpause(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::unpause",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_unpause",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->unpause();
=======
static int _wrap_Unit_OnCollision(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  std::string arg3 ;
  
  SWIG_check_num_args("Unit::OnCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::OnCollision",1,"Unit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Unit::OnCollision",2,"Unit *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Unit::OnCollision",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_OnCollision",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_OnCollision",2,SWIGTYPE_p_Unit);
  }
  
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  (arg1)->OnCollision(arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Timer_get_ticks(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  SWIG_check_num_args("Timer::get_ticks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::get_ticks",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_get_ticks",1,SWIGTYPE_p_Timer);
  }
  
  result = (int)((Timer const *)arg1)->get_ticks();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_is_started(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Timer::is_started",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::is_started",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_is_started",1,SWIGTYPE_p_Timer);
  }
  
  result = (bool)((Timer const *)arg1)->is_started();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_ai_set(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  AIStore arg2 ;
  AIStore *argp2 ;
  
  SWIG_check_num_args("Unit::ai",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ai",1,"Unit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Unit::ai",2,"AIStore");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ai_set",1,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_AIStore,0))){
    SWIG_fail_ptr("Unit_ai_set",2,SWIGTYPE_p_AIStore);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->ai = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_Timer_is_paused(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Timer::is_paused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::is_paused",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_is_paused",1,SWIGTYPE_p_Timer);
  }
  
  result = (bool)((Timer const *)arg1)->is_paused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Unit_ai_get(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  AIStore result;
  
  SWIG_check_num_args("Unit::ai",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Unit::ai",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Unit_ai_get",1,SWIGTYPE_p_Unit);
  }
  
  result =  ((arg1)->ai);
  {
    AIStore * resultptr = new AIStore((const AIStore &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AIStore,1); SWIG_arg++;
  }
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_Timer(void *obj) {
Timer *arg1 = (Timer *) obj;
delete arg1;
}
static swig_lua_method swig_Timer_methods[] = {
    {"start", _wrap_Timer_start}, 
    {"stop", _wrap_Timer_stop}, 
    {"pause", _wrap_Timer_pause}, 
    {"unpause", _wrap_Timer_unpause}, 
    {"get_ticks", _wrap_Timer_get_ticks}, 
    {"is_started", _wrap_Timer_is_started}, 
    {"is_paused", _wrap_Timer_is_paused}, 
    {0,0}
};
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Timer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Timer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Timer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Timer_bases[] = {0};
static const char *swig_Timer_base_names[] = {0};
static swig_lua_class _wrap_class_Timer = { "Timer", &SWIGTYPE_p_Timer,_wrap_new_Timer, swig_delete_Timer, swig_Timer_methods, swig_Timer_attributes, { "Timer", swig_Timer_cls_methods, swig_Timer_cls_attributes, swig_Timer_cls_constants }, swig_Timer_bases, swig_Timer_base_names };

static int _wrap_new_ProgressBar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  int arg5 ;
  math_point *argp3 ;
  ProgressBar *result = 0 ;
  
  SWIG_check_num_args("ProgressBar::ProgressBar",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ProgressBar::ProgressBar",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ProgressBar::ProgressBar",2,"int *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ProgressBar::ProgressBar",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ProgressBar::ProgressBar",4,"SDL_Renderer &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ProgressBar::ProgressBar",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_ProgressBar",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ProgressBar",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_ProgressBar",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (ProgressBar *)new ProgressBar((char const *)arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ProgressBar,1); SWIG_arg++; 
=======
static void swig_delete_Unit(void *obj) {
Unit *arg1 = (Unit *) obj;
delete arg1;
}
static int _proxy__wrap_new_Unit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Unit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Unit_attributes[] = {
    { "ai", _wrap_Unit_ai_get, _wrap_Unit_ai_set },
    {0,0,0}
};
static swig_lua_method swig_Unit_methods[]= {
    { "isMelee", _wrap_Unit_isMelee},
    { "isNPC", _wrap_Unit_isNPC},
    { "MoveAI", _wrap_Unit_MoveAI},
    { "LoadAI", _wrap_Unit_LoadAI},
    { "AttackAI", _wrap_Unit_AttackAI},
    { "ExecuteAI", _wrap_Unit_ExecuteAI},
    { "MoveTowardsAI", _wrap_Unit_MoveTowardsAI},
    { "SetTimer", _wrap_Unit_SetTimer},
    { "Update_NewTime", _wrap_Unit_Update_NewTime},
    { "Update_OldTime", _wrap_Unit_Update_OldTime},
    { "GetTimeChange", _wrap_Unit_GetTimeChange},
    { "GetName", _wrap_Unit_GetName},
    { "GetPhysics", _wrap_Unit_GetPhysics},
    { "GetDefaultDrawObject", _wrap_Unit_GetDefaultDrawObject},
    { "ToggleMelee", _wrap_Unit_ToggleMelee},
    { "GetHP", _wrap_Unit_GetHP},
    { "GetMana", _wrap_Unit_GetMana},
    { "GetAD", _wrap_Unit_GetAD},
    { "GetAP", _wrap_Unit_GetAP},
    { "GetAttackSpeed", _wrap_Unit_GetAttackSpeed},
    { "GetRange", _wrap_Unit_GetRange},
    { "GetVisionRange", _wrap_Unit_GetVisionRange},
    { "GetID", _wrap_Unit_GetID},
    { "GetMovementSpeed", _wrap_Unit_GetMovementSpeed},
    { "GetType", _wrap_Unit_GetType},
    { "GetBlitOrder", _wrap_Unit_GetBlitOrder},
    { "SetHP", _wrap_Unit_SetHP},
    { "SetMana", _wrap_Unit_SetMana},
    { "SetAD", _wrap_Unit_SetAD},
    { "SetAP", _wrap_Unit_SetAP},
    { "SetAttackSpeed", _wrap_Unit_SetAttackSpeed},
    { "SetRange", _wrap_Unit_SetRange},
    { "SetVisionRange", _wrap_Unit_SetVisionRange},
    { "SetMovementSpeed", _wrap_Unit_SetMovementSpeed},
    { "SetID", _wrap_Unit_SetID},
    { "SetOwner", _wrap_Unit_SetOwner},
    { "GetDeath", _wrap_Unit_GetDeath},
    { "ToggleDeath", _wrap_Unit_ToggleDeath},
    { "SetCurrentAnimation", _wrap_Unit_SetCurrentAnimation},
    { "SetCurrentSound", _wrap_Unit_SetCurrentSound},
    { "copy", _wrap_Unit_copy},
    { "PlaySounds", _wrap_Unit_PlaySounds},
    { "DrawImages", _wrap_Unit_DrawImages},
    { "RotateSprite", _wrap_Unit_RotateSprite},
    { "FlipSprite", _wrap_Unit_FlipSprite},
    { "ResetRotation", _wrap_Unit_ResetRotation},
    { "AddBuff", _wrap_Unit_AddBuff},
    { "RemoveBuff", _wrap_Unit_RemoveBuff},
    { "BuffExists", _wrap_Unit_BuffExists},
    { "ApplyBuffs", _wrap_Unit_ApplyBuffs},
    { "isColliding", _wrap_Unit_isColliding},
    { "Update_Physics", _wrap_Unit_Update_Physics},
    { "OnCollision", _wrap_Unit_OnCollision},
    {0,0}
};
static swig_lua_method swig_Unit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Unit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Unit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Unit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Unit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Unit_Sf_SwigStatic = {
    "Unit",
    swig_Unit_Sf_SwigStatic_methods,
    swig_Unit_Sf_SwigStatic_attributes,
    swig_Unit_Sf_SwigStatic_constants,
    swig_Unit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Unit_bases[] = {0};
static const char *swig_Unit_base_names[] = {0};
static swig_lua_class _wrap_class_Unit = { "Unit", "Unit", &SWIGTYPE_p_Unit,_proxy__wrap_new_Unit, swig_delete_Unit, swig_Unit_methods, swig_Unit_attributes, &swig_Unit_Sf_SwigStatic, swig_Unit_meta, swig_Unit_bases, swig_Unit_base_names };

static int _wrap_new_Trigger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *result = 0 ;
  
  SWIG_check_num_args("Trigger::Trigger",0,0)
  result = (Trigger *)new Trigger();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Trigger,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_ProgressBar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  math_point arg3 ;
  SDL_Renderer *arg4 = 0 ;
  math_point *argp3 ;
  ProgressBar *result = 0 ;
  
  SWIG_check_num_args("ProgressBar::ProgressBar",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ProgressBar::ProgressBar",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ProgressBar::ProgressBar",2,"int *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ProgressBar::ProgressBar",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ProgressBar::ProgressBar",4,"SDL_Renderer &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("new_ProgressBar",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ProgressBar",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("new_ProgressBar",4,SWIGTYPE_p_SDL_Renderer);
  }
  
  result = (ProgressBar *)new ProgressBar((char const *)arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ProgressBar,1); SWIG_arg++; 
=======
static int _wrap_new_Trigger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  cstr arg1 = (cstr) 0 ;
  Trigger *result = 0 ;
  
  SWIG_check_num_args("Trigger::Trigger",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Trigger::Trigger",1,"cstr");
  arg1 = (cstr)lua_tostring(L, 1);
  result = (Trigger *)new Trigger(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Trigger,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_ProgressBar(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_ProgressBar__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
=======
static int _wrap_new_Trigger(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Trigger__SWIG_0(L);
  }
  if (argc == 1) {
>>>>>>> TheIllusiveMan
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
<<<<<<< HEAD
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SDL_Renderer, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ProgressBar__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ProgressBar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ProgressBar::ProgressBar(char const *,int *,math_point,SDL_Renderer &,int)\n"
    "    ProgressBar::ProgressBar(char const *,int *,math_point,SDL_Renderer &)\n");
=======
      return _wrap_new_Trigger__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Trigger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Trigger::Trigger()\n"
    "    Trigger::Trigger(cstr)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_ProgressBar_Update(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ProgressBar::Update",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::Update",1,"ProgressBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ProgressBar::Update",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ProgressBar::Update",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_Update",1,SWIGTYPE_p_ProgressBar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->Update(arg2,arg3);
  
=======
static int _wrap_Trigger_GetID(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Trigger::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::GetID",1,"Trigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_GetID",1,SWIGTYPE_p_Trigger);
  }
  
  result = ((Trigger const *)arg1)->GetID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ProgressBar_Draw(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  SDL_Renderer *arg2 = 0 ;
  
  SWIG_check_num_args("ProgressBar::Draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::Draw",1,"ProgressBar *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ProgressBar::Draw",2,"SDL_Renderer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_Draw",1,SWIGTYPE_p_ProgressBar);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Renderer,0))){
    SWIG_fail_ptr("ProgressBar_Draw",2,SWIGTYPE_p_SDL_Renderer);
  }
  
  (arg1)->Draw((SDL_Renderer const &)*arg2);
=======
static int _wrap_Trigger_SetID(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Trigger::SetID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::SetID",1,"Trigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Trigger::SetID",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_SetID",1,SWIGTYPE_p_Trigger);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetID(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ProgressBar_SetRectangleDimensions(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ProgressBar::SetRectangleDimensions",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::SetRectangleDimensions",1,"ProgressBar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ProgressBar::SetRectangleDimensions",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ProgressBar::SetRectangleDimensions",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_SetRectangleDimensions",1,SWIGTYPE_p_ProgressBar);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetRectangleDimensions(arg2,arg3);
  
=======
static int _wrap_Trigger_GetDeath(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  bool result;
  
  SWIG_check_num_args("Trigger::GetDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::GetDeath",1,"Trigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_GetDeath",1,SWIGTYPE_p_Trigger);
  }
  
  result = (bool)((Trigger const *)arg1)->GetDeath();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ProgressBar_GetRectangleHeight(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  int result;
  
  SWIG_check_num_args("ProgressBar::GetRectangleHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::GetRectangleHeight",1,"ProgressBar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_GetRectangleHeight",1,SWIGTYPE_p_ProgressBar);
  }
  
  result = (int)((ProgressBar const *)arg1)->GetRectangleHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Trigger_GetLoc(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  math_point result;
  
  SWIG_check_num_args("Trigger::GetLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::GetLoc",1,"Trigger const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_GetLoc",1,SWIGTYPE_p_Trigger);
  }
  
  result = ((Trigger const *)arg1)->GetLoc();
  {
    math_point * resultptr = new math_point((const math_point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_math_point,1); SWIG_arg++;
  }
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ProgressBar_GetRectangleWidth(lua_State* L) {
  int SWIG_arg = 0;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  int result;
  
  SWIG_check_num_args("ProgressBar::GetRectangleWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ProgressBar::GetRectangleWidth",1,"ProgressBar const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ProgressBar,0))){
    SWIG_fail_ptr("ProgressBar_GetRectangleWidth",1,SWIGTYPE_p_ProgressBar);
  }
  
  result = (int)((ProgressBar const *)arg1)->GetRectangleWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Trigger_ToggleDeath(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  
  SWIG_check_num_args("Trigger::ToggleDeath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::ToggleDeath",1,"Trigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_ToggleDeath",1,SWIGTYPE_p_Trigger);
  }
  
  (arg1)->ToggleDeath();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_ProgressBar(void *obj) {
ProgressBar *arg1 = (ProgressBar *) obj;
delete arg1;
}
static swig_lua_method swig_ProgressBar_methods[] = {
    {"Update", _wrap_ProgressBar_Update}, 
    {"Draw", _wrap_ProgressBar_Draw}, 
    {"SetRectangleDimensions", _wrap_ProgressBar_SetRectangleDimensions}, 
    {"GetRectangleHeight", _wrap_ProgressBar_GetRectangleHeight}, 
    {"GetRectangleWidth", _wrap_ProgressBar_GetRectangleWidth}, 
    {0,0}
};
static swig_lua_attribute swig_ProgressBar_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ProgressBar_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ProgressBar_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ProgressBar_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ProgressBar_bases[] = {0};
static const char *swig_ProgressBar_base_names[] = {0};
static swig_lua_class _wrap_class_ProgressBar = { "ProgressBar", &SWIGTYPE_p_ProgressBar,_wrap_new_ProgressBar, swig_delete_ProgressBar, swig_ProgressBar_methods, swig_ProgressBar_attributes, { "ProgressBar", swig_ProgressBar_cls_methods, swig_ProgressBar_cls_attributes, swig_ProgressBar_cls_constants }, swig_ProgressBar_bases, swig_ProgressBar_base_names };

static int _wrap_init(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("init",0,0)
  result = (bool)init();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FrameCapper(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("FrameCapper",0,0)
  FrameCapper();
  
=======
static int _wrap_Trigger_isUnitOnTrigger(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  bool result;
  
  SWIG_check_num_args("Trigger::isUnitOnTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::isUnitOnTrigger",1,"Trigger const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Trigger::isUnitOnTrigger",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_isUnitOnTrigger",1,SWIGTYPE_p_Trigger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Trigger_isUnitOnTrigger",2,SWIGTYPE_p_Unit);
  }
  
  result = (bool)((Trigger const *)arg1)->isUnitOnTrigger(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_SpawnUnit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int arg2 ;
  math_point arg3 ;
  std::string arg4 ;
  bool arg5 ;
  bool arg6 ;
  math_point *argp3 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("SpawnUnit",6,6)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SpawnUnit",1,"char const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpawnUnit",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SpawnUnit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SpawnUnit",4,"std::string");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SpawnUnit",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("SpawnUnit",6,"bool");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("SpawnUnit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SpawnUnit",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  SpawnUnit(arg1,arg2,arg3,arg4,arg5,arg6);
=======
static int _wrap_Trigger_ConsumeTrigger(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  Game *arg2 = (Game *) 0 ;
  Unit *arg3 = (Unit *) 0 ;
  
  SWIG_check_num_args("Trigger::ConsumeTrigger",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::ConsumeTrigger",1,"Trigger *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Trigger::ConsumeTrigger",2,"Game *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Trigger::ConsumeTrigger",3,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_ConsumeTrigger",1,SWIGTYPE_p_Trigger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Trigger_ConsumeTrigger",2,SWIGTYPE_p_Game);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Trigger_ConsumeTrigger",3,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ConsumeTrigger(arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_SpawnUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int arg2 ;
  math_point arg3 ;
  std::string arg4 ;
  bool arg5 ;
  math_point *argp3 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("SpawnUnit",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SpawnUnit",1,"char const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpawnUnit",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SpawnUnit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SpawnUnit",4,"std::string");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SpawnUnit",5,"bool");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("SpawnUnit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SpawnUnit",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  arg5 = (lua_toboolean(L, 5)!=0);
  SpawnUnit(arg1,arg2,arg3,arg4,arg5);
=======
static int _wrap_Trigger_UpdateTriggerLoc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Trigger::UpdateTriggerLoc",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::UpdateTriggerLoc",1,"Trigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Trigger::UpdateTriggerLoc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Trigger::UpdateTriggerLoc",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Trigger::UpdateTriggerLoc",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_UpdateTriggerLoc",1,SWIGTYPE_p_Trigger);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->UpdateTriggerLoc(arg2,arg3,arg4);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_SpawnUnit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int arg2 ;
  math_point arg3 ;
  std::string arg4 ;
  math_point *argp3 ;
  std::string *argp4 ;
  
  SWIG_check_num_args("SpawnUnit",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("SpawnUnit",1,"char const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpawnUnit",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("SpawnUnit",3,"math_point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("SpawnUnit",4,"std::string");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("SpawnUnit",3,SWIGTYPE_p_math_point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("SpawnUnit",4,SWIGTYPE_p_std__string);
  }
  arg4 = *argp4;
  
  SpawnUnit(arg1,arg2,arg3,arg4);
=======
static int _wrap_Trigger_UpdateTriggerLoc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Trigger *arg1 = (Trigger *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("Trigger::UpdateTriggerLoc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Trigger::UpdateTriggerLoc",1,"Trigger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Trigger::UpdateTriggerLoc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Trigger::UpdateTriggerLoc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Trigger,0))){
    SWIG_fail_ptr("Trigger_UpdateTriggerLoc",1,SWIGTYPE_p_Trigger);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->UpdateTriggerLoc(arg2,arg3);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_SpawnUnit(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_SpawnUnit__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
=======
static int _wrap_Trigger_UpdateTriggerLoc(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Trigger, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
>>>>>>> TheIllusiveMan
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
<<<<<<< HEAD
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_SpawnUnit__SWIG_1(L);
            }
          }
=======
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Trigger_UpdateTriggerLoc__SWIG_1(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  if (argc == 6) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
=======
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Trigger, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
>>>>>>> TheIllusiveMan
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
<<<<<<< HEAD
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_SpawnUnit__SWIG_0(L);
              }
            }
=======
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Trigger_UpdateTriggerLoc__SWIG_0(L);
>>>>>>> TheIllusiveMan
          }
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SpawnUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SpawnUnit(char const,int,math_point,std::string,bool,bool)\n"
    "    SpawnUnit(char const,int,math_point,std::string,bool)\n"
    "    SpawnUnit(char const,int,math_point,std::string)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Trigger_UpdateTriggerLoc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Trigger::UpdateTriggerLoc(int,int,int)\n"
    "    Trigger::UpdateTriggerLoc(int,int)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_FindNearbyUnit(lua_State* L) {
  int SWIG_arg = 0;
  Unit *arg1 = (Unit *) 0 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("FindNearbyUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FindNearbyUnit",1,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("FindNearbyUnit",1,SWIGTYPE_p_Unit);
  }
  
  result = (Unit *)FindNearbyUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,0); SWIG_arg++; 
=======
static void swig_delete_Trigger(void *obj) {
Trigger *arg1 = (Trigger *) obj;
delete arg1;
}
static int _proxy__wrap_new_Trigger(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Trigger);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Trigger_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Trigger_methods[]= {
    { "GetID", _wrap_Trigger_GetID},
    { "SetID", _wrap_Trigger_SetID},
    { "GetDeath", _wrap_Trigger_GetDeath},
    { "GetLoc", _wrap_Trigger_GetLoc},
    { "ToggleDeath", _wrap_Trigger_ToggleDeath},
    { "isUnitOnTrigger", _wrap_Trigger_isUnitOnTrigger},
    { "ConsumeTrigger", _wrap_Trigger_ConsumeTrigger},
    { "UpdateTriggerLoc", _wrap_Trigger_UpdateTriggerLoc},
    {0,0}
};
static swig_lua_method swig_Trigger_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Trigger_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Trigger_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Trigger_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Trigger_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Trigger_Sf_SwigStatic = {
    "Trigger",
    swig_Trigger_Sf_SwigStatic_methods,
    swig_Trigger_Sf_SwigStatic_attributes,
    swig_Trigger_Sf_SwigStatic_constants,
    swig_Trigger_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Trigger_bases[] = {0};
static const char *swig_Trigger_base_names[] = {0};
static swig_lua_class _wrap_class_Trigger = { "Trigger", "Trigger", &SWIGTYPE_p_Trigger,_proxy__wrap_new_Trigger, swig_delete_Trigger, swig_Trigger_methods, swig_Trigger_attributes, &swig_Trigger_Sf_SwigStatic, swig_Trigger_meta, swig_Trigger_bases, swig_Trigger_base_names };

static int _wrap_new_Timer(lua_State* L) {
  int SWIG_arg = 0;
  Timer *result = 0 ;
  
  SWIG_check_num_args("Timer::Timer",0,0)
  result = (Timer *)new Timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Timer,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_FindUnitByName(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *argp1 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("FindUnitByName",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FindUnitByName",1,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("FindUnitByName",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  result = (Unit *)FindUnitByName(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,0); SWIG_arg++; 
=======
static int _wrap_Timer_start(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::start",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_start",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->start();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_loadGameConstants(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("loadGameConstants",0,0)
  loadGameConstants();
=======
static int _wrap_Timer_stop(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::stop",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_stop",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->stop();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_GetRenderer(lua_State* L) {
  int SWIG_arg = 0;
  SDL_Renderer *result = 0 ;
  
  SWIG_check_num_args("GetRenderer",0,0)
  result = (SDL_Renderer *)GetRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Renderer,0); SWIG_arg++; 
=======
static int _wrap_Timer_pause(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::pause",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_pause",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->pause();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_saveToFile(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string *argp1 ;
  std::string *argp2 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("saveToFile",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("saveToFile",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("saveToFile",2,"std::string");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("saveToFile",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("saveToFile",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("saveToFile",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("saveToFile",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  saveToFile(arg1,arg2,arg3);
=======
static int _wrap_Timer_unpause(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  
  SWIG_check_num_args("Timer::unpause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::unpause",1,"Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_unpause",1,SWIGTYPE_p_Timer);
  }
  
  (arg1)->unpause();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_loadFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("loadFile",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("loadFile",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (data_base *)loadFile(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,0); SWIG_arg++; 
=======
static int _wrap_Timer_get_ticks(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  SWIG_check_num_args("Timer::get_ticks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::get_ticks",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_get_ticks",1,SWIGTYPE_p_Timer);
  }
  
  result = (int)((Timer const *)arg1)->get_ticks();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_reverseOrderStack(lua_State* L) {
  int SWIG_arg = 0;
  std::stack< fuzzy_obj > *arg1 = 0 ;
  SwigValueWrapper< std::stack< psudo_type > > result;
  
  SWIG_check_num_args("reverseOrderStack",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("reverseOrderStack",1,"std::stack< fuzzy_obj > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__stackT_psudo_type_t,0))){
    SWIG_fail_ptr("reverseOrderStack",1,SWIGTYPE_p_std__stackT_psudo_type_t);
  }
  
  result = reverseOrderStack((std::stack< psudo_type > const &)*arg1);
  {
    std::stack< fuzzy_obj > * resultptr = new std::stack< fuzzy_obj >((const std::stack< fuzzy_obj > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__stackT_psudo_type_t,1); SWIG_arg++;
  }
=======
static int _wrap_Timer_is_started(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Timer::is_started",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::is_started",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_is_started",1,SWIGTYPE_p_Timer);
  }
  
  result = (bool)((Timer const *)arg1)->is_started();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_pChar_pBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("pChar::pBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::pBuffer",1,"pChar *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("pChar::pBuffer",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_pBuffer_set",1,SWIGTYPE_p_pChar);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->pBuffer;
    if (arg2) {
      arg1->pBuffer = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->pBuffer, (const char *)arg2);
    } else {
      arg1->pBuffer = 0;
    }
  }
  
=======
static int _wrap_Timer_is_paused(lua_State* L) {
  int SWIG_arg = 0;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  SWIG_check_num_args("Timer::is_paused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Timer::is_paused",1,"Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Timer,0))){
    SWIG_fail_ptr("Timer_is_paused",1,SWIGTYPE_p_Timer);
  }
  
  result = (bool)((Timer const *)arg1)->is_paused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_pChar_pBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("pChar::pBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::pBuffer",1,"pChar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_pBuffer_get",1,SWIGTYPE_p_pChar);
  }
  
  result = (char *) ((arg1)->pBuffer);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
=======
static void swig_delete_Timer(void *obj) {
Timer *arg1 = (Timer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Timer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Timer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Timer_methods[]= {
    { "start", _wrap_Timer_start},
    { "stop", _wrap_Timer_stop},
    { "pause", _wrap_Timer_pause},
    { "unpause", _wrap_Timer_unpause},
    { "get_ticks", _wrap_Timer_get_ticks},
    { "is_started", _wrap_Timer_is_started},
    { "is_paused", _wrap_Timer_is_paused},
    {0,0}
};
static swig_lua_method swig_Timer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Timer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Timer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Timer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Timer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Timer_Sf_SwigStatic = {
    "Timer",
    swig_Timer_Sf_SwigStatic_methods,
    swig_Timer_Sf_SwigStatic_attributes,
    swig_Timer_Sf_SwigStatic_constants,
    swig_Timer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Timer_bases[] = {0};
static const char *swig_Timer_base_names[] = {0};
static swig_lua_class _wrap_class_Timer = { "Timer", "Timer", &SWIGTYPE_p_Timer,_proxy__wrap_new_Timer, swig_delete_Timer, swig_Timer_methods, swig_Timer_attributes, &swig_Timer_Sf_SwigStatic, swig_Timer_meta, swig_Timer_bases, swig_Timer_base_names };

static int _wrap_unknown_return_flag_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("psudo_type::flag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::flag",1,"psudo_type *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("psudo_type::flag",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_flag_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->flag = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_pChar_size_set(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pChar::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::size",1,"pChar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pChar::size",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_size_set",1,SWIGTYPE_p_pChar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
=======
static int _wrap_unknown_return_flag_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char result;
  
  SWIG_check_num_args("psudo_type::flag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::flag",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_flag_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (char) ((arg1)->flag);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_pChar_size_get(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pChar::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::size",1,"pChar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_size_get",1,SWIGTYPE_p_pChar);
  }
  
  result = (unsigned int) ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_unknown_return_number_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("psudo_type::number",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::number",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::number",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_number_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->number = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_pChar(lua_State* L) {
  int SWIG_arg = 0;
  pChar *result = 0 ;
  
  SWIG_check_num_args("pChar::pChar",0,0)
  result = (pChar *)new pChar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,1); SWIG_arg++; 
=======
static int _wrap_unknown_return_number_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  int result;
  
  SWIG_check_num_args("psudo_type::number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::number",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_number_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (int) ((arg1)->number);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_pChar(void *obj) {
pChar *arg1 = (pChar *) obj;
delete arg1;
}
static swig_lua_method swig_pChar_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_pChar_attributes[] = {
    { "pBuffer", _wrap_pChar_pBuffer_get, _wrap_pChar_pBuffer_set},
    { "size", _wrap_pChar_size_get, _wrap_pChar_size_set},
    {0,0,0}
};
static swig_lua_attribute swig_pChar_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_pChar_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_pChar_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_pChar_bases[] = {0};
static const char *swig_pChar_base_names[] = {0};
static swig_lua_class _wrap_class_pChar = { "pChar", &SWIGTYPE_p_pChar,_wrap_new_pChar, swig_delete_pChar, swig_pChar_methods, swig_pChar_attributes, { "pChar", swig_pChar_cls_methods, swig_pChar_cls_attributes, swig_pChar_cls_constants }, swig_pChar_bases, swig_pChar_base_names };

static int _wrap_charToInt(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int result;
  
  SWIG_check_num_args("charToInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("charToInt",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (int)charToInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_unknown_return_uNumber_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("psudo_type::uNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::uNumber",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::uNumber",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_uNumber_set",1,SWIGTYPE_p_psudo_type);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->uNumber = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_cStrToInt(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  int result;
  
  SWIG_check_num_args("cStrToInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("cStrToInt",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)cStrToInt((char const (*))arg1);
=======
static int _wrap_unknown_return_uNumber_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("psudo_type::uNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::uNumber",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_uNumber_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (unsigned int) ((arg1)->uNumber);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_intToStr(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string result;
  
  SWIG_check_num_args("intToStr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("intToStr",1,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  result = intToStr(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_unknown_return_decimal_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("psudo_type::decimal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::decimal",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::decimal",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_decimal_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->decimal = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_cStrToNum(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  double result;
  
  SWIG_check_num_args("cStrToNum",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("cStrToNum",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)cStrToNum((char const (*))arg1);
=======
static int _wrap_unknown_return_decimal_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  double result;
  
  SWIG_check_num_args("psudo_type::decimal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::decimal",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_decimal_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (double) ((arg1)->decimal);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_numToStr(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("numToStr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("numToStr",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = numToStr(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_unknown_return_answer_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("psudo_type::answer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::answer",1,"psudo_type *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("psudo_type::answer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_answer_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->answer = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_searchCharIndex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  int arg3 ;
  std::string *argp2 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("searchCharIndex",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("searchCharIndex",3,"int");
  arg1 = (lua_tostring(L, 1))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("searchCharIndex",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)searchCharIndex(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_unknown_return_answer_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  bool result;
  
  SWIG_check_num_args("psudo_type::answer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::answer",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_answer_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (bool) ((arg1)->answer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_searchCharIndex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  std::string *argp2 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("searchCharIndex",2,"std::string");
  arg1 = (lua_tostring(L, 1))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("searchCharIndex",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (int)searchCharIndex(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_unknown_return_str_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("psudo_type::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::str",1,"psudo_type *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("psudo_type::str",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_str_set",1,SWIGTYPE_p_psudo_type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->str = *arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_searchChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  std::string *argp2 ;
  bool result;
  
  SWIG_check_num_args("searchChar",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchChar",1,"char const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("searchChar",2,"std::string");
  arg1 = (lua_tostring(L, 1))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("searchChar",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (bool)searchChar(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_unknown_return_str_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("psudo_type::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::str",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_str_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (std::string *) & ((arg1)->str);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_findString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  char *arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("findString",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("findString",1,"char const []");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findString",2,"char const []");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findString",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)findString((char const (*))arg1,(char const (*))arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_unknown_return_blob_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("psudo_type::blob",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::blob",1,"psudo_type *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("psudo_type::blob",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_blob_set",1,SWIGTYPE_p_psudo_type);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->blob = *arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_findString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  char *arg2 ;
  int result;
  
  SWIG_check_num_args("findString",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("findString",1,"char const []");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findString",2,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)findString((char const (*))arg1,(char const (*))arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_unknown_return_blob_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("psudo_type::blob",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::blob",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_blob_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (std::string *) & ((arg1)->blob);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_findString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_findString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_findString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'findString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findString(char const [],char const [],int)\n"
    "    findString(char const [],char const [])\n");
  lua_error(L);return 0;
}


static int _wrap_slice(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  int arg3 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("slice",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("slice",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("slice",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("slice",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (pChar *)slice(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
=======
static int _wrap_unknown_return_c_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("psudo_type::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::c",1,"psudo_type *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("psudo_type::c",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_c_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_unknown_return_c_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char result;
  
  SWIG_check_num_args("psudo_type::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::c",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_c_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (char) ((arg1)->c);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_shiftArrayLeft__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("shiftArrayLeft",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("shiftArrayLeft",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("shiftArrayLeft",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (pChar *)shiftArrayLeft(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
=======
static int _wrap_unknown_return_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  void_ptr arg2 = (void_ptr) 0 ;
  
  SWIG_check_num_args("psudo_type::ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::ptr",1,"psudo_type *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("psudo_type::ptr",2,"void_ptr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_ptr_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2=(void_ptr)SWIG_MustGetPtr(L,2,0,0,2,"unknown_return_ptr_set");
  if (arg1) (arg1)->ptr = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_shiftArrayLeft__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  int arg3 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("shiftArrayLeft",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("shiftArrayLeft",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("shiftArrayLeft",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("shiftArrayLeft",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (pChar *)shiftArrayLeft(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
=======
static int _wrap_unknown_return_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("psudo_type::ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::ptr",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_ptr_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (void_ptr) ((arg1)->ptr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_shiftArrayLeft(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_shiftArrayLeft__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_shiftArrayLeft__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'shiftArrayLeft'\n"
    "  Possible C/C++ prototypes are:\n"
    "    shiftArrayLeft(char *const,int)\n"
    "    shiftArrayLeft(char *const,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_transferStr(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) (pChar *)0 ;
  char *arg2 = (char *) (char *)0 ;
  
  SWIG_check_num_args("transferStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transferStr",1,"pChar *const");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("transferStr",2,"char *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("transferStr",1,SWIGTYPE_p_pChar);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  transferStr(arg1,arg2);
=======
static int _wrap_new_unknown_return(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *result = 0 ;
  
  SWIG_check_num_args("psudo_type::psudo_type",0,0)
  result = (psudo_type *)new psudo_type();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_psudo_type,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_unknown_return(void *obj) {
psudo_type *arg1 = (psudo_type *) obj;
delete arg1;
}
static int _proxy__wrap_new_unknown_return(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_unknown_return);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_unknown_return_attributes[] = {
    { "flag", _wrap_unknown_return_flag_get, _wrap_unknown_return_flag_set },
    { "number", _wrap_unknown_return_number_get, _wrap_unknown_return_number_set },
    { "uNumber", _wrap_unknown_return_uNumber_get, _wrap_unknown_return_uNumber_set },
    { "decimal", _wrap_unknown_return_decimal_get, _wrap_unknown_return_decimal_set },
    { "answer", _wrap_unknown_return_answer_get, _wrap_unknown_return_answer_set },
    { "str", _wrap_unknown_return_str_get, _wrap_unknown_return_str_set },
    { "blob", _wrap_unknown_return_blob_get, _wrap_unknown_return_blob_set },
    { "c", _wrap_unknown_return_c_get, _wrap_unknown_return_c_set },
    { "ptr", _wrap_unknown_return_ptr_get, _wrap_unknown_return_ptr_set },
    {0,0,0}
};
static swig_lua_method swig_unknown_return_methods[]= {
    {0,0}
};
static swig_lua_method swig_unknown_return_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_unknown_return_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_unknown_return_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_unknown_return_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_unknown_return_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_unknown_return_Sf_SwigStatic = {
    "unknown_return",
    swig_unknown_return_Sf_SwigStatic_methods,
    swig_unknown_return_Sf_SwigStatic_attributes,
    swig_unknown_return_Sf_SwigStatic_constants,
    swig_unknown_return_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_unknown_return_bases[] = {0};
static const char *swig_unknown_return_base_names[] = {0};
static swig_lua_class _wrap_class_unknown_return = { "unknown_return", "unknown_return", &SWIGTYPE_p_psudo_type,_proxy__wrap_new_unknown_return, swig_delete_unknown_return, swig_unknown_return_methods, swig_unknown_return_attributes, &swig_unknown_return_Sf_SwigStatic, swig_unknown_return_meta, swig_unknown_return_bases, swig_unknown_return_base_names };

static int _wrap_math_VECTOR_endX_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::endX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endX",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::endX",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endX_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->endX = arg2;
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_createPCharFromBuffer(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  int arg2 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("createPCharFromBuffer",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("createPCharFromBuffer",1,"char []");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("createPCharFromBuffer",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (pChar *)createPCharFromBuffer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
=======
static int _wrap_math_VECTOR_endX_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::endX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endX",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endX_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->endX);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_endY_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::endY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endY",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::endY",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endY_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->endY = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_removeCharFromStr(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  std::string result;
  
  SWIG_check_num_args("removeCharFromStr",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("removeCharFromStr",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("removeCharFromStr",2,"char const []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = removeCharFromStr(arg1,(char const (*))arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_math_VECTOR_endY_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::endY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::endY",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_endY_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->endY);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_removeMultipleCharFromStr(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  std::string result;
  
  SWIG_check_num_args("removeMultipleCharFromStr",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("removeMultipleCharFromStr",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("removeMultipleCharFromStr",2,"char const []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = removeMultipleCharFromStr(arg1,(char const (*))arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_math_VECTOR_direction_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("math_VECTOR::direction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::direction",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::direction",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_direction_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->direction = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_searchCharIndex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("searchCharIndex",2,"char []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)searchCharIndex(arg1,arg2);
=======
static int _wrap_math_VECTOR_direction_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  double result;
  
  SWIG_check_num_args("math_VECTOR::direction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::direction",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_direction_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (double) ((arg1)->direction);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_searchCharIndex(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_searchCharIndex__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_searchCharIndex__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_searchCharIndex__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'searchCharIndex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    searchCharIndex(char const,std::string,int)\n"
    "    searchCharIndex(char const,std::string)\n"
    "    searchCharIndex(char,char [])\n");
  lua_error(L);return 0;
}


static int _wrap_sliceStr(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  std::string *argp1 ;
  std::string result;
  
  SWIG_check_num_args("sliceStr",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("sliceStr",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sliceStr",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sliceStr",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("sliceStr",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = sliceStr(arg1,arg2,arg3);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_math_VECTOR_magnitude_set(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_VECTOR::magnitude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::magnitude",1,"math_VECTOR *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_VECTOR::magnitude",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_magnitude_set",1,SWIGTYPE_p_math_VECTOR);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->magnitude = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_math_VECTOR_magnitude_get(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *arg1 = (math_VECTOR *) 0 ;
  int result;
  
  SWIG_check_num_args("math_VECTOR::magnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_VECTOR::magnitude",1,"math_VECTOR *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_VECTOR,0))){
    SWIG_fail_ptr("math_VECTOR_magnitude_get",1,SWIGTYPE_p_math_VECTOR);
  }
  
  result = (int) ((arg1)->magnitude);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_math_VECTOR(lua_State* L) {
  int SWIG_arg = 0;
  math_VECTOR *result = 0 ;
  
  SWIG_check_num_args("math_VECTOR::math_VECTOR",0,0)
  result = (math_VECTOR *)new math_VECTOR();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math_VECTOR,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_math_VECTOR(void *obj) {
math_VECTOR *arg1 = (math_VECTOR *) obj;
delete arg1;
}
static int _proxy__wrap_new_math_VECTOR(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_math_VECTOR);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_math_VECTOR_attributes[] = {
    { "endX", _wrap_math_VECTOR_endX_get, _wrap_math_VECTOR_endX_set },
    { "endY", _wrap_math_VECTOR_endY_get, _wrap_math_VECTOR_endY_set },
    { "direction", _wrap_math_VECTOR_direction_get, _wrap_math_VECTOR_direction_set },
    { "magnitude", _wrap_math_VECTOR_magnitude_get, _wrap_math_VECTOR_magnitude_set },
    {0,0,0}
};
static swig_lua_method swig_math_VECTOR_methods[]= {
    {0,0}
};
static swig_lua_method swig_math_VECTOR_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_math_VECTOR_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_math_VECTOR_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_math_VECTOR_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_math_VECTOR_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_math_VECTOR_Sf_SwigStatic = {
    "math_VECTOR",
    swig_math_VECTOR_Sf_SwigStatic_methods,
    swig_math_VECTOR_Sf_SwigStatic_attributes,
    swig_math_VECTOR_Sf_SwigStatic_constants,
    swig_math_VECTOR_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_math_VECTOR_bases[] = {0};
static const char *swig_math_VECTOR_base_names[] = {0};
static swig_lua_class _wrap_class_math_VECTOR = { "math_VECTOR", "math_VECTOR", &SWIGTYPE_p_math_VECTOR,_proxy__wrap_new_math_VECTOR, swig_delete_math_VECTOR, swig_math_VECTOR_methods, swig_math_VECTOR_attributes, &swig_math_VECTOR_Sf_SwigStatic, swig_math_VECTOR_meta, swig_math_VECTOR_bases, swig_math_VECTOR_base_names };

static int _wrap_math_point_X_set(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_point::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::X",1,"math_point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_point::X",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_X_set",1,SWIGTYPE_p_math_point);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_numToInt(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int result;
  
  SWIG_check_num_args("numToInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("numToInt",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (int)numToInt(arg1);
=======
static int _wrap_math_point_X_get(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int result;
  
  SWIG_check_num_args("math_point::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::X",1,"math_point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_X_get",1,SWIGTYPE_p_math_point);
  }
  
  result = (int) ((arg1)->X);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_fuseStrs(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string *argp1 ;
  std::string *argp2 ;
  std::string result;
  
  SWIG_check_num_args("fuseStrs",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("fuseStrs",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("fuseStrs",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("fuseStrs",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("fuseStrs",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = fuseStrs(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_math_point_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_point::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::Y",1,"math_point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_point::Y",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_Y_set",1,SWIGTYPE_p_math_point);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_capitalizeStr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string result;
  
  SWIG_check_num_args("capitalizeStr",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("capitalizeStr",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("capitalizeStr",1,SWIGTYPE_p_std__string);
  }
  
  result = capitalizeStr((std::string const &)*arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_math_point_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int result;
  
  SWIG_check_num_args("math_point::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::Y",1,"math_point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_Y_get",1,SWIGTYPE_p_math_point);
  }
  
  result = (int) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_replaceCharInStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char arg2 ;
  char arg3 ;
  bool arg4 ;
  std::string *argp1 ;
  std::string result;
  
  SWIG_check_num_args("replaceCharInStr",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("replaceCharInStr",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("replaceCharInStr",2,"char");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("replaceCharInStr",3,"char");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("replaceCharInStr",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("replaceCharInStr",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (lua_tostring(L, 3))[0];
  arg4 = (lua_toboolean(L, 4)!=0);
  result = replaceCharInStr(arg1,arg2,arg3,arg4);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_math_point_Z_set(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("math_point::Z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::Z",1,"math_point *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("math_point::Z",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_Z_set",1,SWIGTYPE_p_math_point);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Z = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_replaceCharInStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char arg2 ;
  char arg3 ;
  std::string *argp1 ;
  std::string result;
  
  SWIG_check_num_args("replaceCharInStr",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("replaceCharInStr",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("replaceCharInStr",2,"char");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("replaceCharInStr",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("replaceCharInStr",1,SWIGTYPE_p_std__string);
  }
  arg1 = *argp1;
  
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (lua_tostring(L, 3))[0];
  result = replaceCharInStr(arg1,arg2,arg3);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_math_point_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  math_point *arg1 = (math_point *) 0 ;
  int result;
  
  SWIG_check_num_args("math_point::Z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("math_point::Z",1,"math_point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("math_point_Z_get",1,SWIGTYPE_p_math_point);
  }
  
  result = (int) ((arg1)->Z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_replaceCharInStr(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_replaceCharInStr__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_replaceCharInStr__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'replaceCharInStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    replaceCharInStr(std::string,char,char,bool)\n"
    "    replaceCharInStr(std::string,char,char)\n");
  lua_error(L);return 0;
}


static int _wrap_getCharArrayFromConstArray(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("getCharArrayFromConstArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("getCharArrayFromConstArray",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("getCharArrayFromConstArray",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)getCharArrayFromConstArray((std::string const &)*arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
=======
static int _wrap_new_math_point(lua_State* L) {
  int SWIG_arg = 0;
  math_point *result = 0 ;
  
  SWIG_check_num_args("math_point::math_point",0,0)
  result = (math_point *)new math_point();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math_point,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_round(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("round",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("round",2,"int");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)round(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iround(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("iround",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("iround",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("iround",2,"int");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)iround(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_changeProgramWorkingDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("changeProgramWorkingDirectory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("changeProgramWorkingDirectory",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)changeProgramWorkingDirectory(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static void swig_delete_math_point(void *obj) {
math_point *arg1 = (math_point *) obj;
delete arg1;
}
static int _proxy__wrap_new_math_point(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_math_point);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_math_point_attributes[] = {
    { "X", _wrap_math_point_X_get, _wrap_math_point_X_set },
    { "Y", _wrap_math_point_Y_get, _wrap_math_point_Y_set },
    { "Z", _wrap_math_point_Z_get, _wrap_math_point_Z_set },
    {0,0,0}
};
static swig_lua_method swig_math_point_methods[]= {
    {0,0}
};
static swig_lua_method swig_math_point_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_math_point_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_math_point_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_math_point_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_math_point_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_math_point_Sf_SwigStatic = {
    "math_point",
    swig_math_point_Sf_SwigStatic_methods,
    swig_math_point_Sf_SwigStatic_attributes,
    swig_math_point_Sf_SwigStatic_constants,
    swig_math_point_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_math_point_bases[] = {0};
static const char *swig_math_point_base_names[] = {0};
static swig_lua_class _wrap_class_math_point = { "math_point", "math_point", &SWIGTYPE_p_math_point,_proxy__wrap_new_math_point, swig_delete_math_point, swig_math_point_methods, swig_math_point_attributes, &swig_math_point_Sf_SwigStatic, swig_math_point_meta, swig_math_point_bases, swig_math_point_base_names };

static int _wrap_Range_i_set(lua_State* L) {
  int SWIG_arg = 0;
  Range *arg1 = (Range *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Range::i",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Range::i",1,"Range *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Range::i",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("Range_i_set",1,SWIGTYPE_p_Range);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->i = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_capitalizeChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char result;
  
  SWIG_check_num_args("capitalizeChar",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("capitalizeChar",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (char)capitalizeChar(arg1);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
=======
static int _wrap_Range_i_get(lua_State* L) {
  int SWIG_arg = 0;
  Range *arg1 = (Range *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Range::i",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Range::i",1,"Range *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("Range_i_get",1,SWIGTYPE_p_Range);
  }
  
  result =  ((arg1)->i);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_lowerCaseChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char result;
  
  SWIG_check_num_args("lowerCaseChar",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("lowerCaseChar",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (char)lowerCaseChar(arg1);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
=======
static int _wrap_Range_f_set(lua_State* L) {
  int SWIG_arg = 0;
  Range *arg1 = (Range *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Range::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Range::f",1,"Range *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Range::f",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("Range_f_set",1,SWIGTYPE_p_Range);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_scientificFormat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("scientificFormat",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scientificFormat",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("scientificFormat",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = scientificFormat((std::string const &)*arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_Range_f_get(lua_State* L) {
  int SWIG_arg = 0;
  Range *arg1 = (Range *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Range::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Range::f",1,"Range *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("Range_f_get",1,SWIGTYPE_p_Range);
  }
  
  result =  ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_scientificFormat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("scientificFormat",1,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("scientificFormat",1,SWIGTYPE_p_std__string);
  }
  
  result = scientificFormat((std::string const &)*arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_new_Range__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  Range *result = 0 ;
  
  SWIG_check_num_args("Range::Range",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Range::Range",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Range::Range",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Range *)new Range(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Range,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_scientificFormat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scientificFormat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scientificFormat",2,"size_t");
  arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = scientificFormat(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_new_Range__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Range *result = 0 ;
  
  SWIG_check_num_args("Range::Range",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Range::Range",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (Range *)new Range(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Range,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_scientificFormat__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scientificFormat",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = scientificFormat(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_new_Range__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Range *result = 0 ;
  
  SWIG_check_num_args("Range::Range",0,0)
  result = (Range *)new Range();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Range,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_scientificFormat(lua_State* L) {
=======
static int _wrap_new_Range(lua_State* L) {
>>>>>>> TheIllusiveMan
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
<<<<<<< HEAD
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_scientificFormat__SWIG_1(L);
    }
=======
  if (argc == 0) {
    return _wrap_new_Range__SWIG_2(L);
>>>>>>> TheIllusiveMan
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
<<<<<<< HEAD
      return _wrap_scientificFormat__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scientificFormat__SWIG_0(L);
      }
=======
      return _wrap_new_Range__SWIG_1(L);
>>>>>>> TheIllusiveMan
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
<<<<<<< HEAD
        return _wrap_scientificFormat__SWIG_2(L);
=======
        return _wrap_new_Range__SWIG_0(L);
>>>>>>> TheIllusiveMan
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'scientificFormat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    scientificFormat(std::string const &,size_t)\n"
    "    scientificFormat(std::string const &)\n"
    "    scientificFormat(float,size_t)\n"
    "    scientificFormat(float)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Range'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Range::Range(size_t,size_t)\n"
    "    Range::Range(size_t)\n"
    "    Range::Range()\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_new_inputMouse(lua_State* L) {
  int SWIG_arg = 0;
  SDL_Event *arg1 = (SDL_Event *) 0 ;
  inputMouse *result = 0 ;
  
  SWIG_check_num_args("inputMouse::inputMouse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::inputMouse",1,"SDL_Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("new_inputMouse",1,SWIGTYPE_p_SDL_Event);
  }
  
  result = (inputMouse *)new inputMouse(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inputMouse,1); SWIG_arg++; 
=======
static void swig_delete_Range(void *obj) {
Range *arg1 = (Range *) obj;
delete arg1;
}
static int _proxy__wrap_new_Range(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Range);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Range_attributes[] = {
    { "i", _wrap_Range_i_get, _wrap_Range_i_set },
    { "f", _wrap_Range_f_get, _wrap_Range_f_set },
    {0,0,0}
};
static swig_lua_method swig_Range_methods[]= {
    {0,0}
};
static swig_lua_method swig_Range_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Range_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Range_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Range_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Range_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Range_Sf_SwigStatic = {
    "Range",
    swig_Range_Sf_SwigStatic_methods,
    swig_Range_Sf_SwigStatic_attributes,
    swig_Range_Sf_SwigStatic_constants,
    swig_Range_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Range_bases[] = {0};
static const char *swig_Range_base_names[] = {0};
static swig_lua_class _wrap_class_Range = { "Range", "Range", &SWIGTYPE_p_Range,_proxy__wrap_new_Range, swig_delete_Range, swig_Range_methods, swig_Range_attributes, &swig_Range_Sf_SwigStatic, swig_Range_meta, swig_Range_bases, swig_Range_base_names };

static int _wrap_Resolution_height_set(lua_State* L) {
  int SWIG_arg = 0;
  Resolution *arg1 = (Resolution *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Resolution::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Resolution::height",1,"Resolution *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Resolution::height",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Resolution,0))){
    SWIG_fail_ptr("Resolution_height_set",1,SWIGTYPE_p_Resolution);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_inputMouse_UpdateProcessedCoordinates(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  bool result;
  
  SWIG_check_num_args("inputMouse::UpdateProcessedCoordinates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::UpdateProcessedCoordinates",1,"inputMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_UpdateProcessedCoordinates",1,SWIGTYPE_p_inputMouse);
  }
  
  result = (bool)(arg1)->UpdateProcessedCoordinates();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Resolution_height_get(lua_State* L) {
  int SWIG_arg = 0;
  Resolution *arg1 = (Resolution *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Resolution::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Resolution::height",1,"Resolution *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Resolution,0))){
    SWIG_fail_ptr("Resolution_height_get",1,SWIGTYPE_p_Resolution);
  }
  
  result =  ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_inputMouse_ChangeCoordinates(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("inputMouse::ChangeCoordinates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::ChangeCoordinates",1,"inputMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("inputMouse::ChangeCoordinates",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("inputMouse::ChangeCoordinates",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_ChangeCoordinates",1,SWIGTYPE_p_inputMouse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->ChangeCoordinates(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_inputMouse_buttonPress(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  
  SWIG_check_num_args("inputMouse::buttonPress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::buttonPress",1,"inputMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_buttonPress",1,SWIGTYPE_p_inputMouse);
  }
  
  (arg1)->buttonPress();
=======
static int _wrap_Resolution_width_set(lua_State* L) {
  int SWIG_arg = 0;
  Resolution *arg1 = (Resolution *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Resolution::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Resolution::width",1,"Resolution *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Resolution::width",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Resolution,0))){
    SWIG_fail_ptr("Resolution_width_set",1,SWIGTYPE_p_Resolution);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2;
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_inputMouse_getButtonState(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  int result;
  
  SWIG_check_num_args("inputMouse::getButtonState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::getButtonState",1,"inputMouse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_getButtonState",1,SWIGTYPE_p_inputMouse);
  }
  
  result = (int)((inputMouse const *)arg1)->getButtonState();
=======
static int _wrap_Resolution_width_get(lua_State* L) {
  int SWIG_arg = 0;
  Resolution *arg1 = (Resolution *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Resolution::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Resolution::width",1,"Resolution *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Resolution,0))){
    SWIG_fail_ptr("Resolution_width_get",1,SWIGTYPE_p_Resolution);
  }
  
  result =  ((arg1)->width);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_inputMouse_GetButton(lua_State* L) {
  int SWIG_arg = 0;
  inputMouse *arg1 = (inputMouse *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("inputMouse::GetButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputMouse::GetButton",1,"inputMouse const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputMouse,0))){
    SWIG_fail_ptr("inputMouse_GetButton",1,SWIGTYPE_p_inputMouse);
  }
  
  result = (unsigned int)((inputMouse const *)arg1)->GetButton();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_new_Resolution(lua_State* L) {
  int SWIG_arg = 0;
  Resolution *result = 0 ;
  
  SWIG_check_num_args("Resolution::Resolution",0,0)
  result = (Resolution *)new Resolution();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Resolution,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_inputMouse(void *obj) {
inputMouse *arg1 = (inputMouse *) obj;
delete arg1;
}
static swig_lua_method swig_inputMouse_methods[] = {
    {"UpdateProcessedCoordinates", _wrap_inputMouse_UpdateProcessedCoordinates}, 
    {"ChangeCoordinates", _wrap_inputMouse_ChangeCoordinates}, 
    {"buttonPress", _wrap_inputMouse_buttonPress}, 
    {"getButtonState", _wrap_inputMouse_getButtonState}, 
    {"GetButton", _wrap_inputMouse_GetButton}, 
    {0,0}
};
static swig_lua_attribute swig_inputMouse_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_inputMouse_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_inputMouse_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_inputMouse_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_inputMouse_bases[] = {0};
static const char *swig_inputMouse_base_names[] = {0};
static swig_lua_class _wrap_class_inputMouse = { "inputMouse", &SWIGTYPE_p_inputMouse,_wrap_new_inputMouse, swig_delete_inputMouse, swig_inputMouse_methods, swig_inputMouse_attributes, { "inputMouse", swig_inputMouse_cls_methods, swig_inputMouse_cls_attributes, swig_inputMouse_cls_constants }, swig_inputMouse_bases, swig_inputMouse_base_names };

static int _wrap_new_inputKeyboard(lua_State* L) {
  int SWIG_arg = 0;
  SDL_Event *arg1 = (SDL_Event *) 0 ;
  inputKeyboard *result = 0 ;
  
  SWIG_check_num_args("inputKeyboard::inputKeyboard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::inputKeyboard",1,"SDL_Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("new_inputKeyboard",1,SWIGTYPE_p_SDL_Event);
  }
  
  result = (inputKeyboard *)new inputKeyboard(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_inputKeyboard,1); SWIG_arg++; 
=======
static void swig_delete_Resolution(void *obj) {
Resolution *arg1 = (Resolution *) obj;
delete arg1;
}
static int _proxy__wrap_new_Resolution(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Resolution);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Resolution_attributes[] = {
    { "height", _wrap_Resolution_height_get, _wrap_Resolution_height_set },
    { "width", _wrap_Resolution_width_get, _wrap_Resolution_width_set },
    {0,0,0}
};
static swig_lua_method swig_Resolution_methods[]= {
    {0,0}
};
static swig_lua_method swig_Resolution_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Resolution_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Resolution_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Resolution_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Resolution_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Resolution_Sf_SwigStatic = {
    "Resolution",
    swig_Resolution_Sf_SwigStatic_methods,
    swig_Resolution_Sf_SwigStatic_attributes,
    swig_Resolution_Sf_SwigStatic_constants,
    swig_Resolution_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Resolution_bases[] = {0};
static const char *swig_Resolution_base_names[] = {0};
static swig_lua_class _wrap_class_Resolution = { "Resolution", "Resolution", &SWIGTYPE_p_Resolution,_proxy__wrap_new_Resolution, swig_delete_Resolution, swig_Resolution_methods, swig_Resolution_attributes, &swig_Resolution_Sf_SwigStatic, swig_Resolution_meta, swig_Resolution_bases, swig_Resolution_base_names };

static int _wrap_maxConn_set(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("maxConn",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("maxConn",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  maxConn = arg1;
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_inputKeyboard_setInputText(lua_State* L) {
  int SWIG_arg = 0;
  inputKeyboard *arg1 = (inputKeyboard *) 0 ;
  
  SWIG_check_num_args("inputKeyboard::setInputText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::setInputText",1,"inputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputKeyboard,0))){
    SWIG_fail_ptr("inputKeyboard_setInputText",1,SWIGTYPE_p_inputKeyboard);
  }
  
  (arg1)->setInputText();
  
=======
static int _wrap_maxConn_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("maxConn",0,0)
  result = (int)maxConn;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_inputKeyboard_toggleTextMode(lua_State* L) {
  int SWIG_arg = 0;
  inputKeyboard *arg1 = (inputKeyboard *) 0 ;
  
  SWIG_check_num_args("inputKeyboard::toggleTextMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::toggleTextMode",1,"inputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputKeyboard,0))){
    SWIG_fail_ptr("inputKeyboard_toggleTextMode",1,SWIGTYPE_p_inputKeyboard);
  }
  
  (arg1)->toggleTextMode();
  
=======
static int _wrap_new_DataBase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DataBase *result = 0 ;
  
  SWIG_check_num_args("DataBase::DataBase",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DataBase::DataBase",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DataBase *)new DataBase((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataBase,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DataBase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *result = 0 ;
  
  SWIG_check_num_args("DataBase::DataBase",0,0)
  result = (DataBase *)new DataBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataBase,1); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_inputKeyboard_getText(lua_State* L) {
  int SWIG_arg = 0;
  inputKeyboard *arg1 = (inputKeyboard *) 0 ;
  std::string result;
  
  SWIG_check_num_args("inputKeyboard::getText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::getText",1,"inputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputKeyboard,0))){
    SWIG_fail_ptr("inputKeyboard_getText",1,SWIGTYPE_p_inputKeyboard);
  }
  
  result = (arg1)->getText();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_new_DataBase(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DataBase__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_DataBase__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DataBase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DataBase::DataBase(char const *)\n"
    "    DataBase::DataBase()\n");
  lua_error(L);return 0;
}


static int _wrap_DataBase_connect(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("DataBase::connect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::connect",1,"DataBase *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("DataBase::connect",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_connect",1,SWIGTYPE_p_DataBase);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->connect((char const *)arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_inputKeyboard_GetKey(lua_State* L) {
  int SWIG_arg = 0;
  inputKeyboard *arg1 = (inputKeyboard *) 0 ;
  char result;
  
  SWIG_check_num_args("inputKeyboard::GetKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inputKeyboard::GetKey",1,"inputKeyboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_inputKeyboard,0))){
    SWIG_fail_ptr("inputKeyboard_GetKey",1,SWIGTYPE_p_inputKeyboard);
  }
  
  result = (char)((inputKeyboard const *)arg1)->GetKey();
  lua_pushfstring(L,"%c",result); SWIG_arg++;
=======
static int _wrap_DataBase_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  
  SWIG_check_num_args("DataBase::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::disconnect",1,"DataBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_disconnect",1,SWIGTYPE_p_DataBase);
  }
  
  (arg1)->disconnect();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_inputKeyboard(void *obj) {
inputKeyboard *arg1 = (inputKeyboard *) obj;
delete arg1;
}
static swig_lua_method swig_inputKeyboard_methods[] = {
    {"setInputText", _wrap_inputKeyboard_setInputText}, 
    {"toggleTextMode", _wrap_inputKeyboard_toggleTextMode}, 
    {"getText", _wrap_inputKeyboard_getText}, 
    {"GetKey", _wrap_inputKeyboard_GetKey}, 
    {0,0}
};
static swig_lua_attribute swig_inputKeyboard_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_inputKeyboard_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_inputKeyboard_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_inputKeyboard_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_inputKeyboard_bases[] = {0};
static const char *swig_inputKeyboard_base_names[] = {0};
static swig_lua_class _wrap_class_inputKeyboard = { "inputKeyboard", &SWIGTYPE_p_inputKeyboard,_wrap_new_inputKeyboard, swig_delete_inputKeyboard, swig_inputKeyboard_methods, swig_inputKeyboard_attributes, { "inputKeyboard", swig_inputKeyboard_cls_methods, swig_inputKeyboard_cls_attributes, swig_inputKeyboard_cls_constants }, swig_inputKeyboard_bases, swig_inputKeyboard_base_names };

static int _wrap_new_ScriptWrap(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ScriptWrap *result = 0 ;
  
  SWIG_check_num_args("ScriptWrap::ScriptWrap",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ScriptWrap::ScriptWrap",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ScriptWrap *)new ScriptWrap((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ScriptWrap,1); SWIG_arg++; 
=======
static int _wrap_DataBase_query(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("DataBase::query",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::query",1,"DataBase *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("DataBase::query",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_query",1,SWIGTYPE_p_DataBase);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->query((std::string const &)*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_executeFunction__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< fuzzy_obj > *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("ScriptWrap::executeFunction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::executeFunction",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::executeFunction",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ScriptWrap::executeFunction",3,"std::vector< fuzzy_obj > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",1,SWIGTYPE_p_ScriptWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",3,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  result = (int)(arg1)->executeFunction((std::string const &)*arg2,(std::vector< fuzzy_obj > const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_DataBase_GetResult__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  int *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DataBase::GetResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"int &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DataBase::GetResult",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->GetResult(*arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_executeFunction__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< fuzzy_obj > *arg3 = 0 ;
  int *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("ScriptWrap::executeFunction",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::executeFunction",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::executeFunction",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ScriptWrap::executeFunction",3,"std::vector< fuzzy_obj > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ScriptWrap::executeFunction",4,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",1,SWIGTYPE_p_ScriptWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",3,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",4,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->executeFunction((std::string const &)*arg2,(std::vector< fuzzy_obj > const &)*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_DataBase_GetResult__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  int *arg2 = 0 ;
  
  SWIG_check_num_args("DataBase::GetResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_int);
  }
  
  (arg1)->GetResult(*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_executeFunction__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< fuzzy_obj > *arg3 = 0 ;
  bool *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("ScriptWrap::executeFunction",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::executeFunction",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::executeFunction",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ScriptWrap::executeFunction",3,"std::vector< fuzzy_obj > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ScriptWrap::executeFunction",4,"bool &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",1,SWIGTYPE_p_ScriptWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",3,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",4,SWIGTYPE_p_bool);
  }
  
  result = (int)(arg1)->executeFunction((std::string const &)*arg2,(std::vector< fuzzy_obj > const &)*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_DataBase_GetResult__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  size_t *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DataBase::GetResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"size_t &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DataBase::GetResult",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_size_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->GetResult(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataBase_GetResult__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  size_t *arg2 = 0 ;
  
  SWIG_check_num_args("DataBase::GetResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"size_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_size_t);
  }
  
  (arg1)->GetResult(*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_executeFunction__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< fuzzy_obj > *arg3 = 0 ;
  char *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("ScriptWrap::executeFunction",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::executeFunction",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::executeFunction",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ScriptWrap::executeFunction",3,"std::vector< fuzzy_obj > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ScriptWrap::executeFunction",4,"char &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",1,SWIGTYPE_p_ScriptWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",3,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_char,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",4,SWIGTYPE_p_char);
  }
  
  result = (int)(arg1)->executeFunction((std::string const &)*arg2,(std::vector< fuzzy_obj > const &)*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_DataBase_GetResult__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  char *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DataBase::GetResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"char &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DataBase::GetResult",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_char,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->GetResult(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataBase_GetResult__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  char *arg2 = 0 ;
  
  SWIG_check_num_args("DataBase::GetResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"char &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_char,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_char);
  }
  
  (arg1)->GetResult(*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_executeFunction__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< fuzzy_obj > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("ScriptWrap::executeFunction",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::executeFunction",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::executeFunction",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ScriptWrap::executeFunction",3,"std::vector< fuzzy_obj > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ScriptWrap::executeFunction",4,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",1,SWIGTYPE_p_ScriptWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",3,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",4,SWIGTYPE_p_std__string);
  }
  
  result = (int)(arg1)->executeFunction((std::string const &)*arg2,(std::vector< fuzzy_obj > const &)*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_DataBase_GetResult__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  bool *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DataBase::GetResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"bool &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DataBase::GetResult",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_bool);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->GetResult(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataBase_GetResult__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  bool *arg2 = 0 ;
  
  SWIG_check_num_args("DataBase::GetResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"bool &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_bool);
  }
  
  (arg1)->GetResult(*arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_executeFunction__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< fuzzy_obj > *arg3 = 0 ;
  void_ptr *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("ScriptWrap::executeFunction",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::executeFunction",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::executeFunction",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ScriptWrap::executeFunction",3,"std::vector< fuzzy_obj > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ScriptWrap::executeFunction",4,"void_ptr &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",1,SWIGTYPE_p_ScriptWrap);
=======
static int _wrap_DataBase_GetResult__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DataBase::GetResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"std::string &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DataBase::GetResult",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
>>>>>>> TheIllusiveMan
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
<<<<<<< HEAD
    SWIG_fail_ptr("ScriptWrap_executeFunction",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",3,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_void_ptr,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",4,SWIGTYPE_p_void_ptr);
  }
  
  result = (int)(arg1)->executeFunction((std::string const &)*arg2,(std::vector< fuzzy_obj > const &)*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->GetResult(*arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_executeFunction__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< fuzzy_obj > *arg3 = 0 ;
  std::vector< fuzzy_obj > *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("ScriptWrap::executeFunction",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::executeFunction",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::executeFunction",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ScriptWrap::executeFunction",3,"std::vector< fuzzy_obj > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ScriptWrap::executeFunction",4,"std::vector< fuzzy_obj > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",1,SWIGTYPE_p_ScriptWrap);
=======
static int _wrap_DataBase_GetResult__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("DataBase::GetResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
>>>>>>> TheIllusiveMan
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
<<<<<<< HEAD
    SWIG_fail_ptr("ScriptWrap_executeFunction",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",3,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("ScriptWrap_executeFunction",4,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  result = (int)(arg1)->executeFunction((std::string const &)*arg2,(std::vector< fuzzy_obj > const &)*arg3,*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->GetResult(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataBase_GetResult__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  std::vector< fuzzy_obj > *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("DataBase::GetResult",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetResult",1,"DataBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DataBase::GetResult",2,"std::vector< fuzzy_obj > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DataBase::GetResult",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetResult",1,SWIGTYPE_p_DataBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_psudo_type_t,0))){
    SWIG_fail_ptr("DataBase_GetResult",2,SWIGTYPE_p_std__vectorT_psudo_type_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->GetResult(*arg2,arg3);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_executeFunction(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
=======
static int _wrap_DataBase_GetResult(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
<<<<<<< HEAD
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ScriptWrap_executeFunction__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
=======
        return _wrap_DataBase_GetResult__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_size_t, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
<<<<<<< HEAD
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ScriptWrap_executeFunction__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
=======
        return _wrap_DataBase_GetResult__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DataBase_GetResult__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DataBase_GetResult__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
<<<<<<< HEAD
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ScriptWrap_executeFunction__SWIG_2(L);
          }
=======
        return _wrap_DataBase_GetResult__SWIG_9(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_size_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DataBase_GetResult__SWIG_2(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
=======
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
<<<<<<< HEAD
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ScriptWrap_executeFunction__SWIG_3(L);
          }
=======
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DataBase_GetResult__SWIG_6(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
=======
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
<<<<<<< HEAD
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ScriptWrap_executeFunction__SWIG_4(L);
          }
=======
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DataBase_GetResult__SWIG_0(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
=======
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
<<<<<<< HEAD
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_void_ptr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ScriptWrap_executeFunction__SWIG_5(L);
          }
=======
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DataBase_GetResult__SWIG_8(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
<<<<<<< HEAD
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
=======
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
>>>>>>> TheIllusiveMan
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
<<<<<<< HEAD
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
=======
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_char, 0)) {
>>>>>>> TheIllusiveMan
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
<<<<<<< HEAD
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ScriptWrap_executeFunction__SWIG_6(L);
          }
=======
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DataBase_GetResult__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_psudo_type_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DataBase_GetResult__SWIG_10(L);
>>>>>>> TheIllusiveMan
        }
      }
    }
  }
  
<<<<<<< HEAD
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ScriptWrap_executeFunction'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ScriptWrap::executeFunction(std::string const &,std::vector< fuzzy_obj > const &)\n"
    "    ScriptWrap::executeFunction(std::string const &,std::vector< fuzzy_obj > const &,int &)\n"
    "    ScriptWrap::executeFunction(std::string const &,std::vector< fuzzy_obj > const &,bool &)\n"
    "    ScriptWrap::executeFunction(std::string const &,std::vector< fuzzy_obj > const &,char &)\n"
    "    ScriptWrap::executeFunction(std::string const &,std::vector< fuzzy_obj > const &,std::string &)\n"
    "    ScriptWrap::executeFunction(std::string const &,std::vector< fuzzy_obj > const &,void_ptr &)\n"
    "    ScriptWrap::executeFunction(std::string const &,std::vector< fuzzy_obj > const &,std::vector< fuzzy_obj > &)\n");
=======
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DataBase_GetResult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DataBase::GetResult(int &,size_t)\n"
    "    DataBase::GetResult(int &)\n"
    "    DataBase::GetResult(size_t &,size_t)\n"
    "    DataBase::GetResult(size_t &)\n"
    "    DataBase::GetResult(char &,size_t)\n"
    "    DataBase::GetResult(char &)\n"
    "    DataBase::GetResult(bool &,size_t)\n"
    "    DataBase::GetResult(bool &)\n"
    "    DataBase::GetResult(std::string &,size_t)\n"
    "    DataBase::GetResult(std::string &)\n"
    "    DataBase::GetResult(std::vector< fuzzy_obj > &,size_t)\n");
>>>>>>> TheIllusiveMan
  lua_error(L);return 0;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_AddArgument__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ScriptWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::AddArgument",1,"ScriptWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScriptWrap::AddArgument",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",1,SWIGTYPE_p_ScriptWrap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->AddArgument(arg2);
=======
static int _wrap_DataBase_GetDBType(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DataBase::GetDBType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::GetDBType",1,"DataBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_GetDBType",1,SWIGTYPE_p_DataBase);
  }
  
  result = ((DataBase const *)arg1)->GetDBType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DataBase_isConnected(lua_State* L) {
  int SWIG_arg = 0;
  DataBase *arg1 = (DataBase *) 0 ;
  bool result;
  
  SWIG_check_num_args("DataBase::isConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DataBase::isConnected",1,"DataBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("DataBase_isConnected",1,SWIGTYPE_p_DataBase);
  }
  
  result = (bool)((DataBase const *)arg1)->isConnected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DataBase(void *obj) {
DataBase *arg1 = (DataBase *) obj;
delete arg1;
}
static int _proxy__wrap_new_DataBase(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DataBase);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DataBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DataBase_methods[]= {
    { "connect", _wrap_DataBase_connect},
    { "disconnect", _wrap_DataBase_disconnect},
    { "query", _wrap_DataBase_query},
    { "GetResult", _wrap_DataBase_GetResult},
    { "GetDBType", _wrap_DataBase_GetDBType},
    { "isConnected", _wrap_DataBase_isConnected},
    {0,0}
};
static swig_lua_method swig_DataBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DataBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DataBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DataBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DataBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DataBase_Sf_SwigStatic = {
    "DataBase",
    swig_DataBase_Sf_SwigStatic_methods,
    swig_DataBase_Sf_SwigStatic_attributes,
    swig_DataBase_Sf_SwigStatic_constants,
    swig_DataBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DataBase_bases[] = {0,0};
static const char *swig_DataBase_base_names[] = {"SQLGenerator *",0};
static swig_lua_class _wrap_class_DataBase = { "DataBase", "DataBase", &SWIGTYPE_p_DataBase,_proxy__wrap_new_DataBase, swig_delete_DataBase, swig_DataBase_methods, swig_DataBase_attributes, &swig_DataBase_Sf_SwigStatic, swig_DataBase_meta, swig_DataBase_bases, swig_DataBase_base_names };

static int _wrap_pChar_pBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("pChar::pBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::pBuffer",1,"pChar *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("pChar::pBuffer",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_pBuffer_set",1,SWIGTYPE_p_pChar);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->pBuffer;
    if (arg2) {
      arg1->pBuffer = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->pBuffer, (const char *)arg2);
    } else {
      arg1->pBuffer = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pChar_pBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("pChar::pBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::pBuffer",1,"pChar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_pBuffer_get",1,SWIGTYPE_p_pChar);
  }
  
  result = (char *) ((arg1)->pBuffer);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pChar_size_set(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pChar::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::size",1,"pChar *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pChar::size",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_size_set",1,SWIGTYPE_p_pChar);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pChar_size_get(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pChar::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pChar::size",1,"pChar *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("pChar_size_get",1,SWIGTYPE_p_pChar);
  }
  
  result = (unsigned int) ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pChar(lua_State* L) {
  int SWIG_arg = 0;
  pChar *result = 0 ;
  
  SWIG_check_num_args("pChar::pChar",0,0)
  result = (pChar *)new pChar();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_pChar(void *obj) {
pChar *arg1 = (pChar *) obj;
delete arg1;
}
static int _proxy__wrap_new_pChar(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_pChar);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_pChar_attributes[] = {
    { "pBuffer", _wrap_pChar_pBuffer_get, _wrap_pChar_pBuffer_set },
    { "size", _wrap_pChar_size_get, _wrap_pChar_size_set },
    {0,0,0}
};
static swig_lua_method swig_pChar_methods[]= {
    {0,0}
};
static swig_lua_method swig_pChar_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_pChar_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_pChar_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_pChar_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_pChar_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_pChar_Sf_SwigStatic = {
    "pChar",
    swig_pChar_Sf_SwigStatic_methods,
    swig_pChar_Sf_SwigStatic_attributes,
    swig_pChar_Sf_SwigStatic_constants,
    swig_pChar_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_pChar_bases[] = {0};
static const char *swig_pChar_base_names[] = {0};
static swig_lua_class _wrap_class_pChar = { "pChar", "pChar", &SWIGTYPE_p_pChar,_proxy__wrap_new_pChar, swig_delete_pChar, swig_pChar_methods, swig_pChar_attributes, &swig_pChar_Sf_SwigStatic, swig_pChar_meta, swig_pChar_bases, swig_pChar_base_names };

static int _wrap_charToInt(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int result;
  
  SWIG_check_num_args("charToInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("charToInt",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (int)charToInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cStrToInt(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  int result;
  
  SWIG_check_num_args("cStrToInt",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("cStrToInt",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)cStrToInt((char const (*))arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_intToStr(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  std::string result;
  
  SWIG_check_num_args("intToStr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("intToStr",1,"int const");
  arg1 = (int const)lua_tonumber(L, 1);
  result = intToStr(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cStrToNum(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  double result;
  
  SWIG_check_num_args("cStrToNum",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("cStrToNum",1,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)cStrToNum((char const (*))arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_numToStr(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("numToStr",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("numToStr",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = numToStr(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchCharIndex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char const");
  if(!lua_isstring(L,2)) SWIG_fail_arg("searchCharIndex",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("searchCharIndex",3,"int");
  arg1 = (lua_tostring(L, 1))[0];
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)searchCharIndex(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchCharIndex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char const");
  if(!lua_isstring(L,2)) SWIG_fail_arg("searchCharIndex",2,"std::string");
  arg1 = (lua_tostring(L, 1))[0];
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (int)searchCharIndex(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchCharIndex(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_searchCharIndex__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_searchCharIndex__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'searchCharIndex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    searchCharIndex(char const,std::string,int)\n"
    "    searchCharIndex(char const,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_searchChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  std::string arg2 ;
  bool result;
  
  SWIG_check_num_args("searchChar",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchChar",1,"char const");
  if(!lua_isstring(L,2)) SWIG_fail_arg("searchChar",2,"std::string");
  arg1 = (lua_tostring(L, 1))[0];
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)searchChar(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_findString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  char *arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("findString",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("findString",1,"char const []");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findString",2,"char const []");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findString",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)findString((char const (*))arg1,(char const (*))arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_findString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  char *arg2 ;
  int result;
  
  SWIG_check_num_args("findString",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("findString",1,"char const []");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("findString",2,"char const []");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)findString((char const (*))arg1,(char const (*))arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_findString(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_findString__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_findString__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'findString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    findString(char const [],char const [],int)\n"
    "    findString(char const [],char const [])\n");
  lua_error(L);return 0;
}


static int _wrap_slicepChar(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  int arg3 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("slicepChar",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("slicepChar",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("slicepChar",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("slicepChar",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (pChar *)slicepChar(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shiftArrayLeft__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("shiftArrayLeft",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("shiftArrayLeft",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("shiftArrayLeft",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (pChar *)shiftArrayLeft(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shiftArrayLeft__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) (char *)0 ;
  int arg2 ;
  int arg3 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("shiftArrayLeft",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("shiftArrayLeft",1,"char *const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("shiftArrayLeft",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("shiftArrayLeft",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (pChar *)shiftArrayLeft(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_shiftArrayLeft(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_shiftArrayLeft__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_shiftArrayLeft__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'shiftArrayLeft'\n"
    "  Possible C/C++ prototypes are:\n"
    "    shiftArrayLeft(char *const,int)\n"
    "    shiftArrayLeft(char *const,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_transferStr(lua_State* L) {
  int SWIG_arg = 0;
  pChar *arg1 = (pChar *) (pChar *)0 ;
  char *arg2 = (char *) (char *)0 ;
  
  SWIG_check_num_args("transferStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transferStr",1,"pChar *const");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("transferStr",2,"char *const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pChar,0))){
    SWIG_fail_ptr("transferStr",1,SWIGTYPE_p_pChar);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  transferStr(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createPCharFromBuffer(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 ;
  int arg2 ;
  pChar *result = 0 ;
  
  SWIG_check_num_args("createPCharFromBuffer",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("createPCharFromBuffer",1,"char []");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("createPCharFromBuffer",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (pChar *)createPCharFromBuffer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pChar,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_removeCharFromStr(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  std::string result;
  
  SWIG_check_num_args("removeCharFromStr",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("removeCharFromStr",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("removeCharFromStr",2,"char const []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = removeCharFromStr(arg1,(char const (*))arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_removeMultipleCharFromStr(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  std::string result;
  
  SWIG_check_num_args("removeMultipleCharFromStr",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("removeMultipleCharFromStr",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("removeMultipleCharFromStr",2,"char const []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = removeMultipleCharFromStr(arg1,(char const (*))arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_searchCharIndex_char(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char *arg2 ;
  int result;
  
  SWIG_check_num_args("searchCharIndex",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("searchCharIndex",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("searchCharIndex",2,"char []");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)searchCharIndex(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sliceStr(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  SWIG_check_num_args("sliceStr",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("sliceStr",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("sliceStr",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("sliceStr",3,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = sliceStr(arg1,arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_numToInt(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int result;
  
  SWIG_check_num_args("numToInt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("numToInt",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (int)numToInt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fuseStrs(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  SWIG_check_num_args("fuseStrs",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("fuseStrs",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("fuseStrs",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = fuseStrs(arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_capitalizeStr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("capitalizeStr",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("capitalizeStr",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = capitalizeStr((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replaceCharInStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char arg2 ;
  char arg3 ;
  bool arg4 ;
  std::string result;
  
  SWIG_check_num_args("replaceCharInStr",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("replaceCharInStr",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("replaceCharInStr",2,"char");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("replaceCharInStr",3,"char");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("replaceCharInStr",4,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (lua_tostring(L, 3))[0];
  arg4 = (lua_toboolean(L, 4)!=0);
  result = replaceCharInStr(arg1,arg2,arg3,arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replaceCharInStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  char arg2 ;
  char arg3 ;
  std::string result;
  
  SWIG_check_num_args("replaceCharInStr",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("replaceCharInStr",1,"std::string");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("replaceCharInStr",2,"char");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("replaceCharInStr",3,"char");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (lua_tostring(L, 3))[0];
  result = replaceCharInStr(arg1,arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replaceCharInStr(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_replaceCharInStr__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_replaceCharInStr__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'replaceCharInStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    replaceCharInStr(std::string,char,char,bool)\n"
    "    replaceCharInStr(std::string,char,char)\n");
  lua_error(L);return 0;
}


static int _wrap_replaceStrInStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string result;
  
  SWIG_check_num_args("replaceStrInStr",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("replaceStrInStr",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("replaceStrInStr",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("replaceStrInStr",3,"std::string const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("replaceStrInStr",4,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (lua_toboolean(L, 4)!=0);
  result = replaceStrInStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replaceStrInStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string result;
  
  SWIG_check_num_args("replaceStrInStr",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("replaceStrInStr",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("replaceStrInStr",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("replaceStrInStr",3,"std::string const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = replaceStrInStr(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_replaceStrInStr(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_replaceStrInStr__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_replaceStrInStr__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'replaceStrInStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    replaceStrInStr(std::string,std::string const &,std::string const &,bool)\n"
    "    replaceStrInStr(std::string,std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_removeLeadingWhiteSpace(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("removeLeadingWhiteSpace",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("removeLeadingWhiteSpace",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = removeLeadingWhiteSpace((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getCharArrayFromConstArray(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("getCharArrayFromConstArray",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("getCharArrayFromConstArray",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (char *)getCharArrayFromConstArray((std::string const &)*arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundDecimal(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("roundDecimal",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("roundDecimal",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("roundDecimal",2,"int");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)roundDecimal(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iroundDecimal(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("iroundDecimal",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("iroundDecimal",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("iroundDecimal",2,"int");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)iroundDecimal(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_changeProgramWorkingDirectory(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("changeProgramWorkingDirectory",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("changeProgramWorkingDirectory",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)changeProgramWorkingDirectory((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_capitalizeChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char result;
  
  SWIG_check_num_args("capitalizeChar",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("capitalizeChar",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (char)capitalizeChar(arg1);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowerCaseChar(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char result;
  
  SWIG_check_num_args("lowerCaseChar",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("lowerCaseChar",1,"char const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (char)lowerCaseChar(arg1);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("scientificFormat",1,"std::string const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scientificFormat",2,"size_t");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = scientificFormat((std::string const &)*arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("scientificFormat",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = scientificFormat((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scientificFormat",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scientificFormat",2,"size_t");
  arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = scientificFormat(arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  std::string result;
  
  SWIG_check_num_args("scientificFormat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scientificFormat",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = scientificFormat(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scientificFormat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_scientificFormat__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_scientificFormat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scientificFormat__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_scientificFormat__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'scientificFormat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    scientificFormat(std::string const &,size_t)\n"
    "    scientificFormat(std::string const &)\n"
    "    scientificFormat(float,size_t)\n"
    "    scientificFormat(float)\n");
  lua_error(L);return 0;
}


static int _wrap_isNum(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  bool result;
  
  SWIG_check_num_args("isNum",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("isNum",1,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("isNum",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)isNum(*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_module_set(lua_State* L) {
  int SWIG_arg = 0;
  ModuleNode *arg1 = (ModuleNode *) 0 ;
  ModAdapter *arg2 = (ModAdapter *) 0 ;
  
  SWIG_check_num_args("ModuleNode::module",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::module",1,"ModuleNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ModuleNode::module",2,"ModAdapter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleNode,0))){
    SWIG_fail_ptr("Module_module_set",1,SWIGTYPE_p_ModuleNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ModAdapter,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Module_module_set",2,SWIGTYPE_p_ModAdapter);
  }
  
  if (arg1) (arg1)->module = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_module_get(lua_State* L) {
  int SWIG_arg = 0;
  ModuleNode *arg1 = (ModuleNode *) 0 ;
  ModAdapter *result = 0 ;
  
  SWIG_check_num_args("ModuleNode::module",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::module",1,"ModuleNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleNode,0))){
    SWIG_fail_ptr("Module_module_get",1,SWIGTYPE_p_ModuleNode);
  }
  
  result = (ModAdapter *) ((arg1)->module);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ModAdapter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_thread_id_set(lua_State* L) {
  int SWIG_arg = 0;
  ModuleNode *arg1 = (ModuleNode *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ModuleNode::thread_id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::thread_id",1,"ModuleNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ModuleNode::thread_id",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleNode,0))){
    SWIG_fail_ptr("Module_thread_id_set",1,SWIGTYPE_p_ModuleNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->thread_id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_thread_id_get(lua_State* L) {
  int SWIG_arg = 0;
  ModuleNode *arg1 = (ModuleNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ModuleNode::thread_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::thread_id",1,"ModuleNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleNode,0))){
    SWIG_fail_ptr("Module_thread_id_get",1,SWIGTYPE_p_ModuleNode);
  }
  
  result =  ((arg1)->thread_id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_mod_id_set(lua_State* L) {
  int SWIG_arg = 0;
  ModuleNode *arg1 = (ModuleNode *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ModuleNode::mod_id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::mod_id",1,"ModuleNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ModuleNode::mod_id",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleNode,0))){
    SWIG_fail_ptr("Module_mod_id_set",1,SWIGTYPE_p_ModuleNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->mod_id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_mod_id_get(lua_State* L) {
  int SWIG_arg = 0;
  ModuleNode *arg1 = (ModuleNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ModuleNode::mod_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::mod_id",1,"ModuleNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleNode,0))){
    SWIG_fail_ptr("Module_mod_id_get",1,SWIGTYPE_p_ModuleNode);
  }
  
  result =  ((arg1)->mod_id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_threaded_set(lua_State* L) {
  int SWIG_arg = 0;
  ModuleNode *arg1 = (ModuleNode *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ModuleNode::threaded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::threaded",1,"ModuleNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ModuleNode::threaded",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleNode,0))){
    SWIG_fail_ptr("Module_threaded_set",1,SWIGTYPE_p_ModuleNode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->threaded = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Module_threaded_get(lua_State* L) {
  int SWIG_arg = 0;
  ModuleNode *arg1 = (ModuleNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("ModuleNode::threaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::threaded",1,"ModuleNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleNode,0))){
    SWIG_fail_ptr("Module_threaded_get",1,SWIGTYPE_p_ModuleNode);
  }
  
  result = (bool) ((arg1)->threaded);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Module__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  bool arg3 ;
  size_t arg4 ;
  ModuleNode *result = 0 ;
  
  SWIG_check_num_args("ModuleNode::ModuleNode",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::ModuleNode",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ModuleNode::ModuleNode",2,"cstr");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ModuleNode::ModuleNode",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ModuleNode::ModuleNode",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Module",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  result = (ModuleNode *)new ModuleNode(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ModuleNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Module__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  bool arg3 ;
  ModuleNode *result = 0 ;
  
  SWIG_check_num_args("ModuleNode::ModuleNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::ModuleNode",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ModuleNode::ModuleNode",2,"cstr");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ModuleNode::ModuleNode",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Module",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (ModuleNode *)new ModuleNode(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ModuleNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Module__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  ModuleNode *result = 0 ;
  
  SWIG_check_num_args("ModuleNode::ModuleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleNode::ModuleNode",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ModuleNode::ModuleNode",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Module",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (ModuleNode *)new ModuleNode(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ModuleNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Module(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Module__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Module__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Module__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Module'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ModuleNode::ModuleNode(Game *,cstr,bool,size_t)\n"
    "    ModuleNode::ModuleNode(Game *,cstr,bool)\n"
    "    ModuleNode::ModuleNode(Game *,cstr)\n");
  lua_error(L);return 0;
}


static void swig_delete_Module(void *obj) {
ModuleNode *arg1 = (ModuleNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_Module(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Module);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Module_attributes[] = {
    { "module", _wrap_Module_module_get, _wrap_Module_module_set },
    { "thread_id", _wrap_Module_thread_id_get, _wrap_Module_thread_id_set },
    { "mod_id", _wrap_Module_mod_id_get, _wrap_Module_mod_id_set },
    { "threaded", _wrap_Module_threaded_get, _wrap_Module_threaded_set },
    {0,0,0}
};
static swig_lua_method swig_Module_methods[]= {
    {0,0}
};
static swig_lua_method swig_Module_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Module_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Module_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Module_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Module_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Module_Sf_SwigStatic = {
    "Module",
    swig_Module_Sf_SwigStatic_methods,
    swig_Module_Sf_SwigStatic_attributes,
    swig_Module_Sf_SwigStatic_constants,
    swig_Module_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Module_bases[] = {0};
static const char *swig_Module_base_names[] = {0};
static swig_lua_class _wrap_class_Module = { "Module", "Module", &SWIGTYPE_p_ModuleNode,_proxy__wrap_new_Module, swig_delete_Module, swig_Module_methods, swig_Module_attributes, &swig_Module_Sf_SwigStatic, swig_Module_meta, swig_Module_bases, swig_Module_base_names };

static int _wrap_new_ModuleSystem(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  ModuleSystem *result = 0 ;
  
  SWIG_check_num_args("ModuleSystem::ModuleSystem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::ModuleSystem",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_ModuleSystem",1,SWIGTYPE_p_Game);
  }
  
  result = (ModuleSystem *)new ModuleSystem(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ModuleSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_initModSys(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  
  SWIG_check_num_args("ModuleSystem::initModSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::initModSys",1,"ModuleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_initModSys",1,SWIGTYPE_p_ModuleSystem);
  }
  
  (arg1)->initModSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_RegisterModule__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  cstr arg2 = (cstr) 0 ;
  bool arg3 ;
  size_t result;
  
  SWIG_check_num_args("ModuleSystem::RegisterModule",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::RegisterModule",1,"ModuleSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ModuleSystem::RegisterModule",2,"cstr");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ModuleSystem::RegisterModule",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_RegisterModule",1,SWIGTYPE_p_ModuleSystem);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (arg1)->RegisterModule(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_RegisterModule__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("ModuleSystem::RegisterModule",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::RegisterModule",1,"ModuleSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ModuleSystem::RegisterModule",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_RegisterModule",1,SWIGTYPE_p_ModuleSystem);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->RegisterModule(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_RegisterModule(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ModuleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ModuleSystem_RegisterModule__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ModuleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ModuleSystem_RegisterModule__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ModuleSystem_RegisterModule'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ModuleSystem::RegisterModule(cstr,bool)\n"
    "    ModuleSystem::RegisterModule(cstr)\n");
  lua_error(L);return 0;
}


static int _wrap_ModuleSystem_RegisterFunction(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ModuleSystem::RegisterFunction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::RegisterFunction",1,"ModuleSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ModuleSystem::RegisterFunction",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ModuleSystem::RegisterFunction",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_RegisterFunction",1,SWIGTYPE_p_ModuleSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RegisterFunction((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_RegisterFunctionFromFile(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ModuleSystem::RegisterFunctionFromFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::RegisterFunctionFromFile",1,"ModuleSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ModuleSystem::RegisterFunctionFromFile",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ModuleSystem::RegisterFunctionFromFile",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_RegisterFunctionFromFile",1,SWIGTYPE_p_ModuleSystem);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RegisterFunctionFromFile((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_UnregisterModule(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ModuleSystem::UnregisterModule",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::UnregisterModule",1,"ModuleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ModuleSystem::UnregisterModule",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_UnregisterModule",1,SWIGTYPE_p_ModuleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->UnregisterModule(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_UnregisterFunction(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ModuleSystem::UnregisterFunction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::UnregisterFunction",1,"ModuleSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ModuleSystem::UnregisterFunction",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ModuleSystem::UnregisterFunction",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_UnregisterFunction",1,SWIGTYPE_p_ModuleSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->UnregisterFunction((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_isFuncRegistered(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("ModuleSystem::isFuncRegistered",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::isFuncRegistered",1,"ModuleSystem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ModuleSystem::isFuncRegistered",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ModuleSystem::isFuncRegistered",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_isFuncRegistered",1,SWIGTYPE_p_ModuleSystem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (bool)(arg1)->isFuncRegistered((std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_GetModuleThreadID(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  size_t arg2 ;
  size_t result;
  
  SWIG_check_num_args("ModuleSystem::GetModuleThreadID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::GetModuleThreadID",1,"ModuleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ModuleSystem::GetModuleThreadID",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_GetModuleThreadID",1,SWIGTYPE_p_ModuleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->GetModuleThreadID(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_isModuleIndependent(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("ModuleSystem::isModuleIndependent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::isModuleIndependent",1,"ModuleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ModuleSystem::isModuleIndependent",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_isModuleIndependent",1,SWIGTYPE_p_ModuleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->isModuleIndependent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_MarkModuleAsIndependent(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ModuleSystem::MarkModuleAsIndependent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::MarkModuleAsIndependent",1,"ModuleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ModuleSystem::MarkModuleAsIndependent",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_MarkModuleAsIndependent",1,SWIGTYPE_p_ModuleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->MarkModuleAsIndependent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_RunFunctionsInModule(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("ModuleSystem::RunFunctionsInModule",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::RunFunctionsInModule",1,"ModuleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ModuleSystem::RunFunctionsInModule",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_RunFunctionsInModule",1,SWIGTYPE_p_ModuleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->RunFunctionsInModule(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ModuleSystem_RunAllFunctions(lua_State* L) {
  int SWIG_arg = 0;
  ModuleSystem *arg1 = (ModuleSystem *) 0 ;
  
  SWIG_check_num_args("ModuleSystem::RunAllFunctions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ModuleSystem::RunAllFunctions",1,"ModuleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ModuleSystem,0))){
    SWIG_fail_ptr("ModuleSystem_RunAllFunctions",1,SWIGTYPE_p_ModuleSystem);
  }
  
  (arg1)->RunAllFunctions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ModuleSystem(void *obj) {
ModuleSystem *arg1 = (ModuleSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_ModuleSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ModuleSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ModuleSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ModuleSystem_methods[]= {
    { "initModSys", _wrap_ModuleSystem_initModSys},
    { "RegisterModule", _wrap_ModuleSystem_RegisterModule},
    { "RegisterFunction", _wrap_ModuleSystem_RegisterFunction},
    { "RegisterFunctionFromFile", _wrap_ModuleSystem_RegisterFunctionFromFile},
    { "UnregisterModule", _wrap_ModuleSystem_UnregisterModule},
    { "UnregisterFunction", _wrap_ModuleSystem_UnregisterFunction},
    { "isFuncRegistered", _wrap_ModuleSystem_isFuncRegistered},
    { "GetModuleThreadID", _wrap_ModuleSystem_GetModuleThreadID},
    { "isModuleIndependent", _wrap_ModuleSystem_isModuleIndependent},
    { "MarkModuleAsIndependent", _wrap_ModuleSystem_MarkModuleAsIndependent},
    { "RunFunctionsInModule", _wrap_ModuleSystem_RunFunctionsInModule},
    { "RunAllFunctions", _wrap_ModuleSystem_RunAllFunctions},
    {0,0}
};
static swig_lua_method swig_ModuleSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ModuleSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ModuleSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ModuleSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ModuleSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ModuleSystem_Sf_SwigStatic = {
    "ModuleSystem",
    swig_ModuleSystem_Sf_SwigStatic_methods,
    swig_ModuleSystem_Sf_SwigStatic_attributes,
    swig_ModuleSystem_Sf_SwigStatic_constants,
    swig_ModuleSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ModuleSystem_bases[] = {0};
static const char *swig_ModuleSystem_base_names[] = {0};
static swig_lua_class _wrap_class_ModuleSystem = { "ModuleSystem", "ModuleSystem", &SWIGTYPE_p_ModuleSystem,_proxy__wrap_new_ModuleSystem, swig_delete_ModuleSystem, swig_ModuleSystem_methods, swig_ModuleSystem_attributes, &swig_ModuleSystem_Sf_SwigStatic, swig_ModuleSystem_meta, swig_ModuleSystem_bases, swig_ModuleSystem_base_names };

static int _wrap_UnitNode_pData_set(lua_State* L) {
  int SWIG_arg = 0;
  UnitNode *arg1 = (UnitNode *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("UnitNode::pData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitNode::pData",1,"UnitNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("UnitNode::pData",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitNode,0))){
    SWIG_fail_ptr("UnitNode_pData_set",1,SWIGTYPE_p_UnitNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("UnitNode_pData_set",2,SWIGTYPE_p_Unit);
  }
  
  if (arg1) (arg1)->pData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitNode_pData_get(lua_State* L) {
  int SWIG_arg = 0;
  UnitNode *arg1 = (UnitNode *) 0 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("UnitNode::pData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitNode::pData",1,"UnitNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitNode,0))){
    SWIG_fail_ptr("UnitNode_pData_get",1,SWIGTYPE_p_UnitNode);
  }
  
  result = (Unit *) ((arg1)->pData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitNode_Type_set(lua_State* L) {
  int SWIG_arg = 0;
  UnitNode *arg1 = (UnitNode *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("UnitNode::Type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitNode::Type",1,"UnitNode *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UnitNode::Type",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitNode,0))){
    SWIG_fail_ptr("UnitNode_Type_set",1,SWIGTYPE_p_UnitNode);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->Type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitNode_Type_get(lua_State* L) {
  int SWIG_arg = 0;
  UnitNode *arg1 = (UnitNode *) 0 ;
  char result;
  
  SWIG_check_num_args("UnitNode::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitNode::Type",1,"UnitNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitNode,0))){
    SWIG_fail_ptr("UnitNode_Type_get",1,SWIGTYPE_p_UnitNode);
  }
  
  result = (char) ((arg1)->Type);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitNode_id_set(lua_State* L) {
  int SWIG_arg = 0;
  UnitNode *arg1 = (UnitNode *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("UnitNode::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitNode::id",1,"UnitNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UnitNode::id",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitNode,0))){
    SWIG_fail_ptr("UnitNode_id_set",1,SWIGTYPE_p_UnitNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitNode_id_get(lua_State* L) {
  int SWIG_arg = 0;
  UnitNode *arg1 = (UnitNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("UnitNode::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitNode::id",1,"UnitNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitNode,0))){
    SWIG_fail_ptr("UnitNode_id_get",1,SWIGTYPE_p_UnitNode);
  }
  
  result =  ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UnitNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  char arg2 ;
  int arg3 ;
  math_point arg4 ;
  cstr arg5 = (cstr) 0 ;
  bool arg6 ;
  bool arg7 ;
  math_point *argp4 ;
  UnitNode *result = 0 ;
  
  SWIG_check_num_args("UnitNode::UnitNode",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitNode::UnitNode",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UnitNode::UnitNode",2,"char");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UnitNode::UnitNode",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("UnitNode::UnitNode",4,"math_point");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("UnitNode::UnitNode",5,"cstr");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("UnitNode::UnitNode",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("UnitNode::UnitNode",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_UnitNode",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_UnitNode",4,SWIGTYPE_p_math_point);
  }
  arg4 = *argp4;
  
  arg5 = (cstr)lua_tostring(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (UnitNode *)new UnitNode(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UnitNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UnitNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UnitNode *result = 0 ;
  
  SWIG_check_num_args("UnitNode::UnitNode",0,0)
  result = (UnitNode *)new UnitNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UnitNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UnitNode(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UnitNode__SWIG_1(L);
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_new_UnitNode__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UnitNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    UnitNode::UnitNode(Game *,char,int,math_point,cstr,bool,bool)\n"
    "    UnitNode::UnitNode()\n");
  lua_error(L);return 0;
}


static void swig_delete_UnitNode(void *obj) {
UnitNode *arg1 = (UnitNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_UnitNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UnitNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UnitNode_attributes[] = {
    { "pData", _wrap_UnitNode_pData_get, _wrap_UnitNode_pData_set },
    { "Type", _wrap_UnitNode_Type_get, _wrap_UnitNode_Type_set },
    { "id", _wrap_UnitNode_id_get, _wrap_UnitNode_id_set },
    {0,0,0}
};
static swig_lua_method swig_UnitNode_methods[]= {
    {0,0}
};
static swig_lua_method swig_UnitNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UnitNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UnitNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UnitNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UnitNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UnitNode_Sf_SwigStatic = {
    "UnitNode",
    swig_UnitNode_Sf_SwigStatic_methods,
    swig_UnitNode_Sf_SwigStatic_attributes,
    swig_UnitNode_Sf_SwigStatic_constants,
    swig_UnitNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UnitNode_bases[] = {0};
static const char *swig_UnitNode_base_names[] = {0};
static swig_lua_class _wrap_class_UnitNode = { "UnitNode", "UnitNode", &SWIGTYPE_p_UnitNode,_proxy__wrap_new_UnitNode, swig_delete_UnitNode, swig_UnitNode_methods, swig_UnitNode_attributes, &swig_UnitNode_Sf_SwigStatic, swig_UnitNode_meta, swig_UnitNode_bases, swig_UnitNode_base_names };

static int _wrap_new_UnitManager(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  UnitManager *result = 0 ;
  
  SWIG_check_num_args("UnitManager::UnitManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::UnitManager",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_UnitManager",1,SWIGTYPE_p_Game);
  }
  
  result = (UnitManager *)new UnitManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UnitManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_initUnitSys(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::initUnitSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::initUnitSys",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_initUnitSys",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->initUnitSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_SpawnUnit(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  char arg2 ;
  int arg3 ;
  math_point arg4 ;
  std::string arg5 ;
  bool arg6 ;
  bool arg7 ;
  math_point *argp4 ;
  size_t result;
  
  SWIG_check_num_args("UnitManager::SpawnUnit",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::SpawnUnit",1,"UnitManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UnitManager::SpawnUnit",2,"char const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UnitManager::SpawnUnit",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("UnitManager::SpawnUnit",4,"math_point");
  if(!lua_isstring(L,5)) SWIG_fail_arg("UnitManager::SpawnUnit",5,"std::string");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("UnitManager::SpawnUnit",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("UnitManager::SpawnUnit",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_SpawnUnit",1,SWIGTYPE_p_UnitManager);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("UnitManager_SpawnUnit",4,SWIGTYPE_p_math_point);
  }
  arg4 = *argp4;
  
  (&arg5)->assign(lua_tostring(L,5),lua_rawlen(L,5));
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (arg1)->SpawnUnit(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_SpawnUnitFromFile(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  cstr arg2 = (cstr) 0 ;
  int arg3 ;
  size_t result;
  
  SWIG_check_num_args("UnitManager::SpawnUnitFromFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::SpawnUnitFromFile",1,"UnitManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UnitManager::SpawnUnitFromFile",2,"cstr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UnitManager::SpawnUnitFromFile",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_SpawnUnitFromFile",1,SWIGTYPE_p_UnitManager);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->SpawnUnitFromFile(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_SpawnUnitFromList(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  cstr arg2 = (cstr) 0 ;
  int arg3 ;
  SwigValueWrapper< std::vector< size_t > > result;
  
  SWIG_check_num_args("UnitManager::SpawnUnitFromList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::SpawnUnitFromList",1,"UnitManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UnitManager::SpawnUnitFromList",2,"cstr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UnitManager::SpawnUnitFromList",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_SpawnUnitFromList",1,SWIGTYPE_p_UnitManager);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->SpawnUnitFromList(arg2,arg3);
  {
    std::vector< size_t > * resultptr = new std::vector< size_t >((const std::vector< size_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_size_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_CloneUnit(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  SwigValueWrapper< std::vector< size_t > > result;
  
  SWIG_check_num_args("UnitManager::CloneUnit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::CloneUnit",1,"UnitManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UnitManager::CloneUnit",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("UnitManager::CloneUnit",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_CloneUnit",1,SWIGTYPE_p_UnitManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->CloneUnit(arg2,arg3);
  {
    std::vector< size_t > * resultptr = new std::vector< size_t >((const std::vector< size_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_size_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_GetUnit(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  size_t arg2 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("UnitManager::GetUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::GetUnit",1,"UnitManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UnitManager::GetUnit",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_GetUnit",1,SWIGTYPE_p_UnitManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Unit *) &(arg1)->GetUnit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_GetUnitByName(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("UnitManager::GetUnitByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::GetUnitByName",1,"UnitManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("UnitManager::GetUnitByName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_GetUnitByName",1,SWIGTYPE_p_UnitManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Unit *) &(arg1)->GetUnitByName((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_FindNearbyUnit(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  Unit *result = 0 ;
  
  SWIG_check_num_args("UnitManager::FindNearbyUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::FindNearbyUnit",1,"UnitManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("UnitManager::FindNearbyUnit",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_FindNearbyUnit",1,SWIGTYPE_p_UnitManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("UnitManager_FindNearbyUnit",2,SWIGTYPE_p_Unit);
  }
  
  result = (Unit *)(arg1)->FindNearbyUnit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Unit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_hasUnit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("UnitManager::hasUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::hasUnit",1,"UnitManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("UnitManager::hasUnit",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_hasUnit",1,SWIGTYPE_p_UnitManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->hasUnit((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_hasUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("UnitManager::hasUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::hasUnit",1,"UnitManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UnitManager::hasUnit",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_hasUnit",1,SWIGTYPE_p_UnitManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasUnit(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_hasUnit(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_UnitManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_UnitManager_hasUnit__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_UnitManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_UnitManager_hasUnit__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'UnitManager_hasUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    UnitManager::hasUnit(std::string const &)\n"
    "    UnitManager::hasUnit(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_UnitManager_DeleteUnit(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  Unit *arg2 = 0 ;
  
  SWIG_check_num_args("UnitManager::DeleteUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::DeleteUnit",1,"UnitManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("UnitManager::DeleteUnit",2,"Unit &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_DeleteUnit",1,SWIGTYPE_p_UnitManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("UnitManager_DeleteUnit",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->DeleteUnit(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_DeleteUnitByID(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("UnitManager::DeleteUnitByID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::DeleteUnitByID",1,"UnitManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UnitManager::DeleteUnitByID",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_DeleteUnitByID",1,SWIGTYPE_p_UnitManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->DeleteUnitByID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_DeleteUnitByName(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("UnitManager::DeleteUnitByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::DeleteUnitByName",1,"UnitManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("UnitManager::DeleteUnitByName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_DeleteUnitByName",1,SWIGTYPE_p_UnitManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->DeleteUnitByName((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_DeleteAllProjectiles(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::DeleteAllProjectiles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::DeleteAllProjectiles",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_DeleteAllProjectiles",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->DeleteAllProjectiles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_DeleteAllGameObjects(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::DeleteAllGameObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::DeleteAllGameObjects",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_DeleteAllGameObjects",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->DeleteAllGameObjects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_DeleteAllUnits(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::DeleteAllUnits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::DeleteAllUnits",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_DeleteAllUnits",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->DeleteAllUnits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_DeleteAll(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::DeleteAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::DeleteAll",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_DeleteAll",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->DeleteAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_RunPhysics(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::RunPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::RunPhysics",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_RunPhysics",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->RunPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_DrawUnits(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::DrawUnits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::DrawUnits",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_DrawUnits",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->DrawUnits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_PlayUnitSounds(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::PlayUnitSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::PlayUnitSounds",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_PlayUnitSounds",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->PlayUnitSounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_ProcessUnitEvents(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::ProcessUnitEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::ProcessUnitEvents",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_ProcessUnitEvents",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->ProcessUnitEvents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_GC(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::GC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::GC",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_GC",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->GC();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UnitManager_UnlockUnit(lua_State* L) {
  int SWIG_arg = 0;
  UnitManager *arg1 = (UnitManager *) 0 ;
  
  SWIG_check_num_args("UnitManager::UnlockUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UnitManager::UnlockUnit",1,"UnitManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UnitManager,0))){
    SWIG_fail_ptr("UnitManager_UnlockUnit",1,SWIGTYPE_p_UnitManager);
  }
  
  (arg1)->UnlockUnit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UnitManager(void *obj) {
UnitManager *arg1 = (UnitManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_UnitManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UnitManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UnitManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UnitManager_methods[]= {
    { "initUnitSys", _wrap_UnitManager_initUnitSys},
    { "SpawnUnit", _wrap_UnitManager_SpawnUnit},
    { "SpawnUnitFromFile", _wrap_UnitManager_SpawnUnitFromFile},
    { "SpawnUnitFromList", _wrap_UnitManager_SpawnUnitFromList},
    { "CloneUnit", _wrap_UnitManager_CloneUnit},
    { "GetUnit", _wrap_UnitManager_GetUnit},
    { "GetUnitByName", _wrap_UnitManager_GetUnitByName},
    { "FindNearbyUnit", _wrap_UnitManager_FindNearbyUnit},
    { "hasUnit", _wrap_UnitManager_hasUnit},
    { "DeleteUnit", _wrap_UnitManager_DeleteUnit},
    { "DeleteUnitByID", _wrap_UnitManager_DeleteUnitByID},
    { "DeleteUnitByName", _wrap_UnitManager_DeleteUnitByName},
    { "DeleteAllProjectiles", _wrap_UnitManager_DeleteAllProjectiles},
    { "DeleteAllGameObjects", _wrap_UnitManager_DeleteAllGameObjects},
    { "DeleteAllUnits", _wrap_UnitManager_DeleteAllUnits},
    { "DeleteAll", _wrap_UnitManager_DeleteAll},
    { "RunPhysics", _wrap_UnitManager_RunPhysics},
    { "DrawUnits", _wrap_UnitManager_DrawUnits},
    { "PlayUnitSounds", _wrap_UnitManager_PlayUnitSounds},
    { "ProcessUnitEvents", _wrap_UnitManager_ProcessUnitEvents},
    { "GC", _wrap_UnitManager_GC},
    { "UnlockUnit", _wrap_UnitManager_UnlockUnit},
    {0,0}
};
static swig_lua_method swig_UnitManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UnitManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UnitManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UnitManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UnitManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UnitManager_Sf_SwigStatic = {
    "UnitManager",
    swig_UnitManager_Sf_SwigStatic_methods,
    swig_UnitManager_Sf_SwigStatic_attributes,
    swig_UnitManager_Sf_SwigStatic_constants,
    swig_UnitManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UnitManager_bases[] = {0};
static const char *swig_UnitManager_base_names[] = {0};
static swig_lua_class _wrap_class_UnitManager = { "UnitManager", "UnitManager", &SWIGTYPE_p_UnitManager,_proxy__wrap_new_UnitManager, swig_delete_UnitManager, swig_UnitManager_methods, swig_UnitManager_attributes, &swig_UnitManager_Sf_SwigStatic, swig_UnitManager_meta, swig_UnitManager_bases, swig_UnitManager_base_names };

static int _wrap_traversalRender(lua_State* L) {
  int SWIG_arg = 0;
  size_t *arg1 = 0 ;
  ParticleNode **arg2 = 0 ;
  size_t temp1 ;
  
  SWIG_check_num_args("traversalRender",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("traversalRender",1,"size_t const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("traversalRender",2,"ParticleNode *&");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  temp1=(size_t)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_ParticleNode,0))){
    SWIG_fail_ptr("traversalRender",2,SWIGTYPE_p_p_ParticleNode);
  }
  
  traversalRender((size_t const &)*arg1,*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Particle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  math_point *arg3 = 0 ;
  draw_base *arg4 = (draw_base *) 0 ;
  Particle *result = 0 ;
  
  SWIG_check_num_args("Particle::Particle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Particle::Particle",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Particle::Particle",2,"cstr");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Particle::Particle",3,"math_point const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Particle::Particle",4,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Particle",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Particle",3,SWIGTYPE_p_math_point);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("new_Particle",4,SWIGTYPE_p_draw_base);
  }
  
  result = (Particle *)new Particle(arg1,arg2,(math_point const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Particle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Particle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  math_point *arg3 = 0 ;
  Particle *result = 0 ;
  
  SWIG_check_num_args("Particle::Particle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Particle::Particle",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Particle::Particle",2,"cstr");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Particle::Particle",3,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Particle",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_Particle",3,SWIGTYPE_p_math_point);
  }
  
  result = (Particle *)new Particle(arg1,arg2,(math_point const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Particle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Particle(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Particle__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_draw_base, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_Particle__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Particle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Particle::Particle(Game *,cstr,math_point const &,draw_base *)\n"
    "    Particle::Particle(Game *,cstr,math_point const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Particle_RenderParticle(lua_State* L) {
  int SWIG_arg = 0;
  Particle *arg1 = (Particle *) 0 ;
  
  SWIG_check_num_args("Particle::RenderParticle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Particle::RenderParticle",1,"Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Particle,0))){
    SWIG_fail_ptr("Particle_RenderParticle",1,SWIGTYPE_p_Particle);
  }
  
  (arg1)->RenderParticle();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_OverrideParticlePos(lua_State* L) {
  int SWIG_arg = 0;
  Particle *arg1 = (Particle *) 0 ;
  math_point *arg2 = 0 ;
  
  SWIG_check_num_args("Particle::OverrideParticlePos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Particle::OverrideParticlePos",1,"Particle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Particle::OverrideParticlePos",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Particle,0))){
    SWIG_fail_ptr("Particle_OverrideParticlePos",1,SWIGTYPE_p_Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Particle_OverrideParticlePos",2,SWIGTYPE_p_math_point);
  }
  
  (arg1)->OverrideParticlePos((math_point const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_GetParticle(lua_State* L) {
  int SWIG_arg = 0;
  Particle *arg1 = (Particle *) 0 ;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("Particle::GetParticle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Particle::GetParticle",1,"Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Particle,0))){
    SWIG_fail_ptr("Particle_GetParticle",1,SWIGTYPE_p_Particle);
  }
  
  result = (draw_base *)(arg1)->GetParticle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_isDead(lua_State* L) {
  int SWIG_arg = 0;
  Particle *arg1 = (Particle *) 0 ;
  bool result;
  
  SWIG_check_num_args("Particle::isDead",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Particle::isDead",1,"Particle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Particle,0))){
    SWIG_fail_ptr("Particle_isDead",1,SWIGTYPE_p_Particle);
  }
  
  result = (bool)(arg1)->isDead();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Particle_SetParticle(lua_State* L) {
  int SWIG_arg = 0;
  Particle *arg1 = (Particle *) 0 ;
  draw_base *arg2 = (draw_base *) 0 ;
  
  SWIG_check_num_args("Particle::SetParticle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Particle::SetParticle",1,"Particle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Particle::SetParticle",2,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Particle,0))){
    SWIG_fail_ptr("Particle_SetParticle",1,SWIGTYPE_p_Particle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,0))){
    SWIG_fail_ptr("Particle_SetParticle",2,SWIGTYPE_p_draw_base);
  }
  
  (arg1)->SetParticle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Particle(void *obj) {
Particle *arg1 = (Particle *) obj;
delete arg1;
}
static int _proxy__wrap_new_Particle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Particle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Particle_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Particle_methods[]= {
    { "RenderParticle", _wrap_Particle_RenderParticle},
    { "OverrideParticlePos", _wrap_Particle_OverrideParticlePos},
    { "GetParticle", _wrap_Particle_GetParticle},
    { "isDead", _wrap_Particle_isDead},
    { "SetParticle", _wrap_Particle_SetParticle},
    {0,0}
};
static swig_lua_method swig_Particle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Particle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Particle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Particle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Particle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Particle_Sf_SwigStatic = {
    "Particle",
    swig_Particle_Sf_SwigStatic_methods,
    swig_Particle_Sf_SwigStatic_attributes,
    swig_Particle_Sf_SwigStatic_constants,
    swig_Particle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Particle_bases[] = {0,0};
static const char *swig_Particle_base_names[] = {"Physics *",0};
static swig_lua_class _wrap_class_Particle = { "Particle", "Particle", &SWIGTYPE_p_Particle,_proxy__wrap_new_Particle, swig_delete_Particle, swig_Particle_methods, swig_Particle_attributes, &swig_Particle_Sf_SwigStatic, swig_Particle_meta, swig_Particle_bases, swig_Particle_base_names };

static int _wrap_new_ParticleNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  math_point *arg3 = 0 ;
  char arg4 ;
  double arg5 ;
  ParticleNode *result = 0 ;
  
  SWIG_check_num_args("ParticleNode::ParticleNode",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleNode::ParticleNode",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ParticleNode::ParticleNode",2,"cstr");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleNode::ParticleNode",3,"math_point const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ParticleNode::ParticleNode",4,"char");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ParticleNode::ParticleNode",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_ParticleNode",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ParticleNode",3,SWIGTYPE_p_math_point);
  }
  
  arg4 = (lua_tostring(L, 4))[0];
  arg5 = (double)lua_tonumber(L, 5);
  result = (ParticleNode *)new ParticleNode(arg1,arg2,(math_point const &)*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  math_point *arg3 = 0 ;
  char arg4 ;
  ParticleNode *result = 0 ;
  
  SWIG_check_num_args("ParticleNode::ParticleNode",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleNode::ParticleNode",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ParticleNode::ParticleNode",2,"cstr");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleNode::ParticleNode",3,"math_point const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ParticleNode::ParticleNode",4,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_ParticleNode",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ParticleNode",3,SWIGTYPE_p_math_point);
  }
  
  arg4 = (lua_tostring(L, 4))[0];
  result = (ParticleNode *)new ParticleNode(arg1,arg2,(math_point const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  math_point *arg3 = 0 ;
  math_point *arg4 = 0 ;
  char arg5 ;
  double arg6 ;
  ParticleNode *result = 0 ;
  
  SWIG_check_num_args("ParticleNode::ParticleNode",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleNode::ParticleNode",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ParticleNode::ParticleNode",2,"cstr");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleNode::ParticleNode",3,"math_point const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ParticleNode::ParticleNode",4,"math_point const &");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ParticleNode::ParticleNode",5,"char");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ParticleNode::ParticleNode",6,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_ParticleNode",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ParticleNode",3,SWIGTYPE_p_math_point);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ParticleNode",4,SWIGTYPE_p_math_point);
  }
  
  arg5 = (lua_tostring(L, 5))[0];
  arg6 = (double)lua_tonumber(L, 6);
  result = (ParticleNode *)new ParticleNode(arg1,arg2,(math_point const &)*arg3,(math_point const &)*arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleNode__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  math_point *arg3 = 0 ;
  math_point *arg4 = 0 ;
  char arg5 ;
  ParticleNode *result = 0 ;
  
  SWIG_check_num_args("ParticleNode::ParticleNode",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleNode::ParticleNode",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ParticleNode::ParticleNode",2,"cstr");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleNode::ParticleNode",3,"math_point const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ParticleNode::ParticleNode",4,"math_point const &");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ParticleNode::ParticleNode",5,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_ParticleNode",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ParticleNode",3,SWIGTYPE_p_math_point);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("new_ParticleNode",4,SWIGTYPE_p_math_point);
  }
  
  arg5 = (lua_tostring(L, 5))[0];
  result = (ParticleNode *)new ParticleNode(arg1,arg2,(math_point const &)*arg3,(math_point const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParticleNode(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            return _wrap_new_ParticleNode__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]) && (lua_rawlen(L,argv[4])==1);
            }
            if (_v) {
              return _wrap_new_ParticleNode__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ParticleNode__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]) && (lua_rawlen(L,argv[4])==1);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParticleNode__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParticleNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleNode::ParticleNode(Game *,cstr,math_point const &,char,double)\n"
    "    ParticleNode::ParticleNode(Game *,cstr,math_point const &,char)\n"
    "    ParticleNode::ParticleNode(Game *,cstr,math_point const &,math_point const &,char,double)\n"
    "    ParticleNode::ParticleNode(Game *,cstr,math_point const &,math_point const &,char)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleNode_RenderParticles(lua_State* L) {
  int SWIG_arg = 0;
  ParticleNode *arg1 = (ParticleNode *) 0 ;
  
  SWIG_check_num_args("ParticleNode::RenderParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleNode::RenderParticles",1,"ParticleNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleNode,0))){
    SWIG_fail_ptr("ParticleNode_RenderParticles",1,SWIGTYPE_p_ParticleNode);
  }
  
  (arg1)->RenderParticles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleNode_RenderParticlesByProximity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleNode *arg1 = (ParticleNode *) 0 ;
  math_point *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ParticleNode::RenderParticlesByProximity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleNode::RenderParticlesByProximity",1,"ParticleNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleNode::RenderParticlesByProximity",2,"math_point const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleNode::RenderParticlesByProximity",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleNode,0))){
    SWIG_fail_ptr("ParticleNode_RenderParticlesByProximity",1,SWIGTYPE_p_ParticleNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleNode_RenderParticlesByProximity",2,SWIGTYPE_p_math_point);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RenderParticlesByProximity((math_point const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleNode_RenderParticlesByProximity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ParticleNode *arg1 = (ParticleNode *) 0 ;
  math_point *arg2 = 0 ;
  
  SWIG_check_num_args("ParticleNode::RenderParticlesByProximity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleNode::RenderParticlesByProximity",1,"ParticleNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleNode::RenderParticlesByProximity",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleNode,0))){
    SWIG_fail_ptr("ParticleNode_RenderParticlesByProximity",1,SWIGTYPE_p_ParticleNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleNode_RenderParticlesByProximity",2,SWIGTYPE_p_math_point);
  }
  
  (arg1)->RenderParticlesByProximity((math_point const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleNode_RenderParticlesByProximity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleNode_RenderParticlesByProximity__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleNode_RenderParticlesByProximity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleNode_RenderParticlesByProximity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleNode::RenderParticlesByProximity(math_point const &,size_t)\n"
    "    ParticleNode::RenderParticlesByProximity(math_point const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleNode_SetInitialForce(lua_State* L) {
  int SWIG_arg = 0;
  ParticleNode *arg1 = (ParticleNode *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ParticleNode::SetInitialForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleNode::SetInitialForce",1,"ParticleNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleNode::SetInitialForce",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleNode,0))){
    SWIG_fail_ptr("ParticleNode_SetInitialForce",1,SWIGTYPE_p_ParticleNode);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->SetInitialForce(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleNode(void *obj) {
ParticleNode *arg1 = (ParticleNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleNode_methods[]= {
    { "RenderParticles", _wrap_ParticleNode_RenderParticles},
    { "RenderParticlesByProximity", _wrap_ParticleNode_RenderParticlesByProximity},
    { "SetInitialForce", _wrap_ParticleNode_SetInitialForce},
    {0,0}
};
static swig_lua_method swig_ParticleNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleNode_Sf_SwigStatic = {
    "ParticleNode",
    swig_ParticleNode_Sf_SwigStatic_methods,
    swig_ParticleNode_Sf_SwigStatic_attributes,
    swig_ParticleNode_Sf_SwigStatic_constants,
    swig_ParticleNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleNode_bases[] = {0};
static const char *swig_ParticleNode_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleNode = { "ParticleNode", "ParticleNode", &SWIGTYPE_p_ParticleNode,_proxy__wrap_new_ParticleNode, swig_delete_ParticleNode, swig_ParticleNode_methods, swig_ParticleNode_attributes, &swig_ParticleNode_Sf_SwigStatic, swig_ParticleNode_meta, swig_ParticleNode_bases, swig_ParticleNode_base_names };

static int _wrap_new_ParticleCluster(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  ParticleCluster *result = 0 ;
  
  SWIG_check_num_args("ParticleCluster::ParticleCluster",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::ParticleCluster",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_ParticleCluster",1,SWIGTYPE_p_Game);
  }
  
  result = (ParticleCluster *)new ParticleCluster(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleCluster,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_GetParticleCount(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ParticleCluster::GetParticleCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::GetParticleCount",1,"ParticleCluster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_GetParticleCount",1,SWIGTYPE_p_ParticleCluster);
  }
  
  result = (arg1)->GetParticleCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_SetInitialForce(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("ParticleCluster::SetInitialForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::SetInitialForce",1,"ParticleCluster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleCluster::SetInitialForce",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleCluster::SetInitialForce",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_SetInitialForce",1,SWIGTYPE_p_ParticleCluster);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->SetInitialForce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RenderParticleById(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ParticleCluster::RenderParticleById",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::RenderParticleById",1,"ParticleCluster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleCluster::RenderParticleById",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_RenderParticleById",1,SWIGTYPE_p_ParticleCluster);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->RenderParticleById(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RenderAllParticles(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  
  SWIG_check_num_args("ParticleCluster::RenderAllParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::RenderAllParticles",1,"ParticleCluster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_RenderAllParticles",1,SWIGTYPE_p_ParticleCluster);
  }
  
  (arg1)->RenderAllParticles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RenderParticlesByProximity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  math_point *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ParticleCluster::RenderParticlesByProximity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::RenderParticlesByProximity",1,"ParticleCluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleCluster::RenderParticlesByProximity",2,"math_point const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleCluster::RenderParticlesByProximity",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_RenderParticlesByProximity",1,SWIGTYPE_p_ParticleCluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleCluster_RenderParticlesByProximity",2,SWIGTYPE_p_math_point);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RenderParticlesByProximity((math_point const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RenderParticlesByProximity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  math_point *arg2 = 0 ;
  
  SWIG_check_num_args("ParticleCluster::RenderParticlesByProximity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::RenderParticlesByProximity",1,"ParticleCluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleCluster::RenderParticlesByProximity",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_RenderParticlesByProximity",1,SWIGTYPE_p_ParticleCluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleCluster_RenderParticlesByProximity",2,SWIGTYPE_p_math_point);
  }
  
  (arg1)->RenderParticlesByProximity((math_point const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RenderParticlesByProximity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleCluster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleCluster_RenderParticlesByProximity__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleCluster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleCluster_RenderParticlesByProximity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleCluster_RenderParticlesByProximity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleCluster::RenderParticlesByProximity(math_point const &,size_t)\n"
    "    ParticleCluster::RenderParticlesByProximity(math_point const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleCluster_RegisterParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  math_point *arg2 = 0 ;
  cstr arg3 = (cstr) 0 ;
  char arg4 ;
  double arg5 ;
  Unit *arg6 = (Unit *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ParticleCluster::RegisterParticle",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::RegisterParticle",1,"ParticleCluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleCluster::RegisterParticle",2,"math_point const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ParticleCluster::RegisterParticle",3,"cstr");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ParticleCluster::RegisterParticle",4,"char");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ParticleCluster::RegisterParticle",5,"double");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ParticleCluster::RegisterParticle",6,"Unit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",1,SWIGTYPE_p_ParticleCluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",2,SWIGTYPE_p_math_point);
  }
  
  arg3 = (cstr)lua_tostring(L, 3);
  arg4 = (lua_tostring(L, 4))[0];
  arg5 = (double)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",6,SWIGTYPE_p_Unit);
  }
  
  result = (arg1)->RegisterParticle((math_point const &)*arg2,arg3,arg4,arg5,(Unit const *)arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RegisterParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  math_point *arg2 = 0 ;
  cstr arg3 = (cstr) 0 ;
  char arg4 ;
  double arg5 ;
  size_t result;
  
  SWIG_check_num_args("ParticleCluster::RegisterParticle",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::RegisterParticle",1,"ParticleCluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleCluster::RegisterParticle",2,"math_point const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ParticleCluster::RegisterParticle",3,"cstr");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ParticleCluster::RegisterParticle",4,"char");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ParticleCluster::RegisterParticle",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",1,SWIGTYPE_p_ParticleCluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",2,SWIGTYPE_p_math_point);
  }
  
  arg3 = (cstr)lua_tostring(L, 3);
  arg4 = (lua_tostring(L, 4))[0];
  arg5 = (double)lua_tonumber(L, 5);
  result = (arg1)->RegisterParticle((math_point const &)*arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RegisterParticle__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  math_point *arg2 = 0 ;
  cstr arg3 = (cstr) 0 ;
  char arg4 ;
  size_t result;
  
  SWIG_check_num_args("ParticleCluster::RegisterParticle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::RegisterParticle",1,"ParticleCluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleCluster::RegisterParticle",2,"math_point const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ParticleCluster::RegisterParticle",3,"cstr");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ParticleCluster::RegisterParticle",4,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",1,SWIGTYPE_p_ParticleCluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",2,SWIGTYPE_p_math_point);
  }
  
  arg3 = (cstr)lua_tostring(L, 3);
  arg4 = (lua_tostring(L, 4))[0];
  result = (arg1)->RegisterParticle((math_point const &)*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RegisterParticle__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  math_point *arg2 = 0 ;
  cstr arg3 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("ParticleCluster::RegisterParticle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::RegisterParticle",1,"ParticleCluster *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleCluster::RegisterParticle",2,"math_point const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ParticleCluster::RegisterParticle",3,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",1,SWIGTYPE_p_ParticleCluster);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleCluster_RegisterParticle",2,SWIGTYPE_p_math_point);
  }
  
  arg3 = (cstr)lua_tostring(L, 3);
  result = (arg1)->RegisterParticle((math_point const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_RegisterParticle(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleCluster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleCluster_RegisterParticle__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleCluster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            return _wrap_ParticleCluster_RegisterParticle__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleCluster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ParticleCluster_RegisterParticle__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleCluster, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ParticleCluster_RegisterParticle__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleCluster_RegisterParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleCluster::RegisterParticle(math_point const &,cstr,char,double,Unit const *)\n"
    "    ParticleCluster::RegisterParticle(math_point const &,cstr,char,double)\n"
    "    ParticleCluster::RegisterParticle(math_point const &,cstr,char)\n"
    "    ParticleCluster::RegisterParticle(math_point const &,cstr)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleCluster_DeleteParticle(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ParticleCluster::DeleteParticle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::DeleteParticle",1,"ParticleCluster *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleCluster::DeleteParticle",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_DeleteParticle",1,SWIGTYPE_p_ParticleCluster);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->DeleteParticle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleCluster_DeleteAllParticles(lua_State* L) {
  int SWIG_arg = 0;
  ParticleCluster *arg1 = (ParticleCluster *) 0 ;
  
  SWIG_check_num_args("ParticleCluster::DeleteAllParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleCluster::DeleteAllParticles",1,"ParticleCluster *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleCluster,0))){
    SWIG_fail_ptr("ParticleCluster_DeleteAllParticles",1,SWIGTYPE_p_ParticleCluster);
  }
  
  (arg1)->DeleteAllParticles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleCluster(void *obj) {
ParticleCluster *arg1 = (ParticleCluster *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleCluster(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleCluster);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleCluster_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleCluster_methods[]= {
    { "GetParticleCount", _wrap_ParticleCluster_GetParticleCount},
    { "SetInitialForce", _wrap_ParticleCluster_SetInitialForce},
    { "RenderParticleById", _wrap_ParticleCluster_RenderParticleById},
    { "RenderAllParticles", _wrap_ParticleCluster_RenderAllParticles},
    { "RenderParticlesByProximity", _wrap_ParticleCluster_RenderParticlesByProximity},
    { "RegisterParticle", _wrap_ParticleCluster_RegisterParticle},
    { "DeleteParticle", _wrap_ParticleCluster_DeleteParticle},
    { "DeleteAllParticles", _wrap_ParticleCluster_DeleteAllParticles},
    {0,0}
};
static swig_lua_method swig_ParticleCluster_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleCluster_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleCluster_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleCluster_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleCluster_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleCluster_Sf_SwigStatic = {
    "ParticleCluster",
    swig_ParticleCluster_Sf_SwigStatic_methods,
    swig_ParticleCluster_Sf_SwigStatic_attributes,
    swig_ParticleCluster_Sf_SwigStatic_constants,
    swig_ParticleCluster_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleCluster_bases[] = {0};
static const char *swig_ParticleCluster_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleCluster = { "ParticleCluster", "ParticleCluster", &SWIGTYPE_p_ParticleCluster,_proxy__wrap_new_ParticleCluster, swig_delete_ParticleCluster, swig_ParticleCluster_methods, swig_ParticleCluster_attributes, &swig_ParticleCluster_Sf_SwigStatic, swig_ParticleCluster_meta, swig_ParticleCluster_bases, swig_ParticleCluster_base_names };

static int _wrap_new_ParticleSystem(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  ParticleSystem *result = 0 ;
  
  SWIG_check_num_args("ParticleSystem::ParticleSystem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::ParticleSystem",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_ParticleSystem",1,SWIGTYPE_p_Game);
  }
  
  result = (ParticleSystem *)new ParticleSystem(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ParticleSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_initParticleSys(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  
  SWIG_check_num_args("ParticleSystem::initParticleSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::initParticleSys",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_initParticleSys",1,SWIGTYPE_p_ParticleSystem);
  }
  
  (arg1)->initParticleSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RegisterUnitParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  math_point *arg3 = 0 ;
  cstr arg4 = (cstr) 0 ;
  char arg5 ;
  size_t result;
  
  SWIG_check_num_args("ParticleSystem::RegisterUnitParticle",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",2,"Unit &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",3,"math_point const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",4,"cstr");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",5,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterUnitParticle",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterUnitParticle",2,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterUnitParticle",3,SWIGTYPE_p_math_point);
  }
  
  arg4 = (cstr)lua_tostring(L, 4);
  arg5 = (lua_tostring(L, 5))[0];
  result = (arg1)->RegisterUnitParticle(*arg2,(math_point const &)*arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RegisterUnitParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  math_point *arg3 = 0 ;
  cstr arg4 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("ParticleSystem::RegisterUnitParticle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",2,"Unit &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",3,"math_point const &");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ParticleSystem::RegisterUnitParticle",4,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterUnitParticle",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterUnitParticle",2,SWIGTYPE_p_Unit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterUnitParticle",3,SWIGTYPE_p_math_point);
  }
  
  arg4 = (cstr)lua_tostring(L, 4);
  result = (arg1)->RegisterUnitParticle(*arg2,(math_point const &)*arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RegisterUnitParticle(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_ParticleSystem_RegisterUnitParticle__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]) && (lua_rawlen(L,argv[4])==1);
            }
            if (_v) {
              return _wrap_ParticleSystem_RegisterUnitParticle__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleSystem_RegisterUnitParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleSystem::RegisterUnitParticle(Unit &,math_point const &,cstr,char)\n"
    "    ParticleSystem::RegisterUnitParticle(Unit &,math_point const &,cstr)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_RegisterGameParticle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  math_point *arg2 = 0 ;
  cstr arg3 = (cstr) 0 ;
  char arg4 ;
  size_t result;
  
  SWIG_check_num_args("ParticleSystem::RegisterGameParticle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RegisterGameParticle",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RegisterGameParticle",2,"math_point const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ParticleSystem::RegisterGameParticle",3,"cstr");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("ParticleSystem::RegisterGameParticle",4,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterGameParticle",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterGameParticle",2,SWIGTYPE_p_math_point);
  }
  
  arg3 = (cstr)lua_tostring(L, 3);
  arg4 = (lua_tostring(L, 4))[0];
  result = (arg1)->RegisterGameParticle((math_point const &)*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RegisterGameParticle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  math_point *arg2 = 0 ;
  cstr arg3 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("ParticleSystem::RegisterGameParticle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RegisterGameParticle",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RegisterGameParticle",2,"math_point const &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ParticleSystem::RegisterGameParticle",3,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterGameParticle",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleSystem_RegisterGameParticle",2,SWIGTYPE_p_math_point);
  }
  
  arg3 = (cstr)lua_tostring(L, 3);
  result = (arg1)->RegisterGameParticle((math_point const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RegisterGameParticle(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_RegisterGameParticle__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            return _wrap_ParticleSystem_RegisterGameParticle__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleSystem_RegisterGameParticle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleSystem::RegisterGameParticle(math_point const &,cstr,char)\n"
    "    ParticleSystem::RegisterGameParticle(math_point const &,cstr)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_RenderParticleFromUnit(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ParticleSystem::RenderParticleFromUnit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RenderParticleFromUnit",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RenderParticleFromUnit",2,"Unit &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleSystem::RenderParticleFromUnit",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RenderParticleFromUnit",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_RenderParticleFromUnit",2,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RenderParticleFromUnit(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RenderAllParticlesFromUnit(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  
  SWIG_check_num_args("ParticleSystem::RenderAllParticlesFromUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RenderAllParticlesFromUnit",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RenderAllParticlesFromUnit",2,"Unit &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RenderAllParticlesFromUnit",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_RenderAllParticlesFromUnit",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->RenderAllParticlesFromUnit(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RenderUnitParticlesByProximity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ParticleSystem::RenderUnitParticlesByProximity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RenderUnitParticlesByProximity",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RenderUnitParticlesByProximity",2,"Unit &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleSystem::RenderUnitParticlesByProximity",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RenderUnitParticlesByProximity",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_RenderUnitParticlesByProximity",2,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RenderUnitParticlesByProximity(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RenderUnitParticlesByProximity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  
  SWIG_check_num_args("ParticleSystem::RenderUnitParticlesByProximity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RenderUnitParticlesByProximity",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RenderUnitParticlesByProximity",2,"Unit &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RenderUnitParticlesByProximity",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_RenderUnitParticlesByProximity",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->RenderUnitParticlesByProximity(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RenderUnitParticlesByProximity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystem_RenderUnitParticlesByProximity__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Unit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_RenderUnitParticlesByProximity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleSystem_RenderUnitParticlesByProximity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleSystem::RenderUnitParticlesByProximity(Unit &,size_t)\n"
    "    ParticleSystem::RenderUnitParticlesByProximity(Unit &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_RenderGameParticlesByProximity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  math_point *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ParticleSystem::RenderGameParticlesByProximity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RenderGameParticlesByProximity",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RenderGameParticlesByProximity",2,"math_point const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleSystem::RenderGameParticlesByProximity",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RenderGameParticlesByProximity",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleSystem_RenderGameParticlesByProximity",2,SWIGTYPE_p_math_point);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RenderGameParticlesByProximity((math_point const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RenderGameParticlesByProximity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  math_point *arg2 = 0 ;
  
  SWIG_check_num_args("ParticleSystem::RenderGameParticlesByProximity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RenderGameParticlesByProximity",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::RenderGameParticlesByProximity",2,"math_point const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RenderGameParticlesByProximity",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("ParticleSystem_RenderGameParticlesByProximity",2,SWIGTYPE_p_math_point);
  }
  
  (arg1)->RenderGameParticlesByProximity((math_point const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_RenderGameParticlesByProximity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ParticleSystem_RenderGameParticlesByProximity__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ParticleSystem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math_point, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ParticleSystem_RenderGameParticlesByProximity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ParticleSystem_RenderGameParticlesByProximity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ParticleSystem::RenderGameParticlesByProximity(math_point const &,size_t)\n"
    "    ParticleSystem::RenderGameParticlesByProximity(math_point const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParticleSystem_RenderAllParticlesFromGame(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  
  SWIG_check_num_args("ParticleSystem::RenderAllParticlesFromGame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::RenderAllParticlesFromGame",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_RenderAllParticlesFromGame",1,SWIGTYPE_p_ParticleSystem);
  }
  
  (arg1)->RenderAllParticlesFromGame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_DeleteUnitParticle(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ParticleSystem::DeleteUnitParticle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::DeleteUnitParticle",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::DeleteUnitParticle",2,"Unit &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleSystem::DeleteUnitParticle",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_DeleteUnitParticle",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_DeleteUnitParticle",2,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->DeleteUnitParticle(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_DeleteGameParticle(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ParticleSystem::DeleteGameParticle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::DeleteGameParticle",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleSystem::DeleteGameParticle",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_DeleteGameParticle",1,SWIGTYPE_p_ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->DeleteGameParticle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_ClearUnitParticles(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  
  SWIG_check_num_args("ParticleSystem::ClearUnitParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::ClearUnitParticles",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_ClearUnitParticles",1,SWIGTYPE_p_ParticleSystem);
  }
  
  (arg1)->ClearUnitParticles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_ClearGameParticles(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  
  SWIG_check_num_args("ParticleSystem::ClearGameParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::ClearGameParticles",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_ClearGameParticles",1,SWIGTYPE_p_ParticleSystem);
  }
  
  (arg1)->ClearGameParticles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_ClearAllParticles(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  
  SWIG_check_num_args("ParticleSystem::ClearAllParticles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::ClearAllParticles",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_ClearAllParticles",1,SWIGTYPE_p_ParticleSystem);
  }
  
  (arg1)->ClearAllParticles();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_GetUnitParticleCount(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("ParticleSystem::GetUnitParticleCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::GetUnitParticleCount",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::GetUnitParticleCount",2,"Unit &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_GetUnitParticleCount",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_GetUnitParticleCount",2,SWIGTYPE_p_Unit);
  }
  
  result = (arg1)->GetUnitParticleCount(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_GetGameParticleCount(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ParticleSystem::GetGameParticleCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::GetGameParticleCount",1,"ParticleSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_GetGameParticleCount",1,SWIGTYPE_p_ParticleSystem);
  }
  
  result = (arg1)->GetGameParticleCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_SetInitialForceOfUnitParticle(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  Unit *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("ParticleSystem::SetInitialForceOfUnitParticle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::SetInitialForceOfUnitParticle",1,"ParticleSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ParticleSystem::SetInitialForceOfUnitParticle",2,"Unit &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleSystem::SetInitialForceOfUnitParticle",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ParticleSystem::SetInitialForceOfUnitParticle",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SetInitialForceOfUnitParticle",1,SWIGTYPE_p_ParticleSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("ParticleSystem_SetInitialForceOfUnitParticle",2,SWIGTYPE_p_Unit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->SetInitialForceOfUnitParticle(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParticleSystem_SetInitialForceOfGameParticle(lua_State* L) {
  int SWIG_arg = 0;
  ParticleSystem *arg1 = (ParticleSystem *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("ParticleSystem::SetInitialForceOfGameParticle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ParticleSystem::SetInitialForceOfGameParticle",1,"ParticleSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ParticleSystem::SetInitialForceOfGameParticle",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ParticleSystem::SetInitialForceOfGameParticle",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ParticleSystem,0))){
    SWIG_fail_ptr("ParticleSystem_SetInitialForceOfGameParticle",1,SWIGTYPE_p_ParticleSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->SetInitialForceOfGameParticle(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParticleSystem(void *obj) {
ParticleSystem *arg1 = (ParticleSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParticleSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParticleSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParticleSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParticleSystem_methods[]= {
    { "initParticleSys", _wrap_ParticleSystem_initParticleSys},
    { "RegisterUnitParticle", _wrap_ParticleSystem_RegisterUnitParticle},
    { "RegisterGameParticle", _wrap_ParticleSystem_RegisterGameParticle},
    { "RenderParticleFromUnit", _wrap_ParticleSystem_RenderParticleFromUnit},
    { "RenderAllParticlesFromUnit", _wrap_ParticleSystem_RenderAllParticlesFromUnit},
    { "RenderUnitParticlesByProximity", _wrap_ParticleSystem_RenderUnitParticlesByProximity},
    { "RenderGameParticlesByProximity", _wrap_ParticleSystem_RenderGameParticlesByProximity},
    { "RenderAllParticlesFromGame", _wrap_ParticleSystem_RenderAllParticlesFromGame},
    { "DeleteUnitParticle", _wrap_ParticleSystem_DeleteUnitParticle},
    { "DeleteGameParticle", _wrap_ParticleSystem_DeleteGameParticle},
    { "ClearUnitParticles", _wrap_ParticleSystem_ClearUnitParticles},
    { "ClearGameParticles", _wrap_ParticleSystem_ClearGameParticles},
    { "ClearAllParticles", _wrap_ParticleSystem_ClearAllParticles},
    { "GetUnitParticleCount", _wrap_ParticleSystem_GetUnitParticleCount},
    { "GetGameParticleCount", _wrap_ParticleSystem_GetGameParticleCount},
    { "SetInitialForceOfUnitParticle", _wrap_ParticleSystem_SetInitialForceOfUnitParticle},
    { "SetInitialForceOfGameParticle", _wrap_ParticleSystem_SetInitialForceOfGameParticle},
    {0,0}
};
static swig_lua_method swig_ParticleSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParticleSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParticleSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParticleSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParticleSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParticleSystem_Sf_SwigStatic = {
    "ParticleSystem",
    swig_ParticleSystem_Sf_SwigStatic_methods,
    swig_ParticleSystem_Sf_SwigStatic_attributes,
    swig_ParticleSystem_Sf_SwigStatic_constants,
    swig_ParticleSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParticleSystem_bases[] = {0};
static const char *swig_ParticleSystem_base_names[] = {0};
static swig_lua_class _wrap_class_ParticleSystem = { "ParticleSystem", "ParticleSystem", &SWIGTYPE_p_ParticleSystem,_proxy__wrap_new_ParticleSystem, swig_delete_ParticleSystem, swig_ParticleSystem_methods, swig_ParticleSystem_attributes, &swig_ParticleSystem_Sf_SwigStatic, swig_ParticleSystem_meta, swig_ParticleSystem_bases, swig_ParticleSystem_base_names };

static int _wrap_new_ThreadSystem(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *result = 0 ;
  
  SWIG_check_num_args("ThreadSystem::ThreadSystem",0,0)
  result = (ThreadSystem *)new ThreadSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ThreadSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_SpawnThread(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  thread_func arg2 = (thread_func) 0 ;
  void_ptr arg3 = (void_ptr) 0 ;
  size_t result;
  
  SWIG_check_num_args("ThreadSystem::SpawnThread",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::SpawnThread",1,"ThreadSystem *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ThreadSystem::SpawnThread",2,"thread_func");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ThreadSystem::SpawnThread",3,"void_ptr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_SpawnThread",1,SWIGTYPE_p_ThreadSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__p_void,0))){
    SWIG_fail_ptr("ThreadSystem_SpawnThread",2,SWIGTYPE_p_f_p_void__p_void);
  }
  
  arg3=(void_ptr)SWIG_MustGetPtr(L,3,0,0,3,"ThreadSystem_SpawnThread");
  result = (arg1)->SpawnThread(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_SpawnMutex(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ThreadSystem::SpawnMutex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::SpawnMutex",1,"ThreadSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_SpawnMutex",1,SWIGTYPE_p_ThreadSystem);
  }
  
  result = (arg1)->SpawnMutex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_SpawnCondVar(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ThreadSystem::SpawnCondVar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::SpawnCondVar",1,"ThreadSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_SpawnCondVar",1,SWIGTYPE_p_ThreadSystem);
  }
  
  result = (arg1)->SpawnCondVar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_GetMutex(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  pthread_mutex_t *result = 0 ;
  
  SWIG_check_num_args("ThreadSystem::GetMutex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::GetMutex",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::GetMutex",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_GetMutex",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (pthread_mutex_t *) &(arg1)->GetMutex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pthread_mutex_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_GetConditionVariable(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  pthread_cond_t *result = 0 ;
  
  SWIG_check_num_args("ThreadSystem::GetConditionVariable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::GetConditionVariable",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::GetConditionVariable",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_GetConditionVariable",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (pthread_cond_t *) &(arg1)->GetConditionVariable(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pthread_cond_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_LockMutex(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ThreadSystem::LockMutex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::LockMutex",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::LockMutex",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_LockMutex",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->LockMutex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_WaitForCond(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ThreadSystem::WaitForCond",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::WaitForCond",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::WaitForCond",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ThreadSystem::WaitForCond",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_WaitForCond",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->WaitForCond(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_SignalCond(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ThreadSystem::SignalCond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::SignalCond",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::SignalCond",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_SignalCond",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SignalCond(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_UnlockMutex(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ThreadSystem::UnlockMutex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::UnlockMutex",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::UnlockMutex",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_UnlockMutex",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->UnlockMutex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_JoinThread(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ThreadSystem::JoinThread",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::JoinThread",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::JoinThread",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_JoinThread",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->JoinThread(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_CloseThread(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ThreadSystem::CloseThread",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::CloseThread",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::CloseThread",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_CloseThread",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->CloseThread(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_DeleteMutex(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ThreadSystem::DeleteMutex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::DeleteMutex",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::DeleteMutex",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_DeleteMutex",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->DeleteMutex(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ThreadSystem_DeleteConditionVariable(lua_State* L) {
  int SWIG_arg = 0;
  ThreadSystem *arg1 = (ThreadSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ThreadSystem::DeleteConditionVariable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ThreadSystem::DeleteConditionVariable",1,"ThreadSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ThreadSystem::DeleteConditionVariable",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ThreadSystem,0))){
    SWIG_fail_ptr("ThreadSystem_DeleteConditionVariable",1,SWIGTYPE_p_ThreadSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->DeleteConditionVariable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ThreadSystem(void *obj) {
ThreadSystem *arg1 = (ThreadSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_ThreadSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ThreadSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ThreadSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ThreadSystem_methods[]= {
    { "SpawnThread", _wrap_ThreadSystem_SpawnThread},
    { "SpawnMutex", _wrap_ThreadSystem_SpawnMutex},
    { "SpawnCondVar", _wrap_ThreadSystem_SpawnCondVar},
    { "GetMutex", _wrap_ThreadSystem_GetMutex},
    { "GetConditionVariable", _wrap_ThreadSystem_GetConditionVariable},
    { "LockMutex", _wrap_ThreadSystem_LockMutex},
    { "WaitForCond", _wrap_ThreadSystem_WaitForCond},
    { "SignalCond", _wrap_ThreadSystem_SignalCond},
    { "UnlockMutex", _wrap_ThreadSystem_UnlockMutex},
    { "JoinThread", _wrap_ThreadSystem_JoinThread},
    { "CloseThread", _wrap_ThreadSystem_CloseThread},
    { "DeleteMutex", _wrap_ThreadSystem_DeleteMutex},
    { "DeleteConditionVariable", _wrap_ThreadSystem_DeleteConditionVariable},
    {0,0}
};
static swig_lua_method swig_ThreadSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ThreadSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ThreadSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ThreadSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ThreadSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ThreadSystem_Sf_SwigStatic = {
    "ThreadSystem",
    swig_ThreadSystem_Sf_SwigStatic_methods,
    swig_ThreadSystem_Sf_SwigStatic_attributes,
    swig_ThreadSystem_Sf_SwigStatic_constants,
    swig_ThreadSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ThreadSystem_bases[] = {0};
static const char *swig_ThreadSystem_base_names[] = {0};
static swig_lua_class _wrap_class_ThreadSystem = { "ThreadSystem", "ThreadSystem", &SWIGTYPE_p_ThreadSystem,_proxy__wrap_new_ThreadSystem, swig_delete_ThreadSystem, swig_ThreadSystem_methods, swig_ThreadSystem_attributes, &swig_ThreadSystem_Sf_SwigStatic, swig_ThreadSystem_meta, swig_ThreadSystem_bases, swig_ThreadSystem_base_names };

static int _wrap_UDPClient_ip_set(lua_State* L) {
  int SWIG_arg = 0;
  UDPClient *arg1 = (UDPClient *) 0 ;
  IPaddress arg2 ;
  IPaddress *argp2 ;
  
  SWIG_check_num_args("UDPClient::ip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UDPClient::ip",1,"UDPClient *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("UDPClient::ip",2,"IPaddress");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UDPClient,0))){
    SWIG_fail_ptr("UDPClient_ip_set",1,SWIGTYPE_p_UDPClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_IPaddress,0))){
    SWIG_fail_ptr("UDPClient_ip_set",2,SWIGTYPE_p_IPaddress);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->ip = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UDPClient_ip_get(lua_State* L) {
  int SWIG_arg = 0;
  UDPClient *arg1 = (UDPClient *) 0 ;
  IPaddress result;
  
  SWIG_check_num_args("UDPClient::ip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UDPClient::ip",1,"UDPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UDPClient,0))){
    SWIG_fail_ptr("UDPClient_ip_get",1,SWIGTYPE_p_UDPClient);
  }
  
  result =  ((arg1)->ip);
  {
    IPaddress * resultptr = new IPaddress((const IPaddress &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_IPaddress,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UDPClient_id_set(lua_State* L) {
  int SWIG_arg = 0;
  UDPClient *arg1 = (UDPClient *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("UDPClient::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UDPClient::id",1,"UDPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UDPClient::id",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UDPClient,0))){
    SWIG_fail_ptr("UDPClient_id_set",1,SWIGTYPE_p_UDPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UDPClient_id_get(lua_State* L) {
  int SWIG_arg = 0;
  UDPClient *arg1 = (UDPClient *) 0 ;
  int result;
  
  SWIG_check_num_args("UDPClient::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UDPClient::id",1,"UDPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UDPClient,0))){
    SWIG_fail_ptr("UDPClient_id_get",1,SWIGTYPE_p_UDPClient);
  }
  
  result = (int) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UDPClient_udp_set(lua_State* L) {
  int SWIG_arg = 0;
  UDPClient *arg1 = (UDPClient *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("UDPClient::udp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UDPClient::udp",1,"UDPClient *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("UDPClient::udp",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UDPClient,0))){
    SWIG_fail_ptr("UDPClient_udp_set",1,SWIGTYPE_p_UDPClient);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->udp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UDPClient_udp_get(lua_State* L) {
  int SWIG_arg = 0;
  UDPClient *arg1 = (UDPClient *) 0 ;
  bool result;
  
  SWIG_check_num_args("UDPClient::udp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UDPClient::udp",1,"UDPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UDPClient,0))){
    SWIG_fail_ptr("UDPClient_udp_get",1,SWIGTYPE_p_UDPClient);
  }
  
  result = (bool) ((arg1)->udp);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UDPClient(lua_State* L) {
  int SWIG_arg = 0;
  UDPClient *result = 0 ;
  
  SWIG_check_num_args("UDPClient::UDPClient",0,0)
  result = (UDPClient *)new UDPClient();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UDPClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UDPClient(void *obj) {
UDPClient *arg1 = (UDPClient *) obj;
delete arg1;
}
static int _proxy__wrap_new_UDPClient(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UDPClient);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UDPClient_attributes[] = {
    { "ip", _wrap_UDPClient_ip_get, _wrap_UDPClient_ip_set },
    { "id", _wrap_UDPClient_id_get, _wrap_UDPClient_id_set },
    { "udp", _wrap_UDPClient_udp_get, _wrap_UDPClient_udp_set },
    {0,0,0}
};
static swig_lua_method swig_UDPClient_methods[]= {
    {0,0}
};
static swig_lua_method swig_UDPClient_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UDPClient_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UDPClient_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UDPClient_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UDPClient_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UDPClient_Sf_SwigStatic = {
    "UDPClient",
    swig_UDPClient_Sf_SwigStatic_methods,
    swig_UDPClient_Sf_SwigStatic_attributes,
    swig_UDPClient_Sf_SwigStatic_constants,
    swig_UDPClient_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UDPClient_bases[] = {0};
static const char *swig_UDPClient_base_names[] = {0};
static swig_lua_class _wrap_class_UDPClient = { "UDPClient", "UDPClient", &SWIGTYPE_p_UDPClient,_proxy__wrap_new_UDPClient, swig_delete_UDPClient, swig_UDPClient_methods, swig_UDPClient_attributes, &swig_UDPClient_Sf_SwigStatic, swig_UDPClient_meta, swig_UDPClient_bases, swig_UDPClient_base_names };

static int _wrap_TCPClient_id_set(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TCPClient::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::id",1,"TCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCPClient::id",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_id_set",1,SWIGTYPE_p_TCPClient);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_id_get(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  size_t result;
  
  SWIG_check_num_args("TCPClient::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::id",1,"TCPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_id_get",1,SWIGTYPE_p_TCPClient);
  }
  
  result =  ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_host_set(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TCPClient::host",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::host",1,"TCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCPClient::host",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_host_set",1,SWIGTYPE_p_TCPClient);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->host = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_host_get(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  size_t result;
  
  SWIG_check_num_args("TCPClient::host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::host",1,"TCPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_host_get",1,SWIGTYPE_p_TCPClient);
  }
  
  result =  ((arg1)->host);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_port_set(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("TCPClient::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::port",1,"TCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCPClient::port",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_port_set",1,SWIGTYPE_p_TCPClient);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->port = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_port_get(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  short result;
  
  SWIG_check_num_args("TCPClient::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::port",1,"TCPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_port_get",1,SWIGTYPE_p_TCPClient);
  }
  
  result = (short) ((arg1)->port);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_host_name_set(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("TCPClient::host_name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::host_name",1,"TCPClient *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TCPClient::host_name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_host_name_set",1,SWIGTYPE_p_TCPClient);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->host_name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_host_name_get(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("TCPClient::host_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::host_name",1,"TCPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_host_name_get",1,SWIGTYPE_p_TCPClient);
  }
  
  result = (std::string *) & ((arg1)->host_name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_sock_set(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  TCPsocket arg2 ;
  TCPsocket *argp2 ;
  
  SWIG_check_num_args("TCPClient::sock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::sock",1,"TCPClient *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TCPClient::sock",2,"TCPsocket");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_sock_set",1,SWIGTYPE_p_TCPClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCPsocket,0))){
    SWIG_fail_ptr("TCPClient_sock_set",2,SWIGTYPE_p_TCPsocket);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->sock = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCPClient_sock_get(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *arg1 = (TCPClient *) 0 ;
  TCPsocket result;
  
  SWIG_check_num_args("TCPClient::sock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCPClient::sock",1,"TCPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCPClient,0))){
    SWIG_fail_ptr("TCPClient_sock_get",1,SWIGTYPE_p_TCPClient);
  }
  
  result =  ((arg1)->sock);
  {
    TCPsocket * resultptr = new TCPsocket((const TCPsocket &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCPsocket,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCPClient(lua_State* L) {
  int SWIG_arg = 0;
  TCPClient *result = 0 ;
  
  SWIG_check_num_args("TCPClient::TCPClient",0,0)
  result = (TCPClient *)new TCPClient();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCPClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCPClient(void *obj) {
TCPClient *arg1 = (TCPClient *) obj;
delete arg1;
}
static int _proxy__wrap_new_TCPClient(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TCPClient);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TCPClient_attributes[] = {
    { "id", _wrap_TCPClient_id_get, _wrap_TCPClient_id_set },
    { "host", _wrap_TCPClient_host_get, _wrap_TCPClient_host_set },
    { "port", _wrap_TCPClient_port_get, _wrap_TCPClient_port_set },
    { "host_name", _wrap_TCPClient_host_name_get, _wrap_TCPClient_host_name_set },
    { "sock", _wrap_TCPClient_sock_get, _wrap_TCPClient_sock_set },
    {0,0,0}
};
static swig_lua_method swig_TCPClient_methods[]= {
    {0,0}
};
static swig_lua_method swig_TCPClient_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TCPClient_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TCPClient_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TCPClient_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TCPClient_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TCPClient_Sf_SwigStatic = {
    "TCPClient",
    swig_TCPClient_Sf_SwigStatic_methods,
    swig_TCPClient_Sf_SwigStatic_attributes,
    swig_TCPClient_Sf_SwigStatic_constants,
    swig_TCPClient_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TCPClient_bases[] = {0};
static const char *swig_TCPClient_base_names[] = {0};
static swig_lua_class _wrap_class_TCPClient = { "TCPClient", "TCPClient", &SWIGTYPE_p_TCPClient,_proxy__wrap_new_TCPClient, swig_delete_TCPClient, swig_TCPClient_methods, swig_TCPClient_attributes, &swig_TCPClient_Sf_SwigStatic, swig_TCPClient_meta, swig_TCPClient_bases, swig_TCPClient_base_names };

static int _wrap_new_NetNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  bool arg4 ;
  int arg5 ;
  std::string temp2 ;
  NetNode *result = 0 ;
  
  SWIG_check_num_args("NetNode::NetNode",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("NetNode::NetNode",1,"size_t");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetNode::NetNode",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetNode::NetNode",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("NetNode::NetNode",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("NetNode::NetNode",5,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (int)lua_tonumber(L, 5);
  result = (NetNode *)new NetNode(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  bool arg4 ;
  std::string temp2 ;
  NetNode *result = 0 ;
  
  SWIG_check_num_args("NetNode::NetNode",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("NetNode::NetNode",1,"size_t");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetNode::NetNode",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetNode::NetNode",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("NetNode::NetNode",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (NetNode *)new NetNode(arg1,(std::string const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  NetNode *result = 0 ;
  
  SWIG_check_num_args("NetNode::NetNode",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("NetNode::NetNode",1,"size_t");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetNode::NetNode",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetNode::NetNode",3,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (NetNode *)new NetNode(arg1,(std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetNode__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  bool arg3 ;
  int arg4 ;
  NetNode *result = 0 ;
  
  SWIG_check_num_args("NetNode::NetNode",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("NetNode::NetNode",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::NetNode",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("NetNode::NetNode",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetNode::NetNode",4,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (int)lua_tonumber(L, 4);
  result = (NetNode *)new NetNode(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetNode__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  bool arg3 ;
  NetNode *result = 0 ;
  
  SWIG_check_num_args("NetNode::NetNode",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("NetNode::NetNode",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::NetNode",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("NetNode::NetNode",3,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (NetNode *)new NetNode(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetNode__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  NetNode *result = 0 ;
  
  SWIG_check_num_args("NetNode::NetNode",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("NetNode::NetNode",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::NetNode",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (NetNode *)new NetNode(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetNode(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NetNode__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_NetNode__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_NetNode__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetNode__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetNode__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NetNode__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetNode::NetNode(size_t,std::string const &,size_t,bool,int)\n"
    "    NetNode::NetNode(size_t,std::string const &,size_t,bool)\n"
    "    NetNode::NetNode(size_t,std::string const &,size_t)\n"
    "    NetNode::NetNode(size_t,size_t,bool,int)\n"
    "    NetNode::NetNode(size_t,size_t,bool)\n"
    "    NetNode::NetNode(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetNode_GetAddress(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  IPaddress *result = 0 ;
  
  SWIG_check_num_args("NetNode::GetAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetAddress",1,"NetNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetAddress",1,SWIGTYPE_p_NetNode);
  }
  
  result = (IPaddress *) &((NetNode const *)arg1)->GetAddress();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IPaddress,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GetTCPSocket__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  int arg2 ;
  TCPsocket *result = 0 ;
  
  SWIG_check_num_args("NetNode::GetTCPSocket",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetTCPSocket",1,"NetNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::GetTCPSocket",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetTCPSocket",1,SWIGTYPE_p_NetNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (TCPsocket *) &(arg1)->GetTCPSocket(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCPsocket,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GetTCPSocket__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  TCPsocket *result = 0 ;
  
  SWIG_check_num_args("NetNode::GetTCPSocket",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetTCPSocket",1,"NetNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetTCPSocket",1,SWIGTYPE_p_NetNode);
  }
  
  result = (TCPsocket *) &(arg1)->GetTCPSocket();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCPsocket,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GetTCPSocket(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NetNode_GetTCPSocket__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetNode_GetTCPSocket__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetNode_GetTCPSocket'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetNode::GetTCPSocket(int)\n"
    "    NetNode::GetTCPSocket()\n");
  lua_error(L);return 0;
}


static int _wrap_NetNode_GetTCPClientInfo(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  size_t arg2 ;
  TCPClient result;
  
  SWIG_check_num_args("NetNode::GetTCPClientInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetTCPClientInfo",1,"NetNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::GetTCPClientInfo",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetTCPClientInfo",1,SWIGTYPE_p_NetNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->GetTCPClientInfo(arg2);
  {
    TCPClient * resultptr = new TCPClient((const TCPClient &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCPClient,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GetUDPSocket(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  UDPsocket *result = 0 ;
  
  SWIG_check_num_args("NetNode::GetUDPSocket",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetUDPSocket",1,"NetNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetUDPSocket",1,SWIGTYPE_p_NetNode);
  }
  
  result = (UDPsocket *) &(arg1)->GetUDPSocket();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UDPsocket,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GetUDPClientInfo(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  int arg2 ;
  UDPClient result;
  
  SWIG_check_num_args("NetNode::GetUDPClientInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetUDPClientInfo",1,"NetNode const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::GetUDPClientInfo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetUDPClientInfo",1,SWIGTYPE_p_NetNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NetNode const *)arg1)->GetUDPClientInfo(arg2);
  {
    UDPClient * resultptr = new UDPClient((const UDPClient &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_UDPClient,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GetPort(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("NetNode::GetPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetPort",1,"NetNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetPort",1,SWIGTYPE_p_NetNode);
  }
  
  result = ((NetNode const *)arg1)->GetPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GetNodeID(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("NetNode::GetNodeID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetNodeID",1,"NetNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetNodeID",1,SWIGTYPE_p_NetNode);
  }
  
  result = ((NetNode const *)arg1)->GetNodeID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GetClientCount(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("NetNode::GetClientCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GetClientCount",1,"NetNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GetClientCount",1,SWIGTYPE_p_NetNode);
  }
  
  result = ((NetNode const *)arg1)->GetClientCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_GenerateUDPID(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  int result;
  
  SWIG_check_num_args("NetNode::GenerateUDPID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::GenerateUDPID",1,"NetNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_GenerateUDPID",1,SWIGTYPE_p_NetNode);
  }
  
  result = (int)(arg1)->GenerateUDPID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_isUDP(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetNode::isUDP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::isUDP",1,"NetNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_isUDP",1,SWIGTYPE_p_NetNode);
  }
  
  result = (bool)((NetNode const *)arg1)->isUDP();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_isServer(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetNode::isServer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::isServer",1,"NetNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_isServer",1,SWIGTYPE_p_NetNode);
  }
  
  result = (bool)((NetNode const *)arg1)->isServer();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_isBad(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("NetNode::isBad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::isBad",1,"NetNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_isBad",1,SWIGTYPE_p_NetNode);
  }
  
  result = (bool)((NetNode const *)arg1)->isBad();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_isUDPIDUsed(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("NetNode::isUDPIDUsed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::isUDPIDUsed",1,"NetNode const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::isUDPIDUsed",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_isUDPIDUsed",1,SWIGTYPE_p_NetNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((NetNode const *)arg1)->isUDPIDUsed(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_AcceptTCPClient(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("NetNode::AcceptTCPClient",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::AcceptTCPClient",1,"NetNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_AcceptTCPClient",1,SWIGTYPE_p_NetNode);
  }
  
  result = (arg1)->AcceptTCPClient();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_RegisterUDPClient(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  IPaddress *arg2 = 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("NetNode::RegisterUDPClient",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::RegisterUDPClient",1,"NetNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetNode::RegisterUDPClient",2,"IPaddress const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetNode::RegisterUDPClient",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_RegisterUDPClient",1,SWIGTYPE_p_NetNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IPaddress,0))){
    SWIG_fail_ptr("NetNode_RegisterUDPClient",2,SWIGTYPE_p_IPaddress);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->RegisterUDPClient((IPaddress const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_UnRegisterTCPClient(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("NetNode::UnRegisterTCPClient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::UnRegisterTCPClient",1,"NetNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::UnRegisterTCPClient",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_UnRegisterTCPClient",1,SWIGTYPE_p_NetNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->UnRegisterTCPClient(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetNode_UnRegisterUDPClient(lua_State* L) {
  int SWIG_arg = 0;
  NetNode *arg1 = (NetNode *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("NetNode::UnRegisterUDPClient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetNode::UnRegisterUDPClient",1,"NetNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetNode::UnRegisterUDPClient",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetNode,0))){
    SWIG_fail_ptr("NetNode_UnRegisterUDPClient",1,SWIGTYPE_p_NetNode);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->UnRegisterUDPClient(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetNode(void *obj) {
NetNode *arg1 = (NetNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetNode_methods[]= {
    { "GetAddress", _wrap_NetNode_GetAddress},
    { "GetTCPSocket", _wrap_NetNode_GetTCPSocket},
    { "GetTCPClientInfo", _wrap_NetNode_GetTCPClientInfo},
    { "GetUDPSocket", _wrap_NetNode_GetUDPSocket},
    { "GetUDPClientInfo", _wrap_NetNode_GetUDPClientInfo},
    { "GetPort", _wrap_NetNode_GetPort},
    { "GetNodeID", _wrap_NetNode_GetNodeID},
    { "GetClientCount", _wrap_NetNode_GetClientCount},
    { "GenerateUDPID", _wrap_NetNode_GenerateUDPID},
    { "isUDP", _wrap_NetNode_isUDP},
    { "isServer", _wrap_NetNode_isServer},
    { "isBad", _wrap_NetNode_isBad},
    { "isUDPIDUsed", _wrap_NetNode_isUDPIDUsed},
    { "AcceptTCPClient", _wrap_NetNode_AcceptTCPClient},
    { "RegisterUDPClient", _wrap_NetNode_RegisterUDPClient},
    { "UnRegisterTCPClient", _wrap_NetNode_UnRegisterTCPClient},
    { "UnRegisterUDPClient", _wrap_NetNode_UnRegisterUDPClient},
    {0,0}
};
static swig_lua_method swig_NetNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetNode_Sf_SwigStatic = {
    "NetNode",
    swig_NetNode_Sf_SwigStatic_methods,
    swig_NetNode_Sf_SwigStatic_attributes,
    swig_NetNode_Sf_SwigStatic_constants,
    swig_NetNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetNode_bases[] = {0};
static const char *swig_NetNode_base_names[] = {0};
static swig_lua_class _wrap_class_NetNode = { "NetNode", "NetNode", &SWIGTYPE_p_NetNode,_proxy__wrap_new_NetNode, swig_delete_NetNode, swig_NetNode_methods, swig_NetNode_attributes, &swig_NetNode_Sf_SwigStatic, swig_NetNode_meta, swig_NetNode_bases, swig_NetNode_base_names };

static int _wrap_new_NetworkManager(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  NetworkManager *result = 0 ;
  
  SWIG_check_num_args("NetworkManager::NetworkManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::NetworkManager",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_NetworkManager",1,SWIGTYPE_p_Game);
  }
  
  result = (NetworkManager *)new NetworkManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NetworkManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_initNetSys(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  
  SWIG_check_num_args("NetworkManager::initNetSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::initNetSys",1,"NetworkManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_initNetSys",1,SWIGTYPE_p_NetworkManager);
  }
  
  (arg1)->initNetSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_CreateClientConnection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  bool arg4 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("NetworkManager::CreateClientConnection",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::CreateClientConnection",1,"NetworkManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkManager::CreateClientConnection",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::CreateClientConnection",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("NetworkManager::CreateClientConnection",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_CreateClientConnection",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (arg1)->CreateClientConnection((std::string const &)*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_CreateClientConnection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("NetworkManager::CreateClientConnection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::CreateClientConnection",1,"NetworkManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkManager::CreateClientConnection",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::CreateClientConnection",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_CreateClientConnection",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->CreateClientConnection((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_CreateClientConnection(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_CreateClientConnection__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_CreateClientConnection__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_CreateClientConnection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::CreateClientConnection(std::string const &,size_t,bool)\n"
    "    NetworkManager::CreateClientConnection(std::string const &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_CreateServer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  size_t result;
  
  SWIG_check_num_args("NetworkManager::CreateServer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::CreateServer",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::CreateServer",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("NetworkManager::CreateServer",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_CreateServer",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (arg1)->CreateServer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_CreateServer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  size_t result;
  
  SWIG_check_num_args("NetworkManager::CreateServer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::CreateServer",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::CreateServer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_CreateServer",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->CreateServer(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_CreateServer(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NetworkManager_CreateServer__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_CreateServer__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_CreateServer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::CreateServer(size_t,bool)\n"
    "    NetworkManager::CreateServer(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_AcceptTCPClient(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  size_t result;
  
  SWIG_check_num_args("NetworkManager::AcceptTCPClient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::AcceptTCPClient",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::AcceptTCPClient",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_AcceptTCPClient",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->AcceptTCPClient(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_AcceptUDPClient(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("NetworkManager::AcceptUDPClient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::AcceptUDPClient",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::AcceptUDPClient",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_AcceptUDPClient",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)(arg1)->AcceptUDPClient(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_CloseUDPClient(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("NetworkManager::CloseUDPClient",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::CloseUDPClient",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::CloseUDPClient",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::CloseUDPClient",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_CloseUDPClient",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->CloseUDPClient(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SetMTU(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("NetworkManager::SetMTU",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SetMTU",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::SetMTU",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SetMTU",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetMTU(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  void_ptr arg2 = (void_ptr) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("NetworkManager::SendData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendData",1,"NetworkManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkManager::SendData",2,"void_ptr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendData",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::SendData",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("NetworkManager::SendData",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendData",1,SWIGTYPE_p_NetworkManager);
  }
  
  arg2=(void_ptr)SWIG_MustGetPtr(L,2,0,0,2,"NetworkManager_SendData");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->SendData(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  void_ptr arg2 = (void_ptr) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("NetworkManager::SendData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendData",1,"NetworkManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkManager::SendData",2,"void_ptr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendData",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::SendData",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendData",1,SWIGTYPE_p_NetworkManager);
  }
  
  arg2=(void_ptr)SWIG_MustGetPtr(L,2,0,0,2,"NetworkManager_SendData");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->SendData(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendData(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_SendData__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NetworkManager_SendData__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_SendData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::SendData(void_ptr,size_t,size_t,int)\n"
    "    NetworkManager::SendData(void_ptr,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_SendDataStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("NetworkManager::SendDataStr",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataStr",1,"NetworkManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkManager::SendDataStr",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataStr",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::SendDataStr",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataStr",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->SendDataStr((std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("NetworkManager::SendDataStr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataStr",1,"NetworkManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("NetworkManager::SendDataStr",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataStr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataStr",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->SendDataStr((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataStr(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_SendDataStr__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_SendDataStr__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_SendDataStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::SendDataStr(std::string const &,size_t,int)\n"
    "    NetworkManager::SendDataStr(std::string const &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_SendDataInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  int *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  int temp2 ;
  
  SWIG_check_num_args("NetworkManager::SendDataInt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataInt",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::SendDataInt",2,"int const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataInt",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::SendDataInt",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataInt",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->SendDataInt((int const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  int *arg2 = 0 ;
  size_t arg3 ;
  int temp2 ;
  
  SWIG_check_num_args("NetworkManager::SendDataInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataInt",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::SendDataInt",2,"int const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataInt",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataInt",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->SendDataInt((int const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataInt(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_SendDataInt__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_SendDataInt__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_SendDataInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::SendDataInt(int const &,size_t,int)\n"
    "    NetworkManager::SendDataInt(int const &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_SendDataBoolean__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  bool *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  bool temp2 ;
  
  SWIG_check_num_args("NetworkManager::SendDataBoolean",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataBoolean",1,"NetworkManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("NetworkManager::SendDataBoolean",2,"bool const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataBoolean",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::SendDataBoolean",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataBoolean",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2=(lua_toboolean(L, 2)!=0);
  arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->SendDataBoolean((bool const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataBoolean__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  bool *arg2 = 0 ;
  size_t arg3 ;
  bool temp2 ;
  
  SWIG_check_num_args("NetworkManager::SendDataBoolean",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataBoolean",1,"NetworkManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("NetworkManager::SendDataBoolean",2,"bool const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataBoolean",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataBoolean",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2=(lua_toboolean(L, 2)!=0);
  arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->SendDataBoolean((bool const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataBoolean(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_SendDataBoolean__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_SendDataBoolean__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_SendDataBoolean'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::SendDataBoolean(bool const &,size_t,int)\n"
    "    NetworkManager::SendDataBoolean(bool const &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_SendDataDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  double *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  double temp2 ;
  
  SWIG_check_num_args("NetworkManager::SendDataDouble",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataDouble",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::SendDataDouble",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataDouble",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::SendDataDouble",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataDouble",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->SendDataDouble((double const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  double *arg2 = 0 ;
  size_t arg3 ;
  double temp2 ;
  
  SWIG_check_num_args("NetworkManager::SendDataDouble",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataDouble",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::SendDataDouble",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataDouble",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataDouble",1,SWIGTYPE_p_NetworkManager);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->SendDataDouble((double const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataDouble(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_SendDataDouble__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_SendDataDouble__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_SendDataDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::SendDataDouble(double const &,size_t,int)\n"
    "    NetworkManager::SendDataDouble(double const &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_SendDataChar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  char arg2 ;
  size_t arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("NetworkManager::SendDataChar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataChar",1,"NetworkManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("NetworkManager::SendDataChar",2,"char const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataChar",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::SendDataChar",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataChar",1,SWIGTYPE_p_NetworkManager);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->SendDataChar(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataChar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  char arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("NetworkManager::SendDataChar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendDataChar",1,"NetworkManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("NetworkManager::SendDataChar",2,"char const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::SendDataChar",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendDataChar",1,SWIGTYPE_p_NetworkManager);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->SendDataChar(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_SendDataChar(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_SendDataChar__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_SendDataChar__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_SendDataChar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::SendDataChar(char const,size_t,int)\n"
    "    NetworkManager::SendDataChar(char const,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_SendUDPSignal(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("NetworkManager::SendUDPSignal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::SendUDPSignal",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::SendUDPSignal",2,"size_t");
  if(!lua_isstring(L,3)) SWIG_fail_arg("NetworkManager::SendUDPSignal",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_SendUDPSignal",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->SendUDPSignal(arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvData__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  void_ptr arg2 = (void_ptr) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("NetworkManager::RecvData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvData",1,"NetworkManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkManager::RecvData",2,"void_ptr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvData",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::RecvData",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("NetworkManager::RecvData",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvData",1,SWIGTYPE_p_NetworkManager);
  }
  
  arg2=(void_ptr)SWIG_MustGetPtr(L,2,0,0,2,"NetworkManager_RecvData");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->RecvData(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvData__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  void_ptr arg2 = (void_ptr) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("NetworkManager::RecvData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvData",1,"NetworkManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("NetworkManager::RecvData",2,"void_ptr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvData",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::RecvData",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvData",1,SWIGTYPE_p_NetworkManager);
  }
  
  arg2=(void_ptr)SWIG_MustGetPtr(L,2,0,0,2,"NetworkManager_RecvData");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->RecvData(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvData(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_RecvData__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NetworkManager_RecvData__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_RecvData'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::RecvData(void_ptr,size_t,size_t,int)\n"
    "    NetworkManager::RecvData(void_ptr,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_RecvDataStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataStr",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataStr",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataStr",2,"std::string &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataStr",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::RecvDataStr",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("NetworkManager::RecvDataStr",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataStr",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataStr",2,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->RecvDataStr(*arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataStr",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataStr",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataStr",2,"std::string &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataStr",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::RecvDataStr",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataStr",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataStr",2,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->RecvDataStr(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataStr(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_RecvDataStr__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NetworkManager_RecvDataStr__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_RecvDataStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::RecvDataStr(std::string &,size_t,size_t,int)\n"
    "    NetworkManager::RecvDataStr(std::string &,size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_RecvDataInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  int *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataInt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataInt",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataInt",2,"int &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataInt",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::RecvDataInt",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataInt",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataInt",2,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->RecvDataInt(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  int *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataInt",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataInt",2,"int &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataInt",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataInt",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataInt",2,SWIGTYPE_p_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RecvDataInt(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataInt(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_RecvDataInt__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_RecvDataInt__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_RecvDataInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::RecvDataInt(int &,size_t,int)\n"
    "    NetworkManager::RecvDataInt(int &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_RecvDataChar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  char *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataChar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataChar",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataChar",2,"char &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataChar",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::RecvDataChar",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataChar",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_char,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataChar",2,SWIGTYPE_p_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->RecvDataChar(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataChar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  char *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataChar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataChar",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataChar",2,"char &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataChar",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataChar",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_char,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataChar",2,SWIGTYPE_p_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RecvDataChar(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataChar(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_RecvDataChar__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_RecvDataChar__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_RecvDataChar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::RecvDataChar(char &,size_t,int)\n"
    "    NetworkManager::RecvDataChar(char &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_RecvDataBoolean__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  bool *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataBoolean",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataBoolean",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataBoolean",2,"bool &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataBoolean",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::RecvDataBoolean",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataBoolean",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataBoolean",2,SWIGTYPE_p_bool);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->RecvDataBoolean(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataBoolean__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  bool *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataBoolean",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataBoolean",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataBoolean",2,"bool &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataBoolean",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataBoolean",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataBoolean",2,SWIGTYPE_p_bool);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RecvDataBoolean(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataBoolean(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_RecvDataBoolean__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_RecvDataBoolean__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_RecvDataBoolean'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::RecvDataBoolean(bool &,size_t,int)\n"
    "    NetworkManager::RecvDataBoolean(bool &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_RecvDataDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  double *arg2 = 0 ;
  size_t arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataDouble",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataDouble",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataDouble",2,"double &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataDouble",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::RecvDataDouble",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataDouble",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataDouble",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->RecvDataDouble(*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  double *arg2 = 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("NetworkManager::RecvDataDouble",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::RecvDataDouble",1,"NetworkManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NetworkManager::RecvDataDouble",2,"double &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::RecvDataDouble",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataDouble",1,SWIGTYPE_p_NetworkManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("NetworkManager_RecvDataDouble",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->RecvDataDouble(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_RecvDataDouble(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_RecvDataDouble__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_RecvDataDouble__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_RecvDataDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::RecvDataDouble(double &,size_t,int)\n"
    "    NetworkManager::RecvDataDouble(double &,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_PingUDPClient__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  int arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("NetworkManager::PingUDPClient",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::PingUDPClient",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::PingUDPClient",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::PingUDPClient",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NetworkManager::PingUDPClient",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_PingUDPClient",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->PingUDPClient(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_PingUDPClient__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("NetworkManager::PingUDPClient",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::PingUDPClient",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::PingUDPClient",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::PingUDPClient",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_PingUDPClient",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->PingUDPClient(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_PingUDPClient(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NetworkManager_PingUDPClient__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NetworkManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NetworkManager_PingUDPClient__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NetworkManager_PingUDPClient'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetworkManager::PingUDPClient(size_t,int,size_t)\n"
    "    NetworkManager::PingUDPClient(size_t,int)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkManager_GetMaxNumUDPChannels(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("NetworkManager::GetMaxNumUDPChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::GetMaxNumUDPChannels",1,"NetworkManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_GetMaxNumUDPChannels",1,SWIGTYPE_p_NetworkManager);
  }
  
  result = (arg1)->GetMaxNumUDPChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_GetUDPClientInfo(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  int arg3 ;
  UDPClient result;
  
  SWIG_check_num_args("NetworkManager::GetUDPClientInfo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::GetUDPClientInfo",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::GetUDPClientInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::GetUDPClientInfo",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_GetUDPClientInfo",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->GetUDPClientInfo(arg2,arg3);
  {
    UDPClient * resultptr = new UDPClient((const UDPClient &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_UDPClient,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NetworkManager_GetTCPClientInfo(lua_State* L) {
  int SWIG_arg = 0;
  NetworkManager *arg1 = (NetworkManager *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  TCPClient result;
  
  SWIG_check_num_args("NetworkManager::GetTCPClientInfo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NetworkManager::GetTCPClientInfo",1,"NetworkManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NetworkManager::GetTCPClientInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NetworkManager::GetTCPClientInfo",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NetworkManager,0))){
    SWIG_fail_ptr("NetworkManager_GetTCPClientInfo",1,SWIGTYPE_p_NetworkManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->GetTCPClientInfo(arg2,arg3);
  {
    TCPClient * resultptr = new TCPClient((const TCPClient &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCPClient,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkManager(void *obj) {
NetworkManager *arg1 = (NetworkManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkManager_methods[]= {
    { "initNetSys", _wrap_NetworkManager_initNetSys},
    { "CreateClientConnection", _wrap_NetworkManager_CreateClientConnection},
    { "CreateServer", _wrap_NetworkManager_CreateServer},
    { "AcceptTCPClient", _wrap_NetworkManager_AcceptTCPClient},
    { "AcceptUDPClient", _wrap_NetworkManager_AcceptUDPClient},
    { "CloseUDPClient", _wrap_NetworkManager_CloseUDPClient},
    { "SetMTU", _wrap_NetworkManager_SetMTU},
    { "SendData", _wrap_NetworkManager_SendData},
    { "SendDataStr", _wrap_NetworkManager_SendDataStr},
    { "SendDataInt", _wrap_NetworkManager_SendDataInt},
    { "SendDataBoolean", _wrap_NetworkManager_SendDataBoolean},
    { "SendDataDouble", _wrap_NetworkManager_SendDataDouble},
    { "SendDataChar", _wrap_NetworkManager_SendDataChar},
    { "SendUDPSignal", _wrap_NetworkManager_SendUDPSignal},
    { "RecvData", _wrap_NetworkManager_RecvData},
    { "RecvDataStr", _wrap_NetworkManager_RecvDataStr},
    { "RecvDataInt", _wrap_NetworkManager_RecvDataInt},
    { "RecvDataChar", _wrap_NetworkManager_RecvDataChar},
    { "RecvDataBoolean", _wrap_NetworkManager_RecvDataBoolean},
    { "RecvDataDouble", _wrap_NetworkManager_RecvDataDouble},
    { "PingUDPClient", _wrap_NetworkManager_PingUDPClient},
    { "GetMaxNumUDPChannels", _wrap_NetworkManager_GetMaxNumUDPChannels},
    { "GetUDPClientInfo", _wrap_NetworkManager_GetUDPClientInfo},
    { "GetTCPClientInfo", _wrap_NetworkManager_GetTCPClientInfo},
    {0,0}
};
static swig_lua_method swig_NetworkManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkManager_Sf_SwigStatic = {
    "NetworkManager",
    swig_NetworkManager_Sf_SwigStatic_methods,
    swig_NetworkManager_Sf_SwigStatic_attributes,
    swig_NetworkManager_Sf_SwigStatic_constants,
    swig_NetworkManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkManager_bases[] = {0};
static const char *swig_NetworkManager_base_names[] = {0};
static swig_lua_class _wrap_class_NetworkManager = { "NetworkManager", "NetworkManager", &SWIGTYPE_p_NetworkManager,_proxy__wrap_new_NetworkManager, swig_delete_NetworkManager, swig_NetworkManager_methods, swig_NetworkManager_attributes, &swig_NetworkManager_Sf_SwigStatic, swig_NetworkManager_meta, swig_NetworkManager_bases, swig_NetworkManager_base_names };

static int _wrap_new_LocaleNode(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  LocaleNode *result = 0 ;
  
  SWIG_check_num_args("LocaleNode::LocaleNode",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("LocaleNode::LocaleNode",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (LocaleNode *)new LocaleNode((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LocaleNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleNode_GetLocaleStringSize(lua_State* L) {
  int SWIG_arg = 0;
  LocaleNode *arg1 = (LocaleNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("LocaleNode::GetLocaleStringSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleNode::GetLocaleStringSize",1,"LocaleNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleNode,0))){
    SWIG_fail_ptr("LocaleNode_GetLocaleStringSize",1,SWIGTYPE_p_LocaleNode);
  }
  
  result = ((LocaleNode const *)arg1)->GetLocaleStringSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleNode_GetLocaleString(lua_State* L) {
  int SWIG_arg = 0;
  LocaleNode *arg1 = (LocaleNode *) 0 ;
  std::string result;
  
  SWIG_check_num_args("LocaleNode::GetLocaleString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleNode::GetLocaleString",1,"LocaleNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleNode,0))){
    SWIG_fail_ptr("LocaleNode_GetLocaleString",1,SWIGTYPE_p_LocaleNode);
  }
  
  result = (arg1)->GetLocaleString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleNode___eq(lua_State* L) {
  int SWIG_arg = 0;
  LocaleNode *arg1 = (LocaleNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("LocaleNode::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleNode::operator ==",1,"LocaleNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LocaleNode::operator ==",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleNode,0))){
    SWIG_fail_ptr("LocaleNode___eq",1,SWIGTYPE_p_LocaleNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->operator ==((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LocaleNode(void *obj) {
LocaleNode *arg1 = (LocaleNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_LocaleNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LocaleNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LocaleNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LocaleNode_methods[]= {
    { "GetLocaleStringSize", _wrap_LocaleNode_GetLocaleStringSize},
    { "GetLocaleString", _wrap_LocaleNode_GetLocaleString},
    { "__eq", _wrap_LocaleNode___eq},
    {0,0}
};
static swig_lua_method swig_LocaleNode_meta[] = {
    { "__eq", _wrap_LocaleNode___eq},
    {0,0}
};

static swig_lua_attribute swig_LocaleNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LocaleNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LocaleNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LocaleNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LocaleNode_Sf_SwigStatic = {
    "LocaleNode",
    swig_LocaleNode_Sf_SwigStatic_methods,
    swig_LocaleNode_Sf_SwigStatic_attributes,
    swig_LocaleNode_Sf_SwigStatic_constants,
    swig_LocaleNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LocaleNode_bases[] = {0};
static const char *swig_LocaleNode_base_names[] = {0};
static swig_lua_class _wrap_class_LocaleNode = { "LocaleNode", "LocaleNode", &SWIGTYPE_p_LocaleNode,_proxy__wrap_new_LocaleNode, swig_delete_LocaleNode, swig_LocaleNode_methods, swig_LocaleNode_attributes, &swig_LocaleNode_Sf_SwigStatic, swig_LocaleNode_meta, swig_LocaleNode_bases, swig_LocaleNode_base_names };

static int _wrap_new_LocaleReader(lua_State* L) {
  int SWIG_arg = 0;
  cstr arg1 = (cstr) 0 ;
  LocaleReader *result = 0 ;
  
  SWIG_check_num_args("LocaleReader::LocaleReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("LocaleReader::LocaleReader",1,"cstr");
  arg1 = (cstr)lua_tostring(L, 1);
  result = (LocaleReader *)new LocaleReader(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LocaleReader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleReader_ExpandInputString(lua_State* L) {
  int SWIG_arg = 0;
  LocaleReader *arg1 = (LocaleReader *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("LocaleReader::ExpandInputString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleReader::ExpandInputString",1,"LocaleReader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LocaleReader::ExpandInputString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleReader,0))){
    SWIG_fail_ptr("LocaleReader_ExpandInputString",1,SWIGTYPE_p_LocaleReader);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->ExpandInputString((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleReader_CondenseInputString(lua_State* L) {
  int SWIG_arg = 0;
  LocaleReader *arg1 = (LocaleReader *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("LocaleReader::CondenseInputString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleReader::CondenseInputString",1,"LocaleReader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LocaleReader::CondenseInputString",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleReader,0))){
    SWIG_fail_ptr("LocaleReader_CondenseInputString",1,SWIGTYPE_p_LocaleReader);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->CondenseInputString((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleReader_GetLocaleName(lua_State* L) {
  int SWIG_arg = 0;
  LocaleReader *arg1 = (LocaleReader *) 0 ;
  std::string result;
  
  SWIG_check_num_args("LocaleReader::GetLocaleName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleReader::GetLocaleName",1,"LocaleReader const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleReader,0))){
    SWIG_fail_ptr("LocaleReader_GetLocaleName",1,SWIGTYPE_p_LocaleReader);
  }
  
  result = ((LocaleReader const *)arg1)->GetLocaleName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LocaleReader(void *obj) {
LocaleReader *arg1 = (LocaleReader *) obj;
delete arg1;
}
static int _proxy__wrap_new_LocaleReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LocaleReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LocaleReader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LocaleReader_methods[]= {
    { "ExpandInputString", _wrap_LocaleReader_ExpandInputString},
    { "CondenseInputString", _wrap_LocaleReader_CondenseInputString},
    { "GetLocaleName", _wrap_LocaleReader_GetLocaleName},
    {0,0}
};
static swig_lua_method swig_LocaleReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LocaleReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LocaleReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LocaleReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LocaleReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LocaleReader_Sf_SwigStatic = {
    "LocaleReader",
    swig_LocaleReader_Sf_SwigStatic_methods,
    swig_LocaleReader_Sf_SwigStatic_attributes,
    swig_LocaleReader_Sf_SwigStatic_constants,
    swig_LocaleReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LocaleReader_bases[] = {0};
static const char *swig_LocaleReader_base_names[] = {0};
static swig_lua_class _wrap_class_LocaleReader = { "LocaleReader", "LocaleReader", &SWIGTYPE_p_LocaleReader,_proxy__wrap_new_LocaleReader, swig_delete_LocaleReader, swig_LocaleReader_methods, swig_LocaleReader_attributes, &swig_LocaleReader_Sf_SwigStatic, swig_LocaleReader_meta, swig_LocaleReader_bases, swig_LocaleReader_base_names };

static int _wrap_new_IONode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  size_t arg2 ;
  cstr arg3 = (cstr) 0 ;
  bool arg4 ;
  IONode *result = 0 ;
  
  SWIG_check_num_args("IONode::IONode",4,4)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("IONode::IONode",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IONode::IONode",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("IONode::IONode",3,"cstr");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("IONode::IONode",4,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (cstr)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (IONode *)new IONode(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IONode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IONode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  size_t arg2 ;
  cstr arg3 = (cstr) 0 ;
  IONode *result = 0 ;
  
  SWIG_check_num_args("IONode::IONode",3,3)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("IONode::IONode",1,"bool");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IONode::IONode",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("IONode::IONode",3,"cstr");
  arg1 = (lua_toboolean(L, 1)!=0);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (cstr)lua_tostring(L, 3);
  result = (IONode *)new IONode(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IONode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IONode(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_IONode__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IONode__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IONode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IONode::IONode(bool,size_t,cstr,bool)\n"
    "    IONode::IONode(bool,size_t,cstr)\n");
  lua_error(L);return 0;
}


static int _wrap_IONode_DecCount(lua_State* L) {
  int SWIG_arg = 0;
  IONode *arg1 = (IONode *) 0 ;
  
  SWIG_check_num_args("IONode::DecCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IONode::DecCount",1,"IONode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IONode,0))){
    SWIG_fail_ptr("IONode_DecCount",1,SWIGTYPE_p_IONode);
  }
  
  (arg1)->DecCount();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IONode_IncCount(lua_State* L) {
  int SWIG_arg = 0;
  IONode *arg1 = (IONode *) 0 ;
  
  SWIG_check_num_args("IONode::IncCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IONode::IncCount",1,"IONode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IONode,0))){
    SWIG_fail_ptr("IONode_IncCount",1,SWIGTYPE_p_IONode);
  }
  
  (arg1)->IncCount();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IONode_GetCount(lua_State* L) {
  int SWIG_arg = 0;
  IONode *arg1 = (IONode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("IONode::GetCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IONode::GetCount",1,"IONode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IONode,0))){
    SWIG_fail_ptr("IONode_GetCount",1,SWIGTYPE_p_IONode);
  }
  
  result = ((IONode const *)arg1)->GetCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IONode_GetID(lua_State* L) {
  int SWIG_arg = 0;
  IONode *arg1 = (IONode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("IONode::GetID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IONode::GetID",1,"IONode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IONode,0))){
    SWIG_fail_ptr("IONode_GetID",1,SWIGTYPE_p_IONode);
  }
  
  result = ((IONode const *)arg1)->GetID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IONode_GetPath(lua_State* L) {
  int SWIG_arg = 0;
  IONode *arg1 = (IONode *) 0 ;
  std::string result;
  
  SWIG_check_num_args("IONode::GetPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IONode::GetPath",1,"IONode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IONode,0))){
    SWIG_fail_ptr("IONode_GetPath",1,SWIGTYPE_p_IONode);
  }
  
  result = ((IONode const *)arg1)->GetPath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IONode_GetFile(lua_State* L) {
  int SWIG_arg = 0;
  IONode *arg1 = (IONode *) 0 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("IONode::GetFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IONode::GetFile",1,"IONode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IONode,0))){
    SWIG_fail_ptr("IONode_GetFile",1,SWIGTYPE_p_IONode);
  }
  
  result = (data_base *) &(arg1)->GetFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IONode_GetDataBase(lua_State* L) {
  int SWIG_arg = 0;
  IONode *arg1 = (IONode *) 0 ;
  DataBase *result = 0 ;
  
  SWIG_check_num_args("IONode::GetDataBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IONode::GetDataBase",1,"IONode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IONode,0))){
    SWIG_fail_ptr("IONode_GetDataBase",1,SWIGTYPE_p_IONode);
  }
  
  result = (DataBase *)(arg1)->GetDataBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IONode(void *obj) {
IONode *arg1 = (IONode *) obj;
delete arg1;
}
static int _proxy__wrap_new_IONode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IONode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IONode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IONode_methods[]= {
    { "DecCount", _wrap_IONode_DecCount},
    { "IncCount", _wrap_IONode_IncCount},
    { "GetCount", _wrap_IONode_GetCount},
    { "GetID", _wrap_IONode_GetID},
    { "GetPath", _wrap_IONode_GetPath},
    { "GetFile", _wrap_IONode_GetFile},
    { "GetDataBase", _wrap_IONode_GetDataBase},
    {0,0}
};
static swig_lua_method swig_IONode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IONode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IONode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IONode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IONode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IONode_Sf_SwigStatic = {
    "IONode",
    swig_IONode_Sf_SwigStatic_methods,
    swig_IONode_Sf_SwigStatic_attributes,
    swig_IONode_Sf_SwigStatic_constants,
    swig_IONode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IONode_bases[] = {0};
static const char *swig_IONode_base_names[] = {0};
static swig_lua_class _wrap_class_IONode = { "IONode", "IONode", &SWIGTYPE_p_IONode,_proxy__wrap_new_IONode, swig_delete_IONode, swig_IONode_methods, swig_IONode_attributes, &swig_IONode_Sf_SwigStatic, swig_IONode_meta, swig_IONode_bases, swig_IONode_base_names };

static int _wrap_new_IOManager(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  IOManager *result = 0 ;
  
  SWIG_check_num_args("IOManager::IOManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::IOManager",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_IOManager",1,SWIGTYPE_p_Game);
  }
  
  result = (IOManager *)new IOManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IOManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_initIOSys(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  
  SWIG_check_num_args("IOManager::initIOSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::initIOSys",1,"IOManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_initIOSys",1,SWIGTYPE_p_IOManager);
  }
  
  (arg1)->initIOSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_GetFile(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  size_t arg2 ;
  data_base *result = 0 ;
  
  SWIG_check_num_args("IOManager::GetFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::GetFile",1,"IOManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IOManager::GetFile",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_GetFile",1,SWIGTYPE_p_IOManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (data_base *) &(arg1)->GetFile(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_data_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_GetDataBase(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  size_t arg2 ;
  DataBase *result = 0 ;
  
  SWIG_check_num_args("IOManager::GetDataBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::GetDataBase",1,"IOManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IOManager::GetDataBase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_GetDataBase",1,SWIGTYPE_p_IOManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (DataBase *)(arg1)->GetDataBase(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_ExpandStringFromLocale(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("IOManager::ExpandStringFromLocale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::ExpandStringFromLocale",1,"IOManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("IOManager::ExpandStringFromLocale",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_ExpandStringFromLocale",1,SWIGTYPE_p_IOManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->ExpandStringFromLocale((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_RegisterFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  cstr arg2 = (cstr) 0 ;
  bool arg3 ;
  size_t result;
  
  SWIG_check_num_args("IOManager::RegisterFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::RegisterFile",1,"IOManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IOManager::RegisterFile",2,"cstr");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("IOManager::RegisterFile",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_RegisterFile",1,SWIGTYPE_p_IOManager);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (arg1)->RegisterFile(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_RegisterFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("IOManager::RegisterFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::RegisterFile",1,"IOManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IOManager::RegisterFile",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_RegisterFile",1,SWIGTYPE_p_IOManager);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->RegisterFile(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_RegisterFile(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IOManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IOManager_RegisterFile__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_IOManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_IOManager_RegisterFile__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IOManager_RegisterFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    IOManager::RegisterFile(cstr,bool)\n"
    "    IOManager::RegisterFile(cstr)\n");
  lua_error(L);return 0;
}


static int _wrap_IOManager_RegisterDataBase(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("IOManager::RegisterDataBase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::RegisterDataBase",1,"IOManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IOManager::RegisterDataBase",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_RegisterDataBase",1,SWIGTYPE_p_IOManager);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->RegisterDataBase(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_SetLocale(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("IOManager::SetLocale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::SetLocale",1,"IOManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("IOManager::SetLocale",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_SetLocale",1,SWIGTYPE_p_IOManager);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->SetLocale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_CloseFile(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("IOManager::CloseFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::CloseFile",1,"IOManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IOManager::CloseFile",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_CloseFile",1,SWIGTYPE_p_IOManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->CloseFile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IOManager_CloseDBConnection(lua_State* L) {
  int SWIG_arg = 0;
  IOManager *arg1 = (IOManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("IOManager::CloseDBConnection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IOManager::CloseDBConnection",1,"IOManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("IOManager::CloseDBConnection",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_IOManager,0))){
    SWIG_fail_ptr("IOManager_CloseDBConnection",1,SWIGTYPE_p_IOManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->CloseDBConnection(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOManager(void *obj) {
IOManager *arg1 = (IOManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOManager_methods[]= {
    { "initIOSys", _wrap_IOManager_initIOSys},
    { "GetFile", _wrap_IOManager_GetFile},
    { "GetDataBase", _wrap_IOManager_GetDataBase},
    { "ExpandStringFromLocale", _wrap_IOManager_ExpandStringFromLocale},
    { "RegisterFile", _wrap_IOManager_RegisterFile},
    { "RegisterDataBase", _wrap_IOManager_RegisterDataBase},
    { "SetLocale", _wrap_IOManager_SetLocale},
    { "CloseFile", _wrap_IOManager_CloseFile},
    { "CloseDBConnection", _wrap_IOManager_CloseDBConnection},
    {0,0}
};
static swig_lua_method swig_IOManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOManager_Sf_SwigStatic = {
    "IOManager",
    swig_IOManager_Sf_SwigStatic_methods,
    swig_IOManager_Sf_SwigStatic_attributes,
    swig_IOManager_Sf_SwigStatic_constants,
    swig_IOManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOManager_bases[] = {0};
static const char *swig_IOManager_base_names[] = {0};
static swig_lua_class _wrap_class_IOManager = { "IOManager", "IOManager", &SWIGTYPE_p_IOManager,_proxy__wrap_new_IOManager, swig_delete_IOManager, swig_IOManager_methods, swig_IOManager_attributes, &swig_IOManager_Sf_SwigStatic, swig_IOManager_meta, swig_IOManager_bases, swig_IOManager_base_names };

static int _wrap_Layer_layer_set(lua_State* L) {
  int SWIG_arg = 0;
  Layer *arg1 = (Layer *) 0 ;
  draw_base *arg2 = (draw_base *) 0 ;
  
  SWIG_check_num_args("Layer::layer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Layer::layer",1,"Layer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Layer::layer",2,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Layer,0))){
    SWIG_fail_ptr("Layer_layer_set",1,SWIGTYPE_p_Layer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Layer_layer_set",2,SWIGTYPE_p_draw_base);
  }
  
  if (arg1) (arg1)->layer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Layer_layer_get(lua_State* L) {
  int SWIG_arg = 0;
  Layer *arg1 = (Layer *) 0 ;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("Layer::layer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Layer::layer",1,"Layer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Layer,0))){
    SWIG_fail_ptr("Layer_layer_get",1,SWIGTYPE_p_Layer);
  }
  
  result = (draw_base *) ((arg1)->layer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Layer_id_set(lua_State* L) {
  int SWIG_arg = 0;
  Layer *arg1 = (Layer *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Layer::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Layer::id",1,"Layer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Layer::id",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Layer,0))){
    SWIG_fail_ptr("Layer_id_set",1,SWIGTYPE_p_Layer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Layer_id_get(lua_State* L) {
  int SWIG_arg = 0;
  Layer *arg1 = (Layer *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Layer::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Layer::id",1,"Layer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Layer,0))){
    SWIG_fail_ptr("Layer_id_get",1,SWIGTYPE_p_Layer);
  }
  
  result =  ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Layer_loc_set(lua_State* L) {
  int SWIG_arg = 0;
  Layer *arg1 = (Layer *) 0 ;
  math_point *arg2 = (math_point *) 0 ;
  
  SWIG_check_num_args("Layer::loc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Layer::loc",1,"Layer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Layer::loc",2,"math_point *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Layer,0))){
    SWIG_fail_ptr("Layer_loc_set",1,SWIGTYPE_p_Layer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("Layer_loc_set",2,SWIGTYPE_p_math_point);
  }
  
  if (arg1) (arg1)->loc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Layer_loc_get(lua_State* L) {
  int SWIG_arg = 0;
  Layer *arg1 = (Layer *) 0 ;
  math_point *result = 0 ;
  
  SWIG_check_num_args("Layer::loc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Layer::loc",1,"Layer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Layer,0))){
    SWIG_fail_ptr("Layer_loc_get",1,SWIGTYPE_p_Layer);
  }
  
  result = (math_point *)& ((arg1)->loc);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math_point,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Layer(lua_State* L) {
  int SWIG_arg = 0;
  cstr arg1 = (cstr) 0 ;
  Game *arg2 = (Game *) 0 ;
  size_t arg3 ;
  Layer *result = 0 ;
  
  SWIG_check_num_args("Layer::Layer",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Layer::Layer",1,"cstr");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Layer::Layer",2,"Game *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Layer::Layer",3,"size_t");
  arg1 = (cstr)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Layer",2,SWIGTYPE_p_Game);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (Layer *)new Layer(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Layer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Layer(void *obj) {
Layer *arg1 = (Layer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Layer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Layer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Layer_attributes[] = {
    { "layer", _wrap_Layer_layer_get, _wrap_Layer_layer_set },
    { "id", _wrap_Layer_id_get, _wrap_Layer_id_set },
    { "loc", _wrap_Layer_loc_get, _wrap_Layer_loc_set },
    {0,0,0}
};
static swig_lua_method swig_Layer_methods[]= {
    {0,0}
};
static swig_lua_method swig_Layer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Layer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Layer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Layer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Layer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Layer_Sf_SwigStatic = {
    "Layer",
    swig_Layer_Sf_SwigStatic_methods,
    swig_Layer_Sf_SwigStatic_attributes,
    swig_Layer_Sf_SwigStatic_constants,
    swig_Layer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Layer_bases[] = {0};
static const char *swig_Layer_base_names[] = {0};
static swig_lua_class _wrap_class_Layer = { "Layer", "Layer", &SWIGTYPE_p_Layer,_proxy__wrap_new_Layer, swig_delete_Layer, swig_Layer_methods, swig_Layer_attributes, &swig_Layer_Sf_SwigStatic, swig_Layer_meta, swig_Layer_bases, swig_Layer_base_names };

static int _wrap_new_LayerSystem(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  LayerSystem *result = 0 ;
  
  SWIG_check_num_args("LayerSystem::LayerSystem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::LayerSystem",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_LayerSystem",1,SWIGTYPE_p_Game);
  }
  
  result = (LayerSystem *)new LayerSystem(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LayerSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LayerSystem_initLayerSys(lua_State* L) {
  int SWIG_arg = 0;
  LayerSystem *arg1 = (LayerSystem *) 0 ;
  
  SWIG_check_num_args("LayerSystem::initLayerSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::initLayerSys",1,"LayerSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LayerSystem,0))){
    SWIG_fail_ptr("LayerSystem_initLayerSys",1,SWIGTYPE_p_LayerSystem);
  }
  
  (arg1)->initLayerSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LayerSystem_AddLayer(lua_State* L) {
  int SWIG_arg = 0;
  LayerSystem *arg1 = (LayerSystem *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("LayerSystem::AddLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::AddLayer",1,"LayerSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LayerSystem::AddLayer",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LayerSystem,0))){
    SWIG_fail_ptr("LayerSystem_AddLayer",1,SWIGTYPE_p_LayerSystem);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->AddLayer(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LayerSystem_AddLayerSet(lua_State* L) {
  int SWIG_arg = 0;
  LayerSystem *arg1 = (LayerSystem *) 0 ;
  cstr arg2 = (cstr) 0 ;
  SwigValueWrapper< std::vector< size_t > > result;
  
  SWIG_check_num_args("LayerSystem::AddLayerSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::AddLayerSet",1,"LayerSystem *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("LayerSystem::AddLayerSet",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LayerSystem,0))){
    SWIG_fail_ptr("LayerSystem_AddLayerSet",1,SWIGTYPE_p_LayerSystem);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->AddLayerSet(arg2);
  {
    std::vector< size_t > * resultptr = new std::vector< size_t >((const std::vector< size_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_size_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LayerSystem_DeleteLayer(lua_State* L) {
  int SWIG_arg = 0;
  LayerSystem *arg1 = (LayerSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("LayerSystem::DeleteLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::DeleteLayer",1,"LayerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LayerSystem::DeleteLayer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LayerSystem,0))){
    SWIG_fail_ptr("LayerSystem_DeleteLayer",1,SWIGTYPE_p_LayerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->DeleteLayer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LayerSystem_DeleteAllLayers(lua_State* L) {
  int SWIG_arg = 0;
  LayerSystem *arg1 = (LayerSystem *) 0 ;
  
  SWIG_check_num_args("LayerSystem::DeleteAllLayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::DeleteAllLayers",1,"LayerSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LayerSystem,0))){
    SWIG_fail_ptr("LayerSystem_DeleteAllLayers",1,SWIGTYPE_p_LayerSystem);
  }
  
  (arg1)->DeleteAllLayers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LayerSystem_GetLayer(lua_State* L) {
  int SWIG_arg = 0;
  LayerSystem *arg1 = (LayerSystem *) 0 ;
  size_t arg2 ;
  Layer *result = 0 ;
  
  SWIG_check_num_args("LayerSystem::GetLayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::GetLayer",1,"LayerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LayerSystem::GetLayer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LayerSystem,0))){
    SWIG_fail_ptr("LayerSystem_GetLayer",1,SWIGTYPE_p_LayerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Layer *) &(arg1)->GetLayer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Layer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LayerSystem_GetLayerCount(lua_State* L) {
  int SWIG_arg = 0;
  LayerSystem *arg1 = (LayerSystem *) 0 ;
  size_t result;
  
  SWIG_check_num_args("LayerSystem::GetLayerCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::GetLayerCount",1,"LayerSystem const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LayerSystem,0))){
    SWIG_fail_ptr("LayerSystem_GetLayerCount",1,SWIGTYPE_p_LayerSystem);
  }
  
  result = ((LayerSystem const *)arg1)->GetLayerCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LayerSystem_DrawLayers(lua_State* L) {
  int SWIG_arg = 0;
  LayerSystem *arg1 = (LayerSystem *) 0 ;
  
  SWIG_check_num_args("LayerSystem::DrawLayers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LayerSystem::DrawLayers",1,"LayerSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LayerSystem,0))){
    SWIG_fail_ptr("LayerSystem_DrawLayers",1,SWIGTYPE_p_LayerSystem);
  }
  
  (arg1)->DrawLayers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LayerSystem(void *obj) {
LayerSystem *arg1 = (LayerSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_LayerSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LayerSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LayerSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LayerSystem_methods[]= {
    { "initLayerSys", _wrap_LayerSystem_initLayerSys},
    { "AddLayer", _wrap_LayerSystem_AddLayer},
    { "AddLayerSet", _wrap_LayerSystem_AddLayerSet},
    { "DeleteLayer", _wrap_LayerSystem_DeleteLayer},
    { "DeleteAllLayers", _wrap_LayerSystem_DeleteAllLayers},
    { "GetLayer", _wrap_LayerSystem_GetLayer},
    { "GetLayerCount", _wrap_LayerSystem_GetLayerCount},
    { "DrawLayers", _wrap_LayerSystem_DrawLayers},
    {0,0}
};
static swig_lua_method swig_LayerSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LayerSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LayerSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LayerSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LayerSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LayerSystem_Sf_SwigStatic = {
    "LayerSystem",
    swig_LayerSystem_Sf_SwigStatic_methods,
    swig_LayerSystem_Sf_SwigStatic_attributes,
    swig_LayerSystem_Sf_SwigStatic_constants,
    swig_LayerSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LayerSystem_bases[] = {0};
static const char *swig_LayerSystem_base_names[] = {0};
static swig_lua_class _wrap_class_LayerSystem = { "LayerSystem", "LayerSystem", &SWIGTYPE_p_LayerSystem,_proxy__wrap_new_LayerSystem, swig_delete_LayerSystem, swig_LayerSystem_methods, swig_LayerSystem_attributes, &swig_LayerSystem_Sf_SwigStatic, swig_LayerSystem_meta, swig_LayerSystem_bases, swig_LayerSystem_base_names };

static int _wrap_ExpansionItem_id_set(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = (ExpansionItem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ExpansionItem::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionItem::id",1,"ExpansionItem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ExpansionItem::id",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("ExpansionItem_id_set",1,SWIGTYPE_p_ExpansionItem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionItem_id_get(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = (ExpansionItem *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ExpansionItem::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionItem::id",1,"ExpansionItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("ExpansionItem_id_get",1,SWIGTYPE_p_ExpansionItem);
  }
  
  result =  ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionItem_name_set(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = (ExpansionItem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ExpansionItem::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionItem::name",1,"ExpansionItem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ExpansionItem::name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("ExpansionItem_name_set",1,SWIGTYPE_p_ExpansionItem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionItem_name_get(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = (ExpansionItem *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ExpansionItem::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionItem::name",1,"ExpansionItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("ExpansionItem_name_get",1,SWIGTYPE_p_ExpansionItem);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionItem_path_set(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = (ExpansionItem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ExpansionItem::path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionItem::path",1,"ExpansionItem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ExpansionItem::path",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("ExpansionItem_path_set",1,SWIGTYPE_p_ExpansionItem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->path = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionItem_path_get(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = (ExpansionItem *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ExpansionItem::path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionItem::path",1,"ExpansionItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("ExpansionItem_path_get",1,SWIGTYPE_p_ExpansionItem);
  }
  
  result = (std::string *) & ((arg1)->path);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionItem_description_set(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = (ExpansionItem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ExpansionItem::description",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionItem::description",1,"ExpansionItem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ExpansionItem::description",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("ExpansionItem_description_set",1,SWIGTYPE_p_ExpansionItem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->description = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionItem_description_get(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = (ExpansionItem *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ExpansionItem::description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionItem::description",1,"ExpansionItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("ExpansionItem_description_get",1,SWIGTYPE_p_ExpansionItem);
  }
  
  result = (std::string *) & ((arg1)->description);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExpansionItem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  ExpansionItem *result = 0 ;
  
  SWIG_check_num_args("ExpansionItem::ExpansionItem",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ExpansionItem::ExpansionItem",1,"size_t");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ExpansionItem::ExpansionItem",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ExpansionItem::ExpansionItem",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ExpansionItem::ExpansionItem",4,"std::string const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (ExpansionItem *)new ExpansionItem(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ExpansionItem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExpansionItem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *arg1 = 0 ;
  ExpansionItem *result = 0 ;
  
  SWIG_check_num_args("ExpansionItem::ExpansionItem",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ExpansionItem::ExpansionItem",1,"ExpansionItem const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionItem,0))){
    SWIG_fail_ptr("new_ExpansionItem",1,SWIGTYPE_p_ExpansionItem);
  }
  
  result = (ExpansionItem *)new ExpansionItem((ExpansionItem const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ExpansionItem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExpansionItem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionItem *result = 0 ;
  
  SWIG_check_num_args("ExpansionItem::ExpansionItem",0,0)
  result = (ExpansionItem *)new ExpansionItem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ExpansionItem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExpansionItem(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ExpansionItem__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ExpansionItem, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ExpansionItem__SWIG_1(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ExpansionItem__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ExpansionItem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ExpansionItem::ExpansionItem(size_t,std::string const &,std::string const &,std::string const &)\n"
    "    ExpansionItem::ExpansionItem(ExpansionItem const &)\n"
    "    ExpansionItem::ExpansionItem()\n");
  lua_error(L);return 0;
}


static void swig_delete_ExpansionItem(void *obj) {
ExpansionItem *arg1 = (ExpansionItem *) obj;
delete arg1;
}
static int _proxy__wrap_new_ExpansionItem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ExpansionItem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ExpansionItem_attributes[] = {
    { "id", _wrap_ExpansionItem_id_get, _wrap_ExpansionItem_id_set },
    { "name", _wrap_ExpansionItem_name_get, _wrap_ExpansionItem_name_set },
    { "path", _wrap_ExpansionItem_path_get, _wrap_ExpansionItem_path_set },
    { "description", _wrap_ExpansionItem_description_get, _wrap_ExpansionItem_description_set },
    {0,0,0}
};
static swig_lua_method swig_ExpansionItem_methods[]= {
    {0,0}
};
static swig_lua_method swig_ExpansionItem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExpansionItem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExpansionItem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExpansionItem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExpansionItem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExpansionItem_Sf_SwigStatic = {
    "ExpansionItem",
    swig_ExpansionItem_Sf_SwigStatic_methods,
    swig_ExpansionItem_Sf_SwigStatic_attributes,
    swig_ExpansionItem_Sf_SwigStatic_constants,
    swig_ExpansionItem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExpansionItem_bases[] = {0};
static const char *swig_ExpansionItem_base_names[] = {0};
static swig_lua_class _wrap_class_ExpansionItem = { "ExpansionItem", "ExpansionItem", &SWIGTYPE_p_ExpansionItem,_proxy__wrap_new_ExpansionItem, swig_delete_ExpansionItem, swig_ExpansionItem_methods, swig_ExpansionItem_attributes, &swig_ExpansionItem_Sf_SwigStatic, swig_ExpansionItem_meta, swig_ExpansionItem_bases, swig_ExpansionItem_base_names };

static int _wrap_LocaleItem_name_set(lua_State* L) {
  int SWIG_arg = 0;
  LocaleItem *arg1 = (LocaleItem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("LocaleItem::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleItem::name",1,"LocaleItem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LocaleItem::name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleItem,0))){
    SWIG_fail_ptr("LocaleItem_name_set",1,SWIGTYPE_p_LocaleItem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleItem_name_get(lua_State* L) {
  int SWIG_arg = 0;
  LocaleItem *arg1 = (LocaleItem *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("LocaleItem::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleItem::name",1,"LocaleItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleItem,0))){
    SWIG_fail_ptr("LocaleItem_name_get",1,SWIGTYPE_p_LocaleItem);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleItem_path_set(lua_State* L) {
  int SWIG_arg = 0;
  LocaleItem *arg1 = (LocaleItem *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("LocaleItem::path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleItem::path",1,"LocaleItem *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LocaleItem::path",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleItem,0))){
    SWIG_fail_ptr("LocaleItem_path_set",1,SWIGTYPE_p_LocaleItem);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->path = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleItem_path_get(lua_State* L) {
  int SWIG_arg = 0;
  LocaleItem *arg1 = (LocaleItem *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("LocaleItem::path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleItem::path",1,"LocaleItem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleItem,0))){
    SWIG_fail_ptr("LocaleItem_path_get",1,SWIGTYPE_p_LocaleItem);
  }
  
  result = (std::string *) & ((arg1)->path);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LocaleItem(lua_State* L) {
  int SWIG_arg = 0;
  LocaleItem *result = 0 ;
  
  SWIG_check_num_args("LocaleItem::LocaleItem",0,0)
  result = (LocaleItem *)new LocaleItem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LocaleItem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LocaleItem(void *obj) {
LocaleItem *arg1 = (LocaleItem *) obj;
delete arg1;
}
static int _proxy__wrap_new_LocaleItem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LocaleItem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LocaleItem_attributes[] = {
    { "name", _wrap_LocaleItem_name_get, _wrap_LocaleItem_name_set },
    { "path", _wrap_LocaleItem_path_get, _wrap_LocaleItem_path_set },
    {0,0,0}
};
static swig_lua_method swig_LocaleItem_methods[]= {
    {0,0}
};
static swig_lua_method swig_LocaleItem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LocaleItem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LocaleItem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LocaleItem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LocaleItem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LocaleItem_Sf_SwigStatic = {
    "LocaleItem",
    swig_LocaleItem_Sf_SwigStatic_methods,
    swig_LocaleItem_Sf_SwigStatic_attributes,
    swig_LocaleItem_Sf_SwigStatic_constants,
    swig_LocaleItem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LocaleItem_bases[] = {0};
static const char *swig_LocaleItem_base_names[] = {0};
static swig_lua_class _wrap_class_LocaleItem = { "LocaleItem", "LocaleItem", &SWIGTYPE_p_LocaleItem,_proxy__wrap_new_LocaleItem, swig_delete_LocaleItem, swig_LocaleItem_methods, swig_LocaleItem_attributes, &swig_LocaleItem_Sf_SwigStatic, swig_LocaleItem_meta, swig_LocaleItem_bases, swig_LocaleItem_base_names };

static int _wrap_ExpansionInfo_LoadExpansionInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *arg1 = (ExpansionInfo *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("ExpansionInfo::LoadExpansionInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionInfo::LoadExpansionInfo",1,"ExpansionInfo *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ExpansionInfo::LoadExpansionInfo",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionInfo,0))){
    SWIG_fail_ptr("ExpansionInfo_LoadExpansionInfo",1,SWIGTYPE_p_ExpansionInfo);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->LoadExpansionInfo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionInfo_LoadExpansionInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *arg1 = (ExpansionInfo *) 0 ;
  DataBase *arg2 = (DataBase *) 0 ;
  
  SWIG_check_num_args("ExpansionInfo::LoadExpansionInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionInfo::LoadExpansionInfo",1,"ExpansionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ExpansionInfo::LoadExpansionInfo",2,"DataBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionInfo,0))){
    SWIG_fail_ptr("ExpansionInfo_LoadExpansionInfo",1,SWIGTYPE_p_ExpansionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("ExpansionInfo_LoadExpansionInfo",2,SWIGTYPE_p_DataBase);
  }
  
  (arg1)->LoadExpansionInfo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionInfo_LoadExpansionInfo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ExpansionInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DataBase, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ExpansionInfo_LoadExpansionInfo__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ExpansionInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ExpansionInfo_LoadExpansionInfo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ExpansionInfo_LoadExpansionInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ExpansionInfo::LoadExpansionInfo(cstr)\n"
    "    ExpansionInfo::LoadExpansionInfo(DataBase *)\n");
  lua_error(L);return 0;
}


static int _wrap_ExpansionInfo_GetExpansionName(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *arg1 = (ExpansionInfo *) 0 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("ExpansionInfo::GetExpansionName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionInfo::GetExpansionName",1,"ExpansionInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ExpansionInfo::GetExpansionName",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionInfo,0))){
    SWIG_fail_ptr("ExpansionInfo_GetExpansionName",1,SWIGTYPE_p_ExpansionInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((ExpansionInfo const *)arg1)->GetExpansionName(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionInfo_GetExpansionPath(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *arg1 = (ExpansionInfo *) 0 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("ExpansionInfo::GetExpansionPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionInfo::GetExpansionPath",1,"ExpansionInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ExpansionInfo::GetExpansionPath",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionInfo,0))){
    SWIG_fail_ptr("ExpansionInfo_GetExpansionPath",1,SWIGTYPE_p_ExpansionInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((ExpansionInfo const *)arg1)->GetExpansionPath(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionInfo_GetExpansionDescription(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *arg1 = (ExpansionInfo *) 0 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("ExpansionInfo::GetExpansionDescription",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionInfo::GetExpansionDescription",1,"ExpansionInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ExpansionInfo::GetExpansionDescription",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionInfo,0))){
    SWIG_fail_ptr("ExpansionInfo_GetExpansionDescription",1,SWIGTYPE_p_ExpansionInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((ExpansionInfo const *)arg1)->GetExpansionDescription(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionInfo_GenerateExpansionID(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *arg1 = (ExpansionInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("ExpansionInfo::GenerateExpansionID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionInfo::GenerateExpansionID",1,"ExpansionInfo const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ExpansionInfo::GenerateExpansionID",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionInfo,0))){
    SWIG_fail_ptr("ExpansionInfo_GenerateExpansionID",1,SWIGTYPE_p_ExpansionInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((ExpansionInfo const *)arg1)->GenerateExpansionID((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionInfo_GetExpansionCount(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *arg1 = (ExpansionInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ExpansionInfo::GetExpansionCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionInfo::GetExpansionCount",1,"ExpansionInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionInfo,0))){
    SWIG_fail_ptr("ExpansionInfo_GetExpansionCount",1,SWIGTYPE_p_ExpansionInfo);
  }
  
  result = ((ExpansionInfo const *)arg1)->GetExpansionCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExpansionInfo_INVALID_get(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *arg1 = (ExpansionInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ExpansionInfo::INVALID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ExpansionInfo::INVALID",1,"ExpansionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ExpansionInfo,0))){
    SWIG_fail_ptr("ExpansionInfo_INVALID_get",1,SWIGTYPE_p_ExpansionInfo);
  }
  
  result = (std::string *) & ((arg1)->INVALID);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ExpansionInfo(lua_State* L) {
  int SWIG_arg = 0;
  ExpansionInfo *result = 0 ;
  
  SWIG_check_num_args("ExpansionInfo::ExpansionInfo",0,0)
  result = (ExpansionInfo *)new ExpansionInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ExpansionInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExpansionInfo(void *obj) {
ExpansionInfo *arg1 = (ExpansionInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ExpansionInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ExpansionInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ExpansionInfo_attributes[] = {
    { "INVALID", _wrap_ExpansionInfo_INVALID_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_ExpansionInfo_methods[]= {
    { "LoadExpansionInfo", _wrap_ExpansionInfo_LoadExpansionInfo},
    { "GetExpansionName", _wrap_ExpansionInfo_GetExpansionName},
    { "GetExpansionPath", _wrap_ExpansionInfo_GetExpansionPath},
    { "GetExpansionDescription", _wrap_ExpansionInfo_GetExpansionDescription},
    { "GenerateExpansionID", _wrap_ExpansionInfo_GenerateExpansionID},
    { "GetExpansionCount", _wrap_ExpansionInfo_GetExpansionCount},
    {0,0}
};
static swig_lua_method swig_ExpansionInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExpansionInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExpansionInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExpansionInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExpansionInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExpansionInfo_Sf_SwigStatic = {
    "ExpansionInfo",
    swig_ExpansionInfo_Sf_SwigStatic_methods,
    swig_ExpansionInfo_Sf_SwigStatic_attributes,
    swig_ExpansionInfo_Sf_SwigStatic_constants,
    swig_ExpansionInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExpansionInfo_bases[] = {0};
static const char *swig_ExpansionInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ExpansionInfo = { "ExpansionInfo", "ExpansionInfo", &SWIGTYPE_p_ExpansionInfo,_proxy__wrap_new_ExpansionInfo, swig_delete_ExpansionInfo, swig_ExpansionInfo_methods, swig_ExpansionInfo_attributes, &swig_ExpansionInfo_Sf_SwigStatic, swig_ExpansionInfo_meta, swig_ExpansionInfo_bases, swig_ExpansionInfo_base_names };

static int _wrap_LocaleInfo_LoadLocaleListFromLoc(lua_State* L) {
  int SWIG_arg = 0;
  LocaleInfo *arg1 = (LocaleInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("LocaleInfo::LoadLocaleListFromLoc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleInfo::LoadLocaleListFromLoc",1,"LocaleInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LocaleInfo::LoadLocaleListFromLoc",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleInfo,0))){
    SWIG_fail_ptr("LocaleInfo_LoadLocaleListFromLoc",1,SWIGTYPE_p_LocaleInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->LoadLocaleListFromLoc((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleInfo_LoadLocaleListFromDB(lua_State* L) {
  int SWIG_arg = 0;
  LocaleInfo *arg1 = (LocaleInfo *) 0 ;
  DataBase *arg2 = (DataBase *) 0 ;
  
  SWIG_check_num_args("LocaleInfo::LoadLocaleListFromDB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleInfo::LoadLocaleListFromDB",1,"LocaleInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LocaleInfo::LoadLocaleListFromDB",2,"DataBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleInfo,0))){
    SWIG_fail_ptr("LocaleInfo_LoadLocaleListFromDB",1,SWIGTYPE_p_LocaleInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DataBase,0))){
    SWIG_fail_ptr("LocaleInfo_LoadLocaleListFromDB",2,SWIGTYPE_p_DataBase);
  }
  
  (arg1)->LoadLocaleListFromDB(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleInfo_AddLocaleToList(lua_State* L) {
  int SWIG_arg = 0;
  LocaleInfo *arg1 = (LocaleInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("LocaleInfo::AddLocaleToList",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleInfo::AddLocaleToList",1,"LocaleInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LocaleInfo::AddLocaleToList",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("LocaleInfo::AddLocaleToList",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleInfo,0))){
    SWIG_fail_ptr("LocaleInfo_AddLocaleToList",1,SWIGTYPE_p_LocaleInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->AddLocaleToList((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleInfo_GetLocaleInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  LocaleInfo *arg1 = (LocaleInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  LocaleItem result;
  
  SWIG_check_num_args("LocaleInfo::GetLocaleInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleInfo::GetLocaleInfo",1,"LocaleInfo const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("LocaleInfo::GetLocaleInfo",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleInfo,0))){
    SWIG_fail_ptr("LocaleInfo_GetLocaleInfo",1,SWIGTYPE_p_LocaleInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((LocaleInfo const *)arg1)->GetLocaleInfo((std::string const &)*arg2);
  {
    LocaleItem * resultptr = new LocaleItem((const LocaleItem &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LocaleItem,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleInfo_GetLocaleInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  LocaleInfo *arg1 = (LocaleInfo *) 0 ;
  size_t arg2 ;
  LocaleItem result;
  
  SWIG_check_num_args("LocaleInfo::GetLocaleInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleInfo::GetLocaleInfo",1,"LocaleInfo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LocaleInfo::GetLocaleInfo",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleInfo,0))){
    SWIG_fail_ptr("LocaleInfo_GetLocaleInfo",1,SWIGTYPE_p_LocaleInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((LocaleInfo const *)arg1)->GetLocaleInfo(arg2);
  {
    LocaleItem * resultptr = new LocaleItem((const LocaleItem &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LocaleItem,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleInfo_GetLocaleInfo(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LocaleInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_LocaleInfo_GetLocaleInfo__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_LocaleInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_LocaleInfo_GetLocaleInfo__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'LocaleInfo_GetLocaleInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    LocaleInfo::GetLocaleInfo(std::string const &) const\n"
    "    LocaleInfo::GetLocaleInfo(size_t) const\n");
  lua_error(L);return 0;
}


static int _wrap_LocaleInfo_GetSelectedLocale(lua_State* L) {
  int SWIG_arg = 0;
  LocaleInfo *arg1 = (LocaleInfo *) 0 ;
  LocaleItem result;
  
  SWIG_check_num_args("LocaleInfo::GetSelectedLocale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleInfo::GetSelectedLocale",1,"LocaleInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleInfo,0))){
    SWIG_fail_ptr("LocaleInfo_GetSelectedLocale",1,SWIGTYPE_p_LocaleInfo);
  }
  
  result = ((LocaleInfo const *)arg1)->GetSelectedLocale();
  {
    LocaleItem * resultptr = new LocaleItem((const LocaleItem &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LocaleItem,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LocaleInfo_GetLocaleItemCount(lua_State* L) {
  int SWIG_arg = 0;
  LocaleInfo *arg1 = (LocaleInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("LocaleInfo::GetLocaleItemCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LocaleInfo::GetLocaleItemCount",1,"LocaleInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LocaleInfo,0))){
    SWIG_fail_ptr("LocaleInfo_GetLocaleItemCount",1,SWIGTYPE_p_LocaleInfo);
  }
  
  result = ((LocaleInfo const *)arg1)->GetLocaleItemCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LocaleInfo(lua_State* L) {
  int SWIG_arg = 0;
  LocaleInfo *result = 0 ;
  
  SWIG_check_num_args("LocaleInfo::LocaleInfo",0,0)
  result = (LocaleInfo *)new LocaleInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LocaleInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LocaleInfo(void *obj) {
LocaleInfo *arg1 = (LocaleInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_LocaleInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LocaleInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LocaleInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LocaleInfo_methods[]= {
    { "LoadLocaleListFromLoc", _wrap_LocaleInfo_LoadLocaleListFromLoc},
    { "LoadLocaleListFromDB", _wrap_LocaleInfo_LoadLocaleListFromDB},
    { "AddLocaleToList", _wrap_LocaleInfo_AddLocaleToList},
    { "GetLocaleInfo", _wrap_LocaleInfo_GetLocaleInfo},
    { "GetSelectedLocale", _wrap_LocaleInfo_GetSelectedLocale},
    { "GetLocaleItemCount", _wrap_LocaleInfo_GetLocaleItemCount},
    {0,0}
};
static swig_lua_method swig_LocaleInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LocaleInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LocaleInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LocaleInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LocaleInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LocaleInfo_Sf_SwigStatic = {
    "LocaleInfo",
    swig_LocaleInfo_Sf_SwigStatic_methods,
    swig_LocaleInfo_Sf_SwigStatic_attributes,
    swig_LocaleInfo_Sf_SwigStatic_constants,
    swig_LocaleInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LocaleInfo_bases[] = {0};
static const char *swig_LocaleInfo_base_names[] = {0};
static swig_lua_class _wrap_class_LocaleInfo = { "LocaleInfo", "LocaleInfo", &SWIGTYPE_p_LocaleInfo,_proxy__wrap_new_LocaleInfo, swig_delete_LocaleInfo, swig_LocaleInfo_methods, swig_LocaleInfo_attributes, &swig_LocaleInfo_Sf_SwigStatic, swig_LocaleInfo_meta, swig_LocaleInfo_bases, swig_LocaleInfo_base_names };

static int _wrap_new_ScreenInfo(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *result = 0 ;
  
  SWIG_check_num_args("ScreenInfo::ScreenInfo",0,0)
  result = (ScreenInfo *)new ScreenInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ScreenInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  std::string *arg8 = 0 ;
  size_t arg9 ;
  std::string temp8 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",5,"size_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",6,"size_t");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",7,"size_t");
  if(!lua_isstring(L,8)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",8,"std::string const &");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",9,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (size_t)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (size_t)lua_tonumber(L, 7);
  temp8.assign(lua_tostring(L,8),lua_rawlen(L,8)); arg8=&temp8;
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  (arg1)->SetScreenInfo(arg2,arg3,arg4,arg5,arg6,arg7,(std::string const &)*arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  std::string *arg8 = 0 ;
  std::string temp8 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",5,"size_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",6,"size_t");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",7,"size_t");
  if(!lua_isstring(L,8)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",8,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (size_t)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (size_t)lua_tonumber(L, 7);
  temp8.assign(lua_tostring(L,8),lua_rawlen(L,8)); arg8=&temp8;
  (arg1)->SetScreenInfo(arg2,arg3,arg4,arg5,arg6,arg7,(std::string const &)*arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",5,"size_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",6,"size_t");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",7,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (size_t)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (size_t)lua_tonumber(L, 7);
  (arg1)->SetScreenInfo(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",5,"size_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",6,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (size_t)lua_tonumber(L, 6);
  (arg1)->SetScreenInfo(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",4,"size_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",5,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (size_t)lua_tonumber(L, 5);
  (arg1)->SetScreenInfo(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->SetScreenInfo(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->SetScreenInfo(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetScreenInfo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenInfo",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenInfo",1,SWIGTYPE_p_ScreenInfo);
  }
  
  (arg1)->SetScreenInfo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenInfo(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ScreenInfo_SetScreenInfo__SWIG_8(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScreenInfo_SetScreenInfo__SWIG_7(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ScreenInfo_SetScreenInfo__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ScreenInfo_SetScreenInfo__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ScreenInfo_SetScreenInfo__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ScreenInfo_SetScreenInfo__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ScreenInfo_SetScreenInfo__SWIG_2(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isstring(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_ScreenInfo_SetScreenInfo__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_ScreenInfo_SetScreenInfo__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ScreenInfo_SetScreenInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ScreenInfo::SetScreenInfo(size_t,size_t,size_t,size_t,size_t,size_t,std::string const &,size_t)\n"
    "    ScreenInfo::SetScreenInfo(size_t,size_t,size_t,size_t,size_t,size_t,std::string const &)\n"
    "    ScreenInfo::SetScreenInfo(size_t,size_t,size_t,size_t,size_t,size_t)\n"
    "    ScreenInfo::SetScreenInfo(size_t,size_t,size_t,size_t,size_t)\n"
    "    ScreenInfo::SetScreenInfo(size_t,size_t,size_t,size_t)\n"
    "    ScreenInfo::SetScreenInfo(size_t,size_t,size_t)\n"
    "    ScreenInfo::SetScreenInfo(size_t,size_t)\n"
    "    ScreenInfo::SetScreenInfo(size_t)\n"
    "    ScreenInfo::SetScreenInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_ScreenInfo_SetScreenLoc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenLoc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenLoc",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenLoc",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ScreenInfo::SetScreenLoc",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenLoc",1,SWIGTYPE_p_ScreenInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->SetScreenLoc(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenLoc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenLoc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenLoc",1,"ScreenInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenLoc",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenLoc",1,SWIGTYPE_p_ScreenInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetScreenLoc(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenLoc__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenLoc",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenLoc",1,SWIGTYPE_p_ScreenInfo);
  }
  
  (arg1)->SetScreenLoc();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SetScreenLoc(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ScreenInfo_SetScreenLoc__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScreenInfo_SetScreenLoc__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScreenInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ScreenInfo_SetScreenLoc__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ScreenInfo_SetScreenLoc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ScreenInfo::SetScreenLoc(int,int)\n"
    "    ScreenInfo::SetScreenLoc(int)\n"
    "    ScreenInfo::SetScreenLoc()\n");
  lua_error(L);return 0;
}


static int _wrap_ScreenInfo_SetScreenDeviceStr(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("ScreenInfo::SetScreenDeviceStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SetScreenDeviceStr",1,"ScreenInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ScreenInfo::SetScreenDeviceStr",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SetScreenDeviceStr",1,SWIGTYPE_p_ScreenInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SetScreenDeviceStr((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_AutoDetectVideoCard(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  
  SWIG_check_num_args("ScreenInfo::AutoDetectVideoCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::AutoDetectVideoCard",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_AutoDetectVideoCard",1,SWIGTYPE_p_ScreenInfo);
  }
  
  (arg1)->AutoDetectVideoCard();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetMaxFramesPerSec(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::GetMaxFramesPerSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetMaxFramesPerSec",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetMaxFramesPerSec",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetMaxFramesPerSec();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetScreenWidth(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::GetScreenWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetScreenWidth",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetScreenWidth",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetScreenWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetScreenHeight(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::GetScreenHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetScreenHeight",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetScreenHeight",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetScreenHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetScreenLoc(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  math_point *result = 0 ;
  
  SWIG_check_num_args("ScreenInfo::GetScreenLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetScreenLoc",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetScreenLoc",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = (math_point *) &(arg1)->GetScreenLoc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math_point,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetScreenBPP(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::GetScreenBPP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetScreenBPP",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetScreenBPP",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetScreenBPP();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetDisplayIndex(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::GetDisplayIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetDisplayIndex",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetDisplayIndex",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetDisplayIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetDisplayCount(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::GetDisplayCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetDisplayCount",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetDisplayCount",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetDisplayCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetScreenMode(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::GetScreenMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetScreenMode",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetScreenMode",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetScreenMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetRenderDriver(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ScreenInfo::GetRenderDriver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetRenderDriver",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetRenderDriver",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetRenderDriver();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_GetGraphicsDeviceName(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ScreenInfo::GetGraphicsDeviceName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::GetGraphicsDeviceName",1,"ScreenInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_GetGraphicsDeviceName",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = ((ScreenInfo const *)arg1)->GetGraphicsDeviceName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_FULLSCREEN_get(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::FULLSCREEN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::FULLSCREEN",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_FULLSCREEN_get",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = (size_t) ((arg1)->FULLSCREEN);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_RESIZABLE_get(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::RESIZABLE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::RESIZABLE",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_RESIZABLE_get",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = (size_t) ((arg1)->RESIZABLE);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_MAXIMIZED_get(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("ScreenInfo::MAXIMIZED",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::MAXIMIZED",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_MAXIMIZED_get",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = (size_t) ((arg1)->MAXIMIZED);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_OPENGL_get(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ScreenInfo::OPENGL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::OPENGL",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_OPENGL_get",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = (std::string *) & ((arg1)->OPENGL);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_DIRECT3D_get(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ScreenInfo::DIRECT3D",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::DIRECT3D",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_DIRECT3D_get",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = (std::string *) & ((arg1)->DIRECT3D);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScreenInfo_SOFTWARE_get(lua_State* L) {
  int SWIG_arg = 0;
  ScreenInfo *arg1 = (ScreenInfo *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("ScreenInfo::SOFTWARE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScreenInfo::SOFTWARE",1,"ScreenInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScreenInfo,0))){
    SWIG_fail_ptr("ScreenInfo_SOFTWARE_get",1,SWIGTYPE_p_ScreenInfo);
  }
  
  result = (std::string *) & ((arg1)->SOFTWARE);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScreenInfo(void *obj) {
ScreenInfo *arg1 = (ScreenInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScreenInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScreenInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScreenInfo_attributes[] = {
    { "FULLSCREEN", _wrap_ScreenInfo_FULLSCREEN_get, SWIG_Lua_set_immutable },
    { "RESIZABLE", _wrap_ScreenInfo_RESIZABLE_get, SWIG_Lua_set_immutable },
    { "MAXIMIZED", _wrap_ScreenInfo_MAXIMIZED_get, SWIG_Lua_set_immutable },
    { "OPENGL", _wrap_ScreenInfo_OPENGL_get, SWIG_Lua_set_immutable },
    { "DIRECT3D", _wrap_ScreenInfo_DIRECT3D_get, SWIG_Lua_set_immutable },
    { "SOFTWARE", _wrap_ScreenInfo_SOFTWARE_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_ScreenInfo_methods[]= {
    { "SetScreenInfo", _wrap_ScreenInfo_SetScreenInfo},
    { "SetScreenLoc", _wrap_ScreenInfo_SetScreenLoc},
    { "SetScreenDeviceStr", _wrap_ScreenInfo_SetScreenDeviceStr},
    { "AutoDetectVideoCard", _wrap_ScreenInfo_AutoDetectVideoCard},
    { "GetMaxFramesPerSec", _wrap_ScreenInfo_GetMaxFramesPerSec},
    { "GetScreenWidth", _wrap_ScreenInfo_GetScreenWidth},
    { "GetScreenHeight", _wrap_ScreenInfo_GetScreenHeight},
    { "GetScreenLoc", _wrap_ScreenInfo_GetScreenLoc},
    { "GetScreenBPP", _wrap_ScreenInfo_GetScreenBPP},
    { "GetDisplayIndex", _wrap_ScreenInfo_GetDisplayIndex},
    { "GetDisplayCount", _wrap_ScreenInfo_GetDisplayCount},
    { "GetScreenMode", _wrap_ScreenInfo_GetScreenMode},
    { "GetRenderDriver", _wrap_ScreenInfo_GetRenderDriver},
    { "GetGraphicsDeviceName", _wrap_ScreenInfo_GetGraphicsDeviceName},
    {0,0}
};
static swig_lua_method swig_ScreenInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScreenInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScreenInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScreenInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScreenInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScreenInfo_Sf_SwigStatic = {
    "ScreenInfo",
    swig_ScreenInfo_Sf_SwigStatic_methods,
    swig_ScreenInfo_Sf_SwigStatic_attributes,
    swig_ScreenInfo_Sf_SwigStatic_constants,
    swig_ScreenInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScreenInfo_bases[] = {0};
static const char *swig_ScreenInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ScreenInfo = { "ScreenInfo", "ScreenInfo", &SWIGTYPE_p_ScreenInfo,_proxy__wrap_new_ScreenInfo, swig_delete_ScreenInfo, swig_ScreenInfo_methods, swig_ScreenInfo_attributes, &swig_ScreenInfo_Sf_SwigStatic, swig_ScreenInfo_meta, swig_ScreenInfo_bases, swig_ScreenInfo_base_names };

static int _wrap_new_SoundInfo(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *result = 0 ;
  
  SWIG_check_num_args("SoundInfo::SoundInfo",0,0)
  result = (SoundInfo *)new SoundInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_SetSoundInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  
  SWIG_check_num_args("SoundInfo::SetSoundInfo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::SetSoundInfo",1,"SoundInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundInfo::SetSoundInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundInfo::SetSoundInfo",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SoundInfo::SetSoundInfo",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_SetSoundInfo",1,SWIGTYPE_p_SoundInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->SetSoundInfo(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_SetSoundInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundInfo::SetSoundInfo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::SetSoundInfo",1,"SoundInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundInfo::SetSoundInfo",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundInfo::SetSoundInfo",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_SetSoundInfo",1,SWIGTYPE_p_SoundInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->SetSoundInfo(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_SetSoundInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundInfo::SetSoundInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::SetSoundInfo",1,"SoundInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundInfo::SetSoundInfo",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_SetSoundInfo",1,SWIGTYPE_p_SoundInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetSoundInfo(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_SetSoundInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  
  SWIG_check_num_args("SoundInfo::SetSoundInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::SetSoundInfo",1,"SoundInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_SetSoundInfo",1,SWIGTYPE_p_SoundInfo);
  }
  
  (arg1)->SetSoundInfo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_SetSoundInfo(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_SoundInfo_SetSoundInfo__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundInfo_SetSoundInfo__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundInfo_SetSoundInfo__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SoundInfo_SetSoundInfo__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundInfo_SetSoundInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundInfo::SetSoundInfo(size_t,size_t,size_t)\n"
    "    SoundInfo::SetSoundInfo(size_t,size_t)\n"
    "    SoundInfo::SetSoundInfo(size_t)\n"
    "    SoundInfo::SetSoundInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_SoundInfo_SetSoundVolume(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundInfo::SetSoundVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::SetSoundVolume",1,"SoundInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundInfo::SetSoundVolume",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_SetSoundVolume",1,SWIGTYPE_p_SoundInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetSoundVolume(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_SetSoundDeviceStr(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("SoundInfo::SetSoundDeviceStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::SetSoundDeviceStr",1,"SoundInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("SoundInfo::SetSoundDeviceStr",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_SetSoundDeviceStr",1,SWIGTYPE_p_SoundInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SetSoundDeviceStr((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_AutoDetectSoundCard(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  
  SWIG_check_num_args("SoundInfo::AutoDetectSoundCard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::AutoDetectSoundCard",1,"SoundInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_AutoDetectSoundCard",1,SWIGTYPE_p_SoundInfo);
  }
  
  (arg1)->AutoDetectSoundCard();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_GetSoundFrequency(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundInfo::GetSoundFrequency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::GetSoundFrequency",1,"SoundInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_GetSoundFrequency",1,SWIGTYPE_p_SoundInfo);
  }
  
  result = ((SoundInfo const *)arg1)->GetSoundFrequency();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_GetSoundChannels(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundInfo::GetSoundChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::GetSoundChannels",1,"SoundInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_GetSoundChannels",1,SWIGTYPE_p_SoundInfo);
  }
  
  result = ((SoundInfo const *)arg1)->GetSoundChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_GetSoundChunkSize(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundInfo::GetSoundChunkSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::GetSoundChunkSize",1,"SoundInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_GetSoundChunkSize",1,SWIGTYPE_p_SoundInfo);
  }
  
  result = ((SoundInfo const *)arg1)->GetSoundChunkSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_GetMasterVolume(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundInfo::GetMasterVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::GetMasterVolume",1,"SoundInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_GetMasterVolume",1,SWIGTYPE_p_SoundInfo);
  }
  
  result = ((SoundInfo const *)arg1)->GetMasterVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundInfo_GetSoundDeviceName(lua_State* L) {
  int SWIG_arg = 0;
  SoundInfo *arg1 = (SoundInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("SoundInfo::GetSoundDeviceName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundInfo::GetSoundDeviceName",1,"SoundInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundInfo,0))){
    SWIG_fail_ptr("SoundInfo_GetSoundDeviceName",1,SWIGTYPE_p_SoundInfo);
  }
  
  result = ((SoundInfo const *)arg1)->GetSoundDeviceName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundInfo(void *obj) {
SoundInfo *arg1 = (SoundInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_SoundInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SoundInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SoundInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoundInfo_methods[]= {
    { "SetSoundInfo", _wrap_SoundInfo_SetSoundInfo},
    { "SetSoundVolume", _wrap_SoundInfo_SetSoundVolume},
    { "SetSoundDeviceStr", _wrap_SoundInfo_SetSoundDeviceStr},
    { "AutoDetectSoundCard", _wrap_SoundInfo_AutoDetectSoundCard},
    { "GetSoundFrequency", _wrap_SoundInfo_GetSoundFrequency},
    { "GetSoundChannels", _wrap_SoundInfo_GetSoundChannels},
    { "GetSoundChunkSize", _wrap_SoundInfo_GetSoundChunkSize},
    { "GetMasterVolume", _wrap_SoundInfo_GetMasterVolume},
    { "GetSoundDeviceName", _wrap_SoundInfo_GetSoundDeviceName},
    {0,0}
};
static swig_lua_method swig_SoundInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundInfo_Sf_SwigStatic = {
    "SoundInfo",
    swig_SoundInfo_Sf_SwigStatic_methods,
    swig_SoundInfo_Sf_SwigStatic_attributes,
    swig_SoundInfo_Sf_SwigStatic_constants,
    swig_SoundInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundInfo_bases[] = {0};
static const char *swig_SoundInfo_base_names[] = {0};
static swig_lua_class _wrap_class_SoundInfo = { "SoundInfo", "SoundInfo", &SWIGTYPE_p_SoundInfo,_proxy__wrap_new_SoundInfo, swig_delete_SoundInfo, swig_SoundInfo_methods, swig_SoundInfo_attributes, &swig_SoundInfo_Sf_SwigStatic, swig_SoundInfo_meta, swig_SoundInfo_bases, swig_SoundInfo_base_names };

static int _wrap_new_GameInfo(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *result = 0 ;
  
  SWIG_check_num_args("GameInfo::GameInfo",0,0)
  result = (GameInfo *)new GameInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GameInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  size_t arg12 ;
  size_t arg13 ;
  size_t arg14 ;
  size_t arg15 ;
  std::string *arg16 = 0 ;
  size_t arg17 ;
  size_t arg18 ;
  size_t arg19 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  std::string temp16 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",19,19)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("GameInfo::SetInfo",12,"size_t");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("GameInfo::SetInfo",13,"size_t");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("GameInfo::SetInfo",14,"size_t");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("GameInfo::SetInfo",15,"size_t");
  if(!lua_isstring(L,16)) SWIG_fail_arg("GameInfo::SetInfo",16,"std::string const &");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("GameInfo::SetInfo",17,"size_t");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("GameInfo::SetInfo",18,"size_t");
  if(!lua_isnumber(L,19)) SWIG_fail_arg("GameInfo::SetInfo",19,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  SWIG_contract_assert((lua_tonumber(L,12)>=0),"number must not be negative")
  arg12 = (size_t)lua_tonumber(L, 12);
  SWIG_contract_assert((lua_tonumber(L,13)>=0),"number must not be negative")
  arg13 = (size_t)lua_tonumber(L, 13);
  SWIG_contract_assert((lua_tonumber(L,14)>=0),"number must not be negative")
  arg14 = (size_t)lua_tonumber(L, 14);
  SWIG_contract_assert((lua_tonumber(L,15)>=0),"number must not be negative")
  arg15 = (size_t)lua_tonumber(L, 15);
  temp16.assign(lua_tostring(L,16),lua_rawlen(L,16)); arg16=&temp16;
  SWIG_contract_assert((lua_tonumber(L,17)>=0),"number must not be negative")
  arg17 = (size_t)lua_tonumber(L, 17);
  SWIG_contract_assert((lua_tonumber(L,18)>=0),"number must not be negative")
  arg18 = (size_t)lua_tonumber(L, 18);
  SWIG_contract_assert((lua_tonumber(L,19)>=0),"number must not be negative")
  arg19 = (size_t)lua_tonumber(L, 19);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,(std::string const &)*arg16,arg17,arg18,arg19);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  size_t arg12 ;
  size_t arg13 ;
  size_t arg14 ;
  size_t arg15 ;
  std::string *arg16 = 0 ;
  size_t arg17 ;
  size_t arg18 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  std::string temp16 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",18,18)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("GameInfo::SetInfo",12,"size_t");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("GameInfo::SetInfo",13,"size_t");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("GameInfo::SetInfo",14,"size_t");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("GameInfo::SetInfo",15,"size_t");
  if(!lua_isstring(L,16)) SWIG_fail_arg("GameInfo::SetInfo",16,"std::string const &");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("GameInfo::SetInfo",17,"size_t");
  if(!lua_isnumber(L,18)) SWIG_fail_arg("GameInfo::SetInfo",18,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  SWIG_contract_assert((lua_tonumber(L,12)>=0),"number must not be negative")
  arg12 = (size_t)lua_tonumber(L, 12);
  SWIG_contract_assert((lua_tonumber(L,13)>=0),"number must not be negative")
  arg13 = (size_t)lua_tonumber(L, 13);
  SWIG_contract_assert((lua_tonumber(L,14)>=0),"number must not be negative")
  arg14 = (size_t)lua_tonumber(L, 14);
  SWIG_contract_assert((lua_tonumber(L,15)>=0),"number must not be negative")
  arg15 = (size_t)lua_tonumber(L, 15);
  temp16.assign(lua_tostring(L,16),lua_rawlen(L,16)); arg16=&temp16;
  SWIG_contract_assert((lua_tonumber(L,17)>=0),"number must not be negative")
  arg17 = (size_t)lua_tonumber(L, 17);
  SWIG_contract_assert((lua_tonumber(L,18)>=0),"number must not be negative")
  arg18 = (size_t)lua_tonumber(L, 18);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,(std::string const &)*arg16,arg17,arg18);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  size_t arg12 ;
  size_t arg13 ;
  size_t arg14 ;
  size_t arg15 ;
  std::string *arg16 = 0 ;
  size_t arg17 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  std::string temp16 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("GameInfo::SetInfo",12,"size_t");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("GameInfo::SetInfo",13,"size_t");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("GameInfo::SetInfo",14,"size_t");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("GameInfo::SetInfo",15,"size_t");
  if(!lua_isstring(L,16)) SWIG_fail_arg("GameInfo::SetInfo",16,"std::string const &");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("GameInfo::SetInfo",17,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  SWIG_contract_assert((lua_tonumber(L,12)>=0),"number must not be negative")
  arg12 = (size_t)lua_tonumber(L, 12);
  SWIG_contract_assert((lua_tonumber(L,13)>=0),"number must not be negative")
  arg13 = (size_t)lua_tonumber(L, 13);
  SWIG_contract_assert((lua_tonumber(L,14)>=0),"number must not be negative")
  arg14 = (size_t)lua_tonumber(L, 14);
  SWIG_contract_assert((lua_tonumber(L,15)>=0),"number must not be negative")
  arg15 = (size_t)lua_tonumber(L, 15);
  temp16.assign(lua_tostring(L,16),lua_rawlen(L,16)); arg16=&temp16;
  SWIG_contract_assert((lua_tonumber(L,17)>=0),"number must not be negative")
  arg17 = (size_t)lua_tonumber(L, 17);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,(std::string const &)*arg16,arg17);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  size_t arg12 ;
  size_t arg13 ;
  size_t arg14 ;
  size_t arg15 ;
  std::string *arg16 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  std::string temp16 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",16,16)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("GameInfo::SetInfo",12,"size_t");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("GameInfo::SetInfo",13,"size_t");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("GameInfo::SetInfo",14,"size_t");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("GameInfo::SetInfo",15,"size_t");
  if(!lua_isstring(L,16)) SWIG_fail_arg("GameInfo::SetInfo",16,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  SWIG_contract_assert((lua_tonumber(L,12)>=0),"number must not be negative")
  arg12 = (size_t)lua_tonumber(L, 12);
  SWIG_contract_assert((lua_tonumber(L,13)>=0),"number must not be negative")
  arg13 = (size_t)lua_tonumber(L, 13);
  SWIG_contract_assert((lua_tonumber(L,14)>=0),"number must not be negative")
  arg14 = (size_t)lua_tonumber(L, 14);
  SWIG_contract_assert((lua_tonumber(L,15)>=0),"number must not be negative")
  arg15 = (size_t)lua_tonumber(L, 15);
  temp16.assign(lua_tostring(L,16),lua_rawlen(L,16)); arg16=&temp16;
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,(std::string const &)*arg16);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  size_t arg12 ;
  size_t arg13 ;
  size_t arg14 ;
  size_t arg15 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",15,15)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("GameInfo::SetInfo",12,"size_t");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("GameInfo::SetInfo",13,"size_t");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("GameInfo::SetInfo",14,"size_t");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("GameInfo::SetInfo",15,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  SWIG_contract_assert((lua_tonumber(L,12)>=0),"number must not be negative")
  arg12 = (size_t)lua_tonumber(L, 12);
  SWIG_contract_assert((lua_tonumber(L,13)>=0),"number must not be negative")
  arg13 = (size_t)lua_tonumber(L, 13);
  SWIG_contract_assert((lua_tonumber(L,14)>=0),"number must not be negative")
  arg14 = (size_t)lua_tonumber(L, 14);
  SWIG_contract_assert((lua_tonumber(L,15)>=0),"number must not be negative")
  arg15 = (size_t)lua_tonumber(L, 15);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  size_t arg12 ;
  size_t arg13 ;
  size_t arg14 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",14,14)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("GameInfo::SetInfo",12,"size_t");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("GameInfo::SetInfo",13,"size_t");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("GameInfo::SetInfo",14,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  SWIG_contract_assert((lua_tonumber(L,12)>=0),"number must not be negative")
  arg12 = (size_t)lua_tonumber(L, 12);
  SWIG_contract_assert((lua_tonumber(L,13)>=0),"number must not be negative")
  arg13 = (size_t)lua_tonumber(L, 13);
  SWIG_contract_assert((lua_tonumber(L,14)>=0),"number must not be negative")
  arg14 = (size_t)lua_tonumber(L, 14);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  size_t arg12 ;
  size_t arg13 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",13,13)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("GameInfo::SetInfo",12,"size_t");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("GameInfo::SetInfo",13,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  SWIG_contract_assert((lua_tonumber(L,12)>=0),"number must not be negative")
  arg12 = (size_t)lua_tonumber(L, 12);
  SWIG_contract_assert((lua_tonumber(L,13)>=0),"number must not be negative")
  arg13 = (size_t)lua_tonumber(L, 13);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  size_t arg12 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("GameInfo::SetInfo",12,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  SWIG_contract_assert((lua_tonumber(L,12)>=0),"number must not be negative")
  arg12 = (size_t)lua_tonumber(L, 12);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11,arg12);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  size_t arg11 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("GameInfo::SetInfo",11,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  SWIG_contract_assert((lua_tonumber(L,11)>=0),"number must not be negative")
  arg11 = (size_t)lua_tonumber(L, 11);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10,arg11);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  size_t arg10 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("GameInfo::SetInfo",10,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  SWIG_contract_assert((lua_tonumber(L,10)>=0),"number must not be negative")
  arg10 = (size_t)lua_tonumber(L, 10);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  size_t arg9 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("GameInfo::SetInfo",9,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  SWIG_contract_assert((lua_tonumber(L,9)>=0),"number must not be negative")
  arg9 = (size_t)lua_tonumber(L, 9);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  size_t arg8 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("GameInfo::SetInfo",8,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  SWIG_contract_assert((lua_tonumber(L,8)>=0),"number must not be negative")
  arg8 = (size_t)lua_tonumber(L, 8);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  std::string temp7 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  if(!lua_isstring(L,7)) SWIG_fail_arg("GameInfo::SetInfo",7,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  temp7.assign(lua_tostring(L,7),lua_rawlen(L,7)); arg7=&temp7;
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  std::string temp6 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  if(!lua_isstring(L,6)) SWIG_fail_arg("GameInfo::SetInfo",6,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  temp6.assign(lua_tostring(L,6),lua_rawlen(L,6)); arg6=&temp6;
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("GameInfo::SetInfo",5,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("GameInfo::SetInfo",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("GameInfo::SetInfo",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("GameInfo::SetInfo",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SetInfo((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  
  SWIG_check_num_args("GameInfo::SetInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::SetInfo",1,"GameInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_SetInfo",1,SWIGTYPE_p_GameInfo);
  }
  
  (arg1)->SetInfo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_SetInfo(lua_State* L) {
  int argc;
  int argv[20]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GameInfo_SetInfo__SWIG_18(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GameInfo_SetInfo__SWIG_17(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_GameInfo_SetInfo__SWIG_16(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_GameInfo_SetInfo__SWIG_15(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_GameInfo_SetInfo__SWIG_14(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                return _wrap_GameInfo_SetInfo__SWIG_13(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  return _wrap_GameInfo_SetInfo__SWIG_12(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_GameInfo_SetInfo__SWIG_11(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_GameInfo_SetInfo__SWIG_10(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_GameInfo_SetInfo__SWIG_9(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          return _wrap_GameInfo_SetInfo__SWIG_8(L);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            return _wrap_GameInfo_SetInfo__SWIG_7(L);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              return _wrap_GameInfo_SetInfo__SWIG_6(L);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                return _wrap_GameInfo_SetInfo__SWIG_5(L);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 15) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  return _wrap_GameInfo_SetInfo__SWIG_4(L);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isstring(L,argv[15]);
                                  }
                                  if (_v) {
                                    return _wrap_GameInfo_SetInfo__SWIG_3(L);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 17) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isstring(L,argv[15]);
                                  }
                                  if (_v) {
                                    {
                                      _v = lua_isnumber(L,argv[16]);
                                    }
                                    if (_v) {
                                      return _wrap_GameInfo_SetInfo__SWIG_2(L);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 18) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isstring(L,argv[15]);
                                  }
                                  if (_v) {
                                    {
                                      _v = lua_isnumber(L,argv[16]);
                                    }
                                    if (_v) {
                                      {
                                        _v = lua_isnumber(L,argv[17]);
                                      }
                                      if (_v) {
                                        return _wrap_GameInfo_SetInfo__SWIG_1(L);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 19) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GameInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isstring(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isstring(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isstring(L,argv[15]);
                                  }
                                  if (_v) {
                                    {
                                      _v = lua_isnumber(L,argv[16]);
                                    }
                                    if (_v) {
                                      {
                                        _v = lua_isnumber(L,argv[17]);
                                      }
                                      if (_v) {
                                        {
                                          _v = lua_isnumber(L,argv[18]);
                                        }
                                        if (_v) {
                                          return _wrap_GameInfo_SetInfo__SWIG_0(L);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GameInfo_SetInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t,size_t,size_t,size_t,size_t,std::string const &,size_t,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t,size_t,size_t,size_t,size_t,std::string const &,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t,size_t,size_t,size_t,size_t,std::string const &,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t,size_t,size_t,size_t,size_t,std::string const &)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t,size_t,size_t,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t,size_t,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,size_t)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &,std::string const &)\n"
    "    GameInfo::SetInfo(std::string const &,std::string const &)\n"
    "    GameInfo::SetInfo(std::string const &)\n"
    "    GameInfo::SetInfo()\n");
  lua_error(L);return 0;
}


static int _wrap_GameInfo_GetRootDirectory(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GameInfo::GetRootDirectory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::GetRootDirectory",1,"GameInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_GetRootDirectory",1,SWIGTYPE_p_GameInfo);
  }
  
  result = ((GameInfo const *)arg1)->GetRootDirectory();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_GetModName(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GameInfo::GetModName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::GetModName",1,"GameInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_GetModName",1,SWIGTYPE_p_GameInfo);
  }
  
  result = ((GameInfo const *)arg1)->GetModName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_GetGameName(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GameInfo::GetGameName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::GetGameName",1,"GameInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_GetGameName",1,SWIGTYPE_p_GameInfo);
  }
  
  result = ((GameInfo const *)arg1)->GetGameName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_GetIconLoc(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GameInfo::GetIconLoc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::GetIconLoc",1,"GameInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_GetIconLoc",1,SWIGTYPE_p_GameInfo);
  }
  
  result = ((GameInfo const *)arg1)->GetIconLoc();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_GetBlitLevels(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  size_t result;
  
  SWIG_check_num_args("GameInfo::GetBlitLevels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::GetBlitLevels",1,"GameInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_GetBlitLevels",1,SWIGTYPE_p_GameInfo);
  }
  
  result = ((GameInfo const *)arg1)->GetBlitLevels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GameInfo_GetRenderQuality(lua_State* L) {
  int SWIG_arg = 0;
  GameInfo *arg1 = (GameInfo *) 0 ;
  std::string result;
  
  SWIG_check_num_args("GameInfo::GetRenderQuality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GameInfo::GetRenderQuality",1,"GameInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GameInfo,0))){
    SWIG_fail_ptr("GameInfo_GetRenderQuality",1,SWIGTYPE_p_GameInfo);
  }
  
  result = ((GameInfo const *)arg1)->GetRenderQuality();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GameInfo(void *obj) {
GameInfo *arg1 = (GameInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_GameInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GameInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GameInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GameInfo_methods[]= {
    { "SetInfo", _wrap_GameInfo_SetInfo},
    { "GetRootDirectory", _wrap_GameInfo_GetRootDirectory},
    { "GetModName", _wrap_GameInfo_GetModName},
    { "GetGameName", _wrap_GameInfo_GetGameName},
    { "GetIconLoc", _wrap_GameInfo_GetIconLoc},
    { "GetBlitLevels", _wrap_GameInfo_GetBlitLevels},
    { "GetRenderQuality", _wrap_GameInfo_GetRenderQuality},
    {0,0}
};
static swig_lua_method swig_GameInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GameInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GameInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GameInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GameInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GameInfo_Sf_SwigStatic = {
    "GameInfo",
    swig_GameInfo_Sf_SwigStatic_methods,
    swig_GameInfo_Sf_SwigStatic_attributes,
    swig_GameInfo_Sf_SwigStatic_constants,
    swig_GameInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GameInfo_bases[] = {0,0,0,0,0};
static const char *swig_GameInfo_base_names[] = {"ScreenInfo *","SoundInfo *","ExpansionInfo *","LocaleInfo *",0};
static swig_lua_class _wrap_class_GameInfo = { "GameInfo", "GameInfo", &SWIGTYPE_p_GameInfo,_proxy__wrap_new_GameInfo, swig_delete_GameInfo, swig_GameInfo_methods, swig_GameInfo_attributes, &swig_GameInfo_Sf_SwigStatic, swig_GameInfo_meta, swig_GameInfo_bases, swig_GameInfo_base_names };

static int _wrap_new_TriggerManager(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  TriggerManager *result = 0 ;
  
  SWIG_check_num_args("TriggerManager::TriggerManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerManager::TriggerManager",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_TriggerManager",1,SWIGTYPE_p_Game);
  }
  
  result = (TriggerManager *)new TriggerManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TriggerManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerManager_initTriggerSys(lua_State* L) {
  int SWIG_arg = 0;
  TriggerManager *arg1 = (TriggerManager *) 0 ;
  
  SWIG_check_num_args("TriggerManager::initTriggerSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerManager::initTriggerSys",1,"TriggerManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerManager,0))){
    SWIG_fail_ptr("TriggerManager_initTriggerSys",1,SWIGTYPE_p_TriggerManager);
  }
  
  (arg1)->initTriggerSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerManager_RegisterTrigger(lua_State* L) {
  int SWIG_arg = 0;
  TriggerManager *arg1 = (TriggerManager *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("TriggerManager::RegisterTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerManager::RegisterTrigger",1,"TriggerManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("TriggerManager::RegisterTrigger",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerManager,0))){
    SWIG_fail_ptr("TriggerManager_RegisterTrigger",1,SWIGTYPE_p_TriggerManager);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->RegisterTrigger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerManager_UnRegisterTrigger(lua_State* L) {
  int SWIG_arg = 0;
  TriggerManager *arg1 = (TriggerManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TriggerManager::UnRegisterTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerManager::UnRegisterTrigger",1,"TriggerManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerManager::UnRegisterTrigger",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerManager,0))){
    SWIG_fail_ptr("TriggerManager_UnRegisterTrigger",1,SWIGTYPE_p_TriggerManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->UnRegisterTrigger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerManager_GetTrigger(lua_State* L) {
  int SWIG_arg = 0;
  TriggerManager *arg1 = (TriggerManager *) 0 ;
  size_t arg2 ;
  Trigger *result = 0 ;
  
  SWIG_check_num_args("TriggerManager::GetTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerManager::GetTrigger",1,"TriggerManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerManager::GetTrigger",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerManager,0))){
    SWIG_fail_ptr("TriggerManager_GetTrigger",1,SWIGTYPE_p_TriggerManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (Trigger *) &(arg1)->GetTrigger(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Trigger,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerManager_UpdateTriggers(lua_State* L) {
  int SWIG_arg = 0;
  TriggerManager *arg1 = (TriggerManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TriggerManager::UpdateTriggers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerManager::UpdateTriggers",1,"TriggerManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerManager::UpdateTriggers",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerManager,0))){
    SWIG_fail_ptr("TriggerManager_UpdateTriggers",1,SWIGTYPE_p_TriggerManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->UpdateTriggers(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerManager_UpdateTrigger(lua_State* L) {
  int SWIG_arg = 0;
  TriggerManager *arg1 = (TriggerManager *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("TriggerManager::UpdateTrigger",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerManager::UpdateTrigger",1,"TriggerManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TriggerManager::UpdateTrigger",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TriggerManager::UpdateTrigger",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerManager,0))){
    SWIG_fail_ptr("TriggerManager_UpdateTrigger",1,SWIGTYPE_p_TriggerManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->UpdateTrigger(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TriggerManager_UpdateTriggerLocation(lua_State* L) {
  int SWIG_arg = 0;
  TriggerManager *arg1 = (TriggerManager *) 0 ;
  math_point arg2 ;
  size_t arg3 ;
  math_point *argp2 ;
  
  SWIG_check_num_args("TriggerManager::UpdateTriggerLocation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TriggerManager::UpdateTriggerLocation",1,"TriggerManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TriggerManager::UpdateTriggerLocation",2,"math_point");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TriggerManager::UpdateTriggerLocation",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TriggerManager,0))){
    SWIG_fail_ptr("TriggerManager_UpdateTriggerLocation",1,SWIGTYPE_p_TriggerManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_math_point,0))){
    SWIG_fail_ptr("TriggerManager_UpdateTriggerLocation",2,SWIGTYPE_p_math_point);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->UpdateTriggerLocation(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TriggerManager(void *obj) {
TriggerManager *arg1 = (TriggerManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_TriggerManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TriggerManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TriggerManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TriggerManager_methods[]= {
    { "initTriggerSys", _wrap_TriggerManager_initTriggerSys},
    { "RegisterTrigger", _wrap_TriggerManager_RegisterTrigger},
    { "UnRegisterTrigger", _wrap_TriggerManager_UnRegisterTrigger},
    { "GetTrigger", _wrap_TriggerManager_GetTrigger},
    { "UpdateTriggers", _wrap_TriggerManager_UpdateTriggers},
    { "UpdateTrigger", _wrap_TriggerManager_UpdateTrigger},
    { "UpdateTriggerLocation", _wrap_TriggerManager_UpdateTriggerLocation},
    {0,0}
};
static swig_lua_method swig_TriggerManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TriggerManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TriggerManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TriggerManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TriggerManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TriggerManager_Sf_SwigStatic = {
    "TriggerManager",
    swig_TriggerManager_Sf_SwigStatic_methods,
    swig_TriggerManager_Sf_SwigStatic_attributes,
    swig_TriggerManager_Sf_SwigStatic_constants,
    swig_TriggerManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TriggerManager_bases[] = {0};
static const char *swig_TriggerManager_base_names[] = {0};
static swig_lua_class _wrap_class_TriggerManager = { "TriggerManager", "TriggerManager", &SWIGTYPE_p_TriggerManager,_proxy__wrap_new_TriggerManager, swig_delete_TriggerManager, swig_TriggerManager_methods, swig_TriggerManager_attributes, &swig_TriggerManager_Sf_SwigStatic, swig_TriggerManager_meta, swig_TriggerManager_bases, swig_TriggerManager_base_names };

static int _wrap_new_TimerSystem(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  TimerSystem *result = 0 ;
  
  SWIG_check_num_args("TimerSystem::TimerSystem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::TimerSystem",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_TimerSystem",1,SWIGTYPE_p_Game);
  }
  
  result = (TimerSystem *)new TimerSystem(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TimerSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_initTimerSys(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  
  SWIG_check_num_args("TimerSystem::initTimerSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::initTimerSys",1,"TimerSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_initTimerSys",1,SWIGTYPE_p_TimerSystem);
  }
  
  (arg1)->initTimerSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_GetTicks(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t arg2 ;
  size_t result;
  
  SWIG_check_num_args("TimerSystem::GetTicks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::GetTicks",1,"TimerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerSystem::GetTicks",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_GetTicks",1,SWIGTYPE_p_TimerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (arg1)->GetTicks(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_StopTimer(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TimerSystem::StopTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::StopTimer",1,"TimerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerSystem::StopTimer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_StopTimer",1,SWIGTYPE_p_TimerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->StopTimer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_StartTimer(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TimerSystem::StartTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::StartTimer",1,"TimerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerSystem::StartTimer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_StartTimer",1,SWIGTYPE_p_TimerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->StartTimer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_PauseTimer(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TimerSystem::PauseTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::PauseTimer",1,"TimerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerSystem::PauseTimer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_PauseTimer",1,SWIGTYPE_p_TimerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->PauseTimer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_UnpauseTimer(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TimerSystem::UnpauseTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::UnpauseTimer",1,"TimerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerSystem::UnpauseTimer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_UnpauseTimer",1,SWIGTYPE_p_TimerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->UnpauseTimer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_isTimerStarted(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("TimerSystem::isTimerStarted",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::isTimerStarted",1,"TimerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerSystem::isTimerStarted",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_isTimerStarted",1,SWIGTYPE_p_TimerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->isTimerStarted(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_isTimerPaused(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("TimerSystem::isTimerPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::isTimerPaused",1,"TimerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerSystem::isTimerPaused",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_isTimerPaused",1,SWIGTYPE_p_TimerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->isTimerPaused(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_CreateTimer(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t result;
  
  SWIG_check_num_args("TimerSystem::CreateTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::CreateTimer",1,"TimerSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_CreateTimer",1,SWIGTYPE_p_TimerSystem);
  }
  
  result = (arg1)->CreateTimer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerSystem_DeleteTimer(lua_State* L) {
  int SWIG_arg = 0;
  TimerSystem *arg1 = (TimerSystem *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("TimerSystem::DeleteTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TimerSystem::DeleteTimer",1,"TimerSystem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TimerSystem::DeleteTimer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TimerSystem,0))){
    SWIG_fail_ptr("TimerSystem_DeleteTimer",1,SWIGTYPE_p_TimerSystem);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->DeleteTimer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TimerSystem(void *obj) {
TimerSystem *arg1 = (TimerSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_TimerSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TimerSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TimerSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TimerSystem_methods[]= {
    { "initTimerSys", _wrap_TimerSystem_initTimerSys},
    { "GetTicks", _wrap_TimerSystem_GetTicks},
    { "StopTimer", _wrap_TimerSystem_StopTimer},
    { "StartTimer", _wrap_TimerSystem_StartTimer},
    { "PauseTimer", _wrap_TimerSystem_PauseTimer},
    { "UnpauseTimer", _wrap_TimerSystem_UnpauseTimer},
    { "isTimerStarted", _wrap_TimerSystem_isTimerStarted},
    { "isTimerPaused", _wrap_TimerSystem_isTimerPaused},
    { "CreateTimer", _wrap_TimerSystem_CreateTimer},
    { "DeleteTimer", _wrap_TimerSystem_DeleteTimer},
    {0,0}
};
static swig_lua_method swig_TimerSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TimerSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TimerSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TimerSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TimerSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TimerSystem_Sf_SwigStatic = {
    "TimerSystem",
    swig_TimerSystem_Sf_SwigStatic_methods,
    swig_TimerSystem_Sf_SwigStatic_attributes,
    swig_TimerSystem_Sf_SwigStatic_constants,
    swig_TimerSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TimerSystem_bases[] = {0};
static const char *swig_TimerSystem_base_names[] = {0};
static swig_lua_class _wrap_class_TimerSystem = { "TimerSystem", "TimerSystem", &SWIGTYPE_p_TimerSystem,_proxy__wrap_new_TimerSystem, swig_delete_TimerSystem, swig_TimerSystem_methods, swig_TimerSystem_attributes, &swig_TimerSystem_Sf_SwigStatic, swig_TimerSystem_meta, swig_TimerSystem_bases, swig_TimerSystem_base_names };

static int _wrap_new_UIManager(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  UIManager *result = 0 ;
  
  SWIG_check_num_args("UIManager::UIManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::UIManager",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_UIManager",1,SWIGTYPE_p_Game);
  }
  
  result = (UIManager *)new UIManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UIManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_initUISys(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  
  SWIG_check_num_args("UIManager::initUISys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::initUISys",1,"UIManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_initUISys",1,SWIGTYPE_p_UIManager);
  }
  
  (arg1)->initUISys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_RegisterUI(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("UIManager::RegisterUI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::RegisterUI",1,"UIManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("UIManager::RegisterUI",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_RegisterUI",1,SWIGTYPE_p_UIManager);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->RegisterUI(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_UnregisterUI(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("UIManager::UnregisterUI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::UnregisterUI",1,"UIManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UIManager::UnregisterUI",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_UnregisterUI",1,SWIGTYPE_p_UIManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->UnregisterUI(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_GetUI(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  size_t arg2 ;
  UI *result = 0 ;
  
  SWIG_check_num_args("UIManager::GetUI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::GetUI",1,"UIManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UIManager::GetUI",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_GetUI",1,SWIGTYPE_p_UIManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (UI *) &(arg1)->GetUI(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UI,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_FindUIByName(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("UIManager::FindUIByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::FindUIByName",1,"UIManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("UIManager::FindUIByName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_FindUIByName",1,SWIGTYPE_p_UIManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->FindUIByName((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_uiIDExists(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("UIManager::uiIDExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::uiIDExists",1,"UIManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("UIManager::uiIDExists",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_uiIDExists",1,SWIGTYPE_p_UIManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->uiIDExists(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_UIUpdate(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  
  SWIG_check_num_args("UIManager::UIUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::UIUpdate",1,"UIManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_UIUpdate",1,SWIGTYPE_p_UIManager);
  }
  
  (arg1)->UIUpdate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_UIProcessEvents(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  
  SWIG_check_num_args("UIManager::UIProcessEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::UIProcessEvents",1,"UIManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_UIProcessEvents",1,SWIGTYPE_p_UIManager);
  }
  
  (arg1)->UIProcessEvents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UIManager_UIDraw(lua_State* L) {
  int SWIG_arg = 0;
  UIManager *arg1 = (UIManager *) 0 ;
  
  SWIG_check_num_args("UIManager::UIDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UIManager::UIDraw",1,"UIManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UIManager,0))){
    SWIG_fail_ptr("UIManager_UIDraw",1,SWIGTYPE_p_UIManager);
  }
  
  (arg1)->UIDraw();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UIManager(void *obj) {
UIManager *arg1 = (UIManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_UIManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UIManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UIManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UIManager_methods[]= {
    { "initUISys", _wrap_UIManager_initUISys},
    { "RegisterUI", _wrap_UIManager_RegisterUI},
    { "UnregisterUI", _wrap_UIManager_UnregisterUI},
    { "GetUI", _wrap_UIManager_GetUI},
    { "FindUIByName", _wrap_UIManager_FindUIByName},
    { "uiIDExists", _wrap_UIManager_uiIDExists},
    { "UIUpdate", _wrap_UIManager_UIUpdate},
    { "UIProcessEvents", _wrap_UIManager_UIProcessEvents},
    { "UIDraw", _wrap_UIManager_UIDraw},
    {0,0}
};
static swig_lua_method swig_UIManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UIManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UIManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UIManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UIManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UIManager_Sf_SwigStatic = {
    "UIManager",
    swig_UIManager_Sf_SwigStatic_methods,
    swig_UIManager_Sf_SwigStatic_attributes,
    swig_UIManager_Sf_SwigStatic_constants,
    swig_UIManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UIManager_bases[] = {0};
static const char *swig_UIManager_base_names[] = {0};
static swig_lua_class _wrap_class_UIManager = { "UIManager", "UIManager", &SWIGTYPE_p_UIManager,_proxy__wrap_new_UIManager, swig_delete_UIManager, swig_UIManager_methods, swig_UIManager_attributes, &swig_UIManager_Sf_SwigStatic, swig_UIManager_meta, swig_UIManager_bases, swig_UIManager_base_names };

static int _wrap_helperUIUpdate(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperUIUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperUIUpdate",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperUIUpdate");
  result = (void_ptr)helperUIUpdate(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_helperUIProcessEvents(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperUIProcessEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperUIProcessEvents",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperUIProcessEvents");
  result = (void_ptr)helperUIProcessEvents(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_helperUIDraw(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperUIDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperUIDraw",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperUIDraw");
  result = (void_ptr)helperUIDraw(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Level(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  Level *result = 0 ;
  
  SWIG_check_num_args("Level::Level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::Level",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Level::Level",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Level",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (Level *)new Level(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Level,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_GetMapName(lua_State* L) {
  int SWIG_arg = 0;
  Level *arg1 = (Level *) 0 ;
  std::string result;
  
  SWIG_check_num_args("Level::GetMapName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::GetMapName",1,"Level const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Level,0))){
    SWIG_fail_ptr("Level_GetMapName",1,SWIGTYPE_p_Level);
  }
  
  result = ((Level const *)arg1)->GetMapName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_GetHeroID(lua_State* L) {
  int SWIG_arg = 0;
  Level *arg1 = (Level *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Level::GetHeroID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::GetHeroID",1,"Level const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Level,0))){
    SWIG_fail_ptr("Level_GetHeroID",1,SWIGTYPE_p_Level);
  }
  
  result = ((Level const *)arg1)->GetHeroID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_GetLayerIDs(lua_State* L) {
  int SWIG_arg = 0;
  Level *arg1 = (Level *) 0 ;
  std::list< size_t > *result = 0 ;
  
  SWIG_check_num_args("Level::GetLayerIDs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::GetLayerIDs",1,"Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Level,0))){
    SWIG_fail_ptr("Level_GetLayerIDs",1,SWIGTYPE_p_Level);
  }
  
  result = (std::list< size_t > *)(arg1)->GetLayerIDs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_size_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_GetUnitIDs(lua_State* L) {
  int SWIG_arg = 0;
  Level *arg1 = (Level *) 0 ;
  std::list< size_t > *result = 0 ;
  
  SWIG_check_num_args("Level::GetUnitIDs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::GetUnitIDs",1,"Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Level,0))){
    SWIG_fail_ptr("Level_GetUnitIDs",1,SWIGTYPE_p_Level);
  }
  
  result = (std::list< size_t > *)(arg1)->GetUnitIDs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_size_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_GetUIIDs(lua_State* L) {
  int SWIG_arg = 0;
  Level *arg1 = (Level *) 0 ;
  std::list< size_t > *result = 0 ;
  
  SWIG_check_num_args("Level::GetUIIDs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::GetUIIDs",1,"Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Level,0))){
    SWIG_fail_ptr("Level_GetUIIDs",1,SWIGTYPE_p_Level);
  }
  
  result = (std::list< size_t > *)(arg1)->GetUIIDs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_size_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_GetModuleIDs(lua_State* L) {
  int SWIG_arg = 0;
  Level *arg1 = (Level *) 0 ;
  std::list< size_t > *result = 0 ;
  
  SWIG_check_num_args("Level::GetModuleIDs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::GetModuleIDs",1,"Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Level,0))){
    SWIG_fail_ptr("Level_GetModuleIDs",1,SWIGTYPE_p_Level);
  }
  
  result = (std::list< size_t > *)(arg1)->GetModuleIDs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_size_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_GetTriggerIDs(lua_State* L) {
  int SWIG_arg = 0;
  Level *arg1 = (Level *) 0 ;
  std::list< size_t > *result = 0 ;
  
  SWIG_check_num_args("Level::GetTriggerIDs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::GetTriggerIDs",1,"Level *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Level,0))){
    SWIG_fail_ptr("Level_GetTriggerIDs",1,SWIGTYPE_p_Level);
  }
  
  result = (std::list< size_t > *)(arg1)->GetTriggerIDs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_size_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Level_SetHeroID(lua_State* L) {
  int SWIG_arg = 0;
  Level *arg1 = (Level *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Level::SetHeroID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Level::SetHeroID",1,"Level *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Level::SetHeroID",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Level,0))){
    SWIG_fail_ptr("Level_SetHeroID",1,SWIGTYPE_p_Level);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetHeroID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Level(void *obj) {
Level *arg1 = (Level *) obj;
delete arg1;
}
static int _proxy__wrap_new_Level(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Level);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Level_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Level_methods[]= {
    { "GetMapName", _wrap_Level_GetMapName},
    { "GetHeroID", _wrap_Level_GetHeroID},
    { "GetLayerIDs", _wrap_Level_GetLayerIDs},
    { "GetUnitIDs", _wrap_Level_GetUnitIDs},
    { "GetUIIDs", _wrap_Level_GetUIIDs},
    { "GetModuleIDs", _wrap_Level_GetModuleIDs},
    { "GetTriggerIDs", _wrap_Level_GetTriggerIDs},
    { "SetHeroID", _wrap_Level_SetHeroID},
    {0,0}
};
static swig_lua_method swig_Level_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Level_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Level_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Level_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Level_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Level_Sf_SwigStatic = {
    "Level",
    swig_Level_Sf_SwigStatic_methods,
    swig_Level_Sf_SwigStatic_attributes,
    swig_Level_Sf_SwigStatic_constants,
    swig_Level_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Level_bases[] = {0};
static const char *swig_Level_base_names[] = {0};
static swig_lua_class _wrap_class_Level = { "Level", "Level", &SWIGTYPE_p_Level,_proxy__wrap_new_Level, swig_delete_Level, swig_Level_methods, swig_Level_attributes, &swig_Level_Sf_SwigStatic, swig_Level_meta, swig_Level_bases, swig_Level_base_names };

static int _wrap_new_SoundQueue(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  SoundQueue *result = 0 ;
  
  SWIG_check_num_args("SoundQueue::SoundQueue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::SoundQueue",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_SoundQueue",1,SWIGTYPE_p_Game);
  }
  
  result = (SoundQueue *)new SoundQueue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundQueue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_initSoundSys(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  
  SWIG_check_num_args("SoundQueue::initSoundSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::initSoundSys",1,"SoundQueue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_initSoundSys",1,SWIGTYPE_p_SoundQueue);
  }
  
  (arg1)->initSoundSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_AddSoundToQueue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  cstr arg2 = (cstr) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("SoundQueue::AddSoundToQueue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::AddSoundToQueue",1,"SoundQueue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundQueue::AddSoundToQueue",2,"cstr");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("SoundQueue::AddSoundToQueue",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_AddSoundToQueue",1,SWIGTYPE_p_SoundQueue);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->AddSoundToQueue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_AddSoundToQueue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("SoundQueue::AddSoundToQueue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::AddSoundToQueue",1,"SoundQueue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundQueue::AddSoundToQueue",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_AddSoundToQueue",1,SWIGTYPE_p_SoundQueue);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->AddSoundToQueue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_AddSoundToQueue(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundQueue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SoundQueue_AddSoundToQueue__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundQueue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundQueue_AddSoundToQueue__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundQueue_AddSoundToQueue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundQueue::AddSoundToQueue(cstr,bool)\n"
    "    SoundQueue::AddSoundToQueue(cstr)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundQueue_AddSoundBufferToQueue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("SoundQueue::AddSoundBufferToQueue",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",1,"SoundQueue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",2,"cstr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_AddSoundBufferToQueue",1,SWIGTYPE_p_SoundQueue);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->AddSoundBufferToQueue(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_AddSoundBufferToQueue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("SoundQueue::AddSoundBufferToQueue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",1,"SoundQueue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",2,"cstr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_AddSoundBufferToQueue",1,SWIGTYPE_p_SoundQueue);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->AddSoundBufferToQueue(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_AddSoundBufferToQueue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("SoundQueue::AddSoundBufferToQueue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",1,"SoundQueue *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",2,"cstr");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("SoundQueue::AddSoundBufferToQueue",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_AddSoundBufferToQueue",1,SWIGTYPE_p_SoundQueue);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->AddSoundBufferToQueue(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_AddSoundBufferToQueue(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundQueue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_SoundQueue_AddSoundBufferToQueue__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundQueue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_SoundQueue_AddSoundBufferToQueue__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SoundQueue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_SoundQueue_AddSoundBufferToQueue__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundQueue_AddSoundBufferToQueue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    SoundQueue::AddSoundBufferToQueue(cstr,size_t,bool,bool)\n"
    "    SoundQueue::AddSoundBufferToQueue(cstr,size_t,bool)\n"
    "    SoundQueue::AddSoundBufferToQueue(cstr,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_SoundQueue_FlipMusic(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  
  SWIG_check_num_args("SoundQueue::FlipMusic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::FlipMusic",1,"SoundQueue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_FlipMusic",1,SWIGTYPE_p_SoundQueue);
  }
  
  (arg1)->FlipMusic();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_SetFadeInTime(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundQueue::SetFadeInTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::SetFadeInTime",1,"SoundQueue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundQueue::SetFadeInTime",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_SetFadeInTime",1,SWIGTYPE_p_SoundQueue);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetFadeInTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_SetRangeOfEffects(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("SoundQueue::SetRangeOfEffects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::SetRangeOfEffects",1,"SoundQueue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundQueue::SetRangeOfEffects",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_SetRangeOfEffects",1,SWIGTYPE_p_SoundQueue);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetRangeOfEffects(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_PlayNextSound(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  
  SWIG_check_num_args("SoundQueue::PlayNextSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::PlayNextSound",1,"SoundQueue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_PlayNextSound",1,SWIGTYPE_p_SoundQueue);
  }
  
  (arg1)->PlayNextSound();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_UpdateMusicAroundHero(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("SoundQueue::UpdateMusicAroundHero",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::UpdateMusicAroundHero",1,"SoundQueue *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundQueue::UpdateMusicAroundHero",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_UpdateMusicAroundHero",1,SWIGTYPE_p_SoundQueue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("SoundQueue_UpdateMusicAroundHero",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->UpdateMusicAroundHero(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_PlayMusicSound(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  
  SWIG_check_num_args("SoundQueue::PlayMusicSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::PlayMusicSound",1,"SoundQueue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_PlayMusicSound",1,SWIGTYPE_p_SoundQueue);
  }
  
  (arg1)->PlayMusicSound();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_StopMusicSound(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  
  SWIG_check_num_args("SoundQueue::StopMusicSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::StopMusicSound",1,"SoundQueue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_StopMusicSound",1,SWIGTYPE_p_SoundQueue);
  }
  
  (arg1)->StopMusicSound();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_GCSounds(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  
  SWIG_check_num_args("SoundQueue::GCSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::GCSounds",1,"SoundQueue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_GCSounds",1,SWIGTYPE_p_SoundQueue);
  }
  
  (arg1)->GCSounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundQueue_ClearQueue(lua_State* L) {
  int SWIG_arg = 0;
  SoundQueue *arg1 = (SoundQueue *) 0 ;
  
  SWIG_check_num_args("SoundQueue::ClearQueue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundQueue::ClearQueue",1,"SoundQueue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundQueue,0))){
    SWIG_fail_ptr("SoundQueue_ClearQueue",1,SWIGTYPE_p_SoundQueue);
  }
  
  (arg1)->ClearQueue();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundQueue(void *obj) {
SoundQueue *arg1 = (SoundQueue *) obj;
delete arg1;
}
static int _proxy__wrap_new_SoundQueue(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SoundQueue);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SoundQueue_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoundQueue_methods[]= {
    { "initSoundSys", _wrap_SoundQueue_initSoundSys},
    { "AddSoundToQueue", _wrap_SoundQueue_AddSoundToQueue},
    { "AddSoundBufferToQueue", _wrap_SoundQueue_AddSoundBufferToQueue},
    { "FlipMusic", _wrap_SoundQueue_FlipMusic},
    { "SetFadeInTime", _wrap_SoundQueue_SetFadeInTime},
    { "SetRangeOfEffects", _wrap_SoundQueue_SetRangeOfEffects},
    { "PlayNextSound", _wrap_SoundQueue_PlayNextSound},
    { "UpdateMusicAroundHero", _wrap_SoundQueue_UpdateMusicAroundHero},
    { "PlayMusicSound", _wrap_SoundQueue_PlayMusicSound},
    { "StopMusicSound", _wrap_SoundQueue_StopMusicSound},
    { "GCSounds", _wrap_SoundQueue_GCSounds},
    { "ClearQueue", _wrap_SoundQueue_ClearQueue},
    {0,0}
};
static swig_lua_method swig_SoundQueue_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundQueue_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundQueue_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundQueue_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundQueue_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundQueue_Sf_SwigStatic = {
    "SoundQueue",
    swig_SoundQueue_Sf_SwigStatic_methods,
    swig_SoundQueue_Sf_SwigStatic_attributes,
    swig_SoundQueue_Sf_SwigStatic_constants,
    swig_SoundQueue_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundQueue_bases[] = {0};
static const char *swig_SoundQueue_base_names[] = {0};
static swig_lua_class _wrap_class_SoundQueue = { "SoundQueue", "SoundQueue", &SWIGTYPE_p_SoundQueue,_proxy__wrap_new_SoundQueue, swig_delete_SoundQueue, swig_SoundQueue_methods, swig_SoundQueue_attributes, &swig_SoundQueue_Sf_SwigStatic, swig_SoundQueue_meta, swig_SoundQueue_bases, swig_SoundQueue_base_names };

static int _wrap_SynchData_pts_set(lua_State* L) {
  int SWIG_arg = 0;
  SynchData *arg1 = (SynchData *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SynchData::pts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynchData::pts",1,"SynchData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynchData::pts",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynchData,0))){
    SWIG_fail_ptr("SynchData_pts_set",1,SWIGTYPE_p_SynchData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->pts = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynchData_pts_get(lua_State* L) {
  int SWIG_arg = 0;
  SynchData *arg1 = (SynchData *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SynchData::pts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynchData::pts",1,"SynchData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynchData,0))){
    SWIG_fail_ptr("SynchData_pts_get",1,SWIGTYPE_p_SynchData);
  }
  
  result =  ((arg1)->pts);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynchData_repeats_set(lua_State* L) {
  int SWIG_arg = 0;
  SynchData *arg1 = (SynchData *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SynchData::repeats",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynchData::repeats",1,"SynchData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SynchData::repeats",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynchData,0))){
    SWIG_fail_ptr("SynchData_repeats_set",1,SWIGTYPE_p_SynchData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->repeats = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SynchData_repeats_get(lua_State* L) {
  int SWIG_arg = 0;
  SynchData *arg1 = (SynchData *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SynchData::repeats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SynchData::repeats",1,"SynchData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SynchData,0))){
    SWIG_fail_ptr("SynchData_repeats_get",1,SWIGTYPE_p_SynchData);
  }
  
  result =  ((arg1)->repeats);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SynchData(lua_State* L) {
  int SWIG_arg = 0;
  SynchData *result = 0 ;
  
  SWIG_check_num_args("SynchData::SynchData",0,0)
  result = (SynchData *)new SynchData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SynchData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SynchData(void *obj) {
SynchData *arg1 = (SynchData *) obj;
delete arg1;
}
static int _proxy__wrap_new_SynchData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SynchData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SynchData_attributes[] = {
    { "pts", _wrap_SynchData_pts_get, _wrap_SynchData_pts_set },
    { "repeats", _wrap_SynchData_repeats_get, _wrap_SynchData_repeats_set },
    {0,0,0}
};
static swig_lua_method swig_SynchData_methods[]= {
    {0,0}
};
static swig_lua_method swig_SynchData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SynchData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SynchData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SynchData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SynchData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SynchData_Sf_SwigStatic = {
    "SynchData",
    swig_SynchData_Sf_SwigStatic_methods,
    swig_SynchData_Sf_SwigStatic_attributes,
    swig_SynchData_Sf_SwigStatic_constants,
    swig_SynchData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SynchData_bases[] = {0};
static const char *swig_SynchData_base_names[] = {0};
static swig_lua_class _wrap_class_SynchData = { "SynchData", "SynchData", &SWIGTYPE_p_SynchData,_proxy__wrap_new_SynchData, swig_delete_SynchData, swig_SynchData_methods, swig_SynchData_attributes, &swig_SynchData_Sf_SwigStatic, swig_SynchData_meta, swig_SynchData_bases, swig_SynchData_base_names };

static int _wrap_VideoFrame_pYUV420PText_set(lua_State* L) {
  int SWIG_arg = 0;
  VideoFrame *arg1 = (VideoFrame *) 0 ;
  SDL_Texture *arg2 = (SDL_Texture *) 0 ;
  
  SWIG_check_num_args("VideoFrame::pYUV420PText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoFrame::pYUV420PText",1,"VideoFrame *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VideoFrame::pYUV420PText",2,"SDL_Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoFrame,0))){
    SWIG_fail_ptr("VideoFrame_pYUV420PText_set",1,SWIGTYPE_p_VideoFrame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Texture,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("VideoFrame_pYUV420PText_set",2,SWIGTYPE_p_SDL_Texture);
  }
  
  if (arg1) (arg1)->pYUV420PText = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoFrame_pYUV420PText_get(lua_State* L) {
  int SWIG_arg = 0;
  VideoFrame *arg1 = (VideoFrame *) 0 ;
  SDL_Texture *result = 0 ;
  
  SWIG_check_num_args("VideoFrame::pYUV420PText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoFrame::pYUV420PText",1,"VideoFrame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoFrame,0))){
    SWIG_fail_ptr("VideoFrame_pYUV420PText_get",1,SWIGTYPE_p_VideoFrame);
  }
  
  result = (SDL_Texture *) ((arg1)->pYUV420PText);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_VideoFrame(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  int arg2 ;
  int arg3 ;
  VideoFrame *result = 0 ;
  
  SWIG_check_num_args("VideoFrame::VideoFrame",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoFrame::VideoFrame",1,"Game *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VideoFrame::VideoFrame",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VideoFrame::VideoFrame",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_VideoFrame",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (VideoFrame *)new VideoFrame(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_VideoFrame,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VideoFrame(void *obj) {
VideoFrame *arg1 = (VideoFrame *) obj;
delete arg1;
}
static int _proxy__wrap_new_VideoFrame(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VideoFrame);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VideoFrame_attributes[] = {
    { "pYUV420PText", _wrap_VideoFrame_pYUV420PText_get, _wrap_VideoFrame_pYUV420PText_set },
    {0,0,0}
};
static swig_lua_method swig_VideoFrame_methods[]= {
    {0,0}
};
static swig_lua_method swig_VideoFrame_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VideoFrame_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VideoFrame_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VideoFrame_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VideoFrame_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VideoFrame_Sf_SwigStatic = {
    "VideoFrame",
    swig_VideoFrame_Sf_SwigStatic_methods,
    swig_VideoFrame_Sf_SwigStatic_attributes,
    swig_VideoFrame_Sf_SwigStatic_constants,
    swig_VideoFrame_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VideoFrame_bases[] = {0,0};
static const char *swig_VideoFrame_base_names[] = {"SynchData *",0};
static swig_lua_class _wrap_class_VideoFrame = { "VideoFrame", "VideoFrame", &SWIGTYPE_p_VideoFrame,_proxy__wrap_new_VideoFrame, swig_delete_VideoFrame, swig_VideoFrame_methods, swig_VideoFrame_attributes, &swig_VideoFrame_Sf_SwigStatic, swig_VideoFrame_meta, swig_VideoFrame_bases, swig_VideoFrame_base_names };

static int _wrap_SubFrame_subtitle_set(lua_State* L) {
  int SWIG_arg = 0;
  SubFrame *arg1 = (SubFrame *) 0 ;
  SDL_Texture *arg2 = (SDL_Texture *) 0 ;
  
  SWIG_check_num_args("SubFrame::subtitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubFrame::subtitle",1,"SubFrame *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SubFrame::subtitle",2,"SDL_Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SubFrame,0))){
    SWIG_fail_ptr("SubFrame_subtitle_set",1,SWIGTYPE_p_SubFrame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Texture,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SubFrame_subtitle_set",2,SWIGTYPE_p_SDL_Texture);
  }
  
  if (arg1) (arg1)->subtitle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubFrame_subtitle_get(lua_State* L) {
  int SWIG_arg = 0;
  SubFrame *arg1 = (SubFrame *) 0 ;
  SDL_Texture *result = 0 ;
  
  SWIG_check_num_args("SubFrame::subtitle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubFrame::subtitle",1,"SubFrame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SubFrame,0))){
    SWIG_fail_ptr("SubFrame_subtitle_get",1,SWIGTYPE_p_SubFrame);
  }
  
  result = (SDL_Texture *) ((arg1)->subtitle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Texture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubFrame_rect_set(lua_State* L) {
  int SWIG_arg = 0;
  SubFrame *arg1 = (SubFrame *) 0 ;
  SDL_Rect arg2 ;
  SDL_Rect *argp2 ;
  
  SWIG_check_num_args("SubFrame::rect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubFrame::rect",1,"SubFrame *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("SubFrame::rect",2,"SDL_Rect");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SubFrame,0))){
    SWIG_fail_ptr("SubFrame_rect_set",1,SWIGTYPE_p_SubFrame);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SDL_Rect,0))){
    SWIG_fail_ptr("SubFrame_rect_set",2,SWIGTYPE_p_SDL_Rect);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->rect = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubFrame_rect_get(lua_State* L) {
  int SWIG_arg = 0;
  SubFrame *arg1 = (SubFrame *) 0 ;
  SDL_Rect result;
  
  SWIG_check_num_args("SubFrame::rect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubFrame::rect",1,"SubFrame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SubFrame,0))){
    SWIG_fail_ptr("SubFrame_rect_get",1,SWIGTYPE_p_SubFrame);
  }
  
  result =  ((arg1)->rect);
  {
    SDL_Rect * resultptr = new SDL_Rect((const SDL_Rect &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SDL_Rect,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubFrame_beg_time_set(lua_State* L) {
  int SWIG_arg = 0;
  SubFrame *arg1 = (SubFrame *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SubFrame::beg_time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubFrame::beg_time",1,"SubFrame *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SubFrame::beg_time",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SubFrame,0))){
    SWIG_fail_ptr("SubFrame_beg_time_set",1,SWIGTYPE_p_SubFrame);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->beg_time = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SubFrame_beg_time_get(lua_State* L) {
  int SWIG_arg = 0;
  SubFrame *arg1 = (SubFrame *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SubFrame::beg_time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SubFrame::beg_time",1,"SubFrame *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SubFrame,0))){
    SWIG_fail_ptr("SubFrame_beg_time_get",1,SWIGTYPE_p_SubFrame);
  }
  
  result =  ((arg1)->beg_time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SubFrame(lua_State* L) {
  int SWIG_arg = 0;
  SubFrame *result = 0 ;
  
  SWIG_check_num_args("SubFrame::SubFrame",0,0)
  result = (SubFrame *)new SubFrame();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SubFrame,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SubFrame(void *obj) {
SubFrame *arg1 = (SubFrame *) obj;
delete arg1;
}
static int _proxy__wrap_new_SubFrame(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SubFrame);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SubFrame_attributes[] = {
    { "subtitle", _wrap_SubFrame_subtitle_get, _wrap_SubFrame_subtitle_set },
    { "rect", _wrap_SubFrame_rect_get, _wrap_SubFrame_rect_set },
    { "beg_time", _wrap_SubFrame_beg_time_get, _wrap_SubFrame_beg_time_set },
    {0,0,0}
};
static swig_lua_method swig_SubFrame_methods[]= {
    {0,0}
};
static swig_lua_method swig_SubFrame_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SubFrame_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SubFrame_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SubFrame_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SubFrame_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SubFrame_Sf_SwigStatic = {
    "SubFrame",
    swig_SubFrame_Sf_SwigStatic_methods,
    swig_SubFrame_Sf_SwigStatic_attributes,
    swig_SubFrame_Sf_SwigStatic_constants,
    swig_SubFrame_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SubFrame_bases[] = {0,0};
static const char *swig_SubFrame_base_names[] = {"SynchData *",0};
static swig_lua_class _wrap_class_SubFrame = { "SubFrame", "SubFrame", &SWIGTYPE_p_SubFrame,_proxy__wrap_new_SubFrame, swig_delete_SubFrame, swig_SubFrame_methods, swig_SubFrame_attributes, &swig_SubFrame_Sf_SwigStatic, swig_SubFrame_meta, swig_SubFrame_bases, swig_SubFrame_base_names };

static int _wrap_SoundChunk_size_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundChunk *arg1 = (SoundChunk *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("SoundChunk::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundChunk::size",1,"SoundChunk *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SoundChunk::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundChunk,0))){
    SWIG_fail_ptr("SoundChunk_size_set",1,SWIGTYPE_p_SoundChunk);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundChunk_size_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundChunk *arg1 = (SoundChunk *) 0 ;
  size_t result;
  
  SWIG_check_num_args("SoundChunk::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundChunk::size",1,"SoundChunk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundChunk,0))){
    SWIG_fail_ptr("SoundChunk_size_get",1,SWIGTYPE_p_SoundChunk);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundChunk_chunk_set(lua_State* L) {
  int SWIG_arg = 0;
  SoundChunk *arg1 = (SoundChunk *) 0 ;
  byte *arg2 = (byte *) 0 ;
  
  SWIG_check_num_args("SoundChunk::chunk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundChunk::chunk",1,"SoundChunk *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SoundChunk::chunk",2,"byte *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundChunk,0))){
    SWIG_fail_ptr("SoundChunk_chunk_set",1,SWIGTYPE_p_SoundChunk);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("SoundChunk_chunk_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  if (arg1) (arg1)->chunk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoundChunk_chunk_get(lua_State* L) {
  int SWIG_arg = 0;
  SoundChunk *arg1 = (SoundChunk *) 0 ;
  byte *result = 0 ;
  
  SWIG_check_num_args("SoundChunk::chunk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SoundChunk::chunk",1,"SoundChunk *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SoundChunk,0))){
    SWIG_fail_ptr("SoundChunk_chunk_get",1,SWIGTYPE_p_SoundChunk);
  }
  
  result = (byte *) ((arg1)->chunk);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoundChunk(lua_State* L) {
  int SWIG_arg = 0;
  SoundChunk *result = 0 ;
  
  SWIG_check_num_args("SoundChunk::SoundChunk",0,0)
  result = (SoundChunk *)new SoundChunk();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SoundChunk,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoundChunk(void *obj) {
SoundChunk *arg1 = (SoundChunk *) obj;
delete arg1;
}
static int _proxy__wrap_new_SoundChunk(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SoundChunk);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SoundChunk_attributes[] = {
    { "size", _wrap_SoundChunk_size_get, _wrap_SoundChunk_size_set },
    { "chunk", _wrap_SoundChunk_chunk_get, _wrap_SoundChunk_chunk_set },
    {0,0,0}
};
static swig_lua_method swig_SoundChunk_methods[]= {
    {0,0}
};
static swig_lua_method swig_SoundChunk_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoundChunk_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoundChunk_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoundChunk_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoundChunk_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoundChunk_Sf_SwigStatic = {
    "SoundChunk",
    swig_SoundChunk_Sf_SwigStatic_methods,
    swig_SoundChunk_Sf_SwigStatic_attributes,
    swig_SoundChunk_Sf_SwigStatic_constants,
    swig_SoundChunk_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoundChunk_bases[] = {0,0};
static const char *swig_SoundChunk_base_names[] = {"SynchData *",0};
static swig_lua_class _wrap_class_SoundChunk = { "SoundChunk", "SoundChunk", &SWIGTYPE_p_SoundChunk,_proxy__wrap_new_SoundChunk, swig_delete_SoundChunk, swig_SoundChunk_methods, swig_SoundChunk_attributes, &swig_SoundChunk_Sf_SwigStatic, swig_SoundChunk_meta, swig_SoundChunk_bases, swig_SoundChunk_base_names };

static int _wrap_new_VideoPlayer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  VideoPlayer *result = 0 ;
  
  SWIG_check_num_args("VideoPlayer::VideoPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::VideoPlayer",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_VideoPlayer",1,SWIGTYPE_p_Game);
  }
  
  result = (VideoPlayer *)new VideoPlayer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_VideoPlayer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_initVideoSys(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  SWIG_check_num_args("VideoPlayer::initVideoSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::initVideoSys",1,"VideoPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_initVideoSys",1,SWIGTYPE_p_VideoPlayer);
  }
  
  (arg1)->initVideoSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_LoadVideoFile(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("VideoPlayer::LoadVideoFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::LoadVideoFile",1,"VideoPlayer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("VideoPlayer::LoadVideoFile",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_LoadVideoFile",1,SWIGTYPE_p_VideoPlayer);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->LoadVideoFile(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_PlayVideo(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  SWIG_check_num_args("VideoPlayer::PlayVideo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::PlayVideo",1,"VideoPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_PlayVideo",1,SWIGTYPE_p_VideoPlayer);
  }
  
  (arg1)->PlayVideo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_StopVideo(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  SWIG_check_num_args("VideoPlayer::StopVideo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::StopVideo",1,"VideoPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_StopVideo",1,SWIGTYPE_p_VideoPlayer);
  }
  
  (arg1)->StopVideo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_UpdateVideo(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  SWIG_check_num_args("VideoPlayer::UpdateVideo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::UpdateVideo",1,"VideoPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_UpdateVideo",1,SWIGTYPE_p_VideoPlayer);
  }
  
  (arg1)->UpdateVideo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_DrawVideo(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  SWIG_check_num_args("VideoPlayer::DrawVideo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::DrawVideo",1,"VideoPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_DrawVideo",1,SWIGTYPE_p_VideoPlayer);
  }
  
  (arg1)->DrawVideo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_GetVideoT(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  size_t result;
  
  SWIG_check_num_args("VideoPlayer::GetVideoT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::GetVideoT",1,"VideoPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_GetVideoT",1,SWIGTYPE_p_VideoPlayer);
  }
  
  result = ((VideoPlayer const *)arg1)->GetVideoT();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_isSubtitled(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("VideoPlayer::isSubtitled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::isSubtitled",1,"VideoPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_isSubtitled",1,SWIGTYPE_p_VideoPlayer);
  }
  
  result = (bool)((VideoPlayer const *)arg1)->isSubtitled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_isPlayingVideo(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("VideoPlayer::isPlayingVideo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::isPlayingVideo",1,"VideoPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_isPlayingVideo",1,SWIGTYPE_p_VideoPlayer);
  }
  
  result = (bool)((VideoPlayer const *)arg1)->isPlayingVideo();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoPlayer_InitVideoSystem(lua_State* L) {
  int SWIG_arg = 0;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  SWIG_check_num_args("VideoPlayer::InitVideoSystem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VideoPlayer::InitVideoSystem",1,"VideoPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_VideoPlayer,0))){
    SWIG_fail_ptr("VideoPlayer_InitVideoSystem",1,SWIGTYPE_p_VideoPlayer);
  }
  
  (arg1)->InitVideoSystem();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VideoPlayer(void *obj) {
VideoPlayer *arg1 = (VideoPlayer *) obj;
delete arg1;
}
static int _proxy__wrap_new_VideoPlayer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VideoPlayer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VideoPlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VideoPlayer_methods[]= {
    { "initVideoSys", _wrap_VideoPlayer_initVideoSys},
    { "LoadVideoFile", _wrap_VideoPlayer_LoadVideoFile},
    { "PlayVideo", _wrap_VideoPlayer_PlayVideo},
    { "StopVideo", _wrap_VideoPlayer_StopVideo},
    { "UpdateVideo", _wrap_VideoPlayer_UpdateVideo},
    { "DrawVideo", _wrap_VideoPlayer_DrawVideo},
    { "GetVideoT", _wrap_VideoPlayer_GetVideoT},
    { "isSubtitled", _wrap_VideoPlayer_isSubtitled},
    { "isPlayingVideo", _wrap_VideoPlayer_isPlayingVideo},
    { "InitVideoSystem", _wrap_VideoPlayer_InitVideoSystem},
    {0,0}
};
static swig_lua_method swig_VideoPlayer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VideoPlayer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VideoPlayer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VideoPlayer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VideoPlayer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VideoPlayer_Sf_SwigStatic = {
    "VideoPlayer",
    swig_VideoPlayer_Sf_SwigStatic_methods,
    swig_VideoPlayer_Sf_SwigStatic_attributes,
    swig_VideoPlayer_Sf_SwigStatic_constants,
    swig_VideoPlayer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VideoPlayer_bases[] = {0};
static const char *swig_VideoPlayer_base_names[] = {0};
static swig_lua_class _wrap_class_VideoPlayer = { "VideoPlayer", "VideoPlayer", &SWIGTYPE_p_VideoPlayer,_proxy__wrap_new_VideoPlayer, swig_delete_VideoPlayer, swig_VideoPlayer_methods, swig_VideoPlayer_attributes, &swig_VideoPlayer_Sf_SwigStatic, swig_VideoPlayer_meta, swig_VideoPlayer_bases, swig_VideoPlayer_base_names };

static int _wrap_CursorNode_name_set(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *arg1 = (CursorNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("CursorNode::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CursorNode::name",1,"CursorNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CursorNode::name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CursorNode,0))){
    SWIG_fail_ptr("CursorNode_name_set",1,SWIGTYPE_p_CursorNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CursorNode_name_get(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *arg1 = (CursorNode *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("CursorNode::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CursorNode::name",1,"CursorNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CursorNode,0))){
    SWIG_fail_ptr("CursorNode_name_get",1,SWIGTYPE_p_CursorNode);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CursorNode_soundFile_set(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *arg1 = (CursorNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("CursorNode::soundFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CursorNode::soundFile",1,"CursorNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("CursorNode::soundFile",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CursorNode,0))){
    SWIG_fail_ptr("CursorNode_soundFile_set",1,SWIGTYPE_p_CursorNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->soundFile = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CursorNode_soundFile_get(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *arg1 = (CursorNode *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("CursorNode::soundFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CursorNode::soundFile",1,"CursorNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CursorNode,0))){
    SWIG_fail_ptr("CursorNode_soundFile_get",1,SWIGTYPE_p_CursorNode);
  }
  
  result = (std::string *) & ((arg1)->soundFile);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CursorNode_id_set(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *arg1 = (CursorNode *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("CursorNode::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CursorNode::id",1,"CursorNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CursorNode::id",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CursorNode,0))){
    SWIG_fail_ptr("CursorNode_id_set",1,SWIGTYPE_p_CursorNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CursorNode_id_get(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *arg1 = (CursorNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("CursorNode::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CursorNode::id",1,"CursorNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CursorNode,0))){
    SWIG_fail_ptr("CursorNode_id_get",1,SWIGTYPE_p_CursorNode);
  }
  
  result =  ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CursorNode_cursor_set(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *arg1 = (CursorNode *) 0 ;
  draw_base *arg2 = (draw_base *) 0 ;
  
  SWIG_check_num_args("CursorNode::cursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CursorNode::cursor",1,"CursorNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CursorNode::cursor",2,"draw_base *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CursorNode,0))){
    SWIG_fail_ptr("CursorNode_cursor_set",1,SWIGTYPE_p_CursorNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_draw_base,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CursorNode_cursor_set",2,SWIGTYPE_p_draw_base);
  }
  
  if (arg1) (arg1)->cursor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CursorNode_cursor_get(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *arg1 = (CursorNode *) 0 ;
  draw_base *result = 0 ;
  
  SWIG_check_num_args("CursorNode::cursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CursorNode::cursor",1,"CursorNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CursorNode,0))){
    SWIG_fail_ptr("CursorNode_cursor_get",1,SWIGTYPE_p_CursorNode);
  }
  
  result = (draw_base *) ((arg1)->cursor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_draw_base,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CursorNode(lua_State* L) {
  int SWIG_arg = 0;
  CursorNode *result = 0 ;
  
  SWIG_check_num_args("CursorNode::CursorNode",0,0)
  result = (CursorNode *)new CursorNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CursorNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CursorNode(void *obj) {
CursorNode *arg1 = (CursorNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_CursorNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CursorNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CursorNode_attributes[] = {
    { "name", _wrap_CursorNode_name_get, _wrap_CursorNode_name_set },
    { "soundFile", _wrap_CursorNode_soundFile_get, _wrap_CursorNode_soundFile_set },
    { "id", _wrap_CursorNode_id_get, _wrap_CursorNode_id_set },
    { "cursor", _wrap_CursorNode_cursor_get, _wrap_CursorNode_cursor_set },
    {0,0,0}
};
static swig_lua_method swig_CursorNode_methods[]= {
    {0,0}
};
static swig_lua_method swig_CursorNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CursorNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CursorNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CursorNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CursorNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CursorNode_Sf_SwigStatic = {
    "CursorNode",
    swig_CursorNode_Sf_SwigStatic_methods,
    swig_CursorNode_Sf_SwigStatic_attributes,
    swig_CursorNode_Sf_SwigStatic_constants,
    swig_CursorNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CursorNode_bases[] = {0};
static const char *swig_CursorNode_base_names[] = {0};
static swig_lua_class _wrap_class_CursorNode = { "CursorNode", "CursorNode", &SWIGTYPE_p_CursorNode,_proxy__wrap_new_CursorNode, swig_delete_CursorNode, swig_CursorNode_methods, swig_CursorNode_attributes, &swig_CursorNode_Sf_SwigStatic, swig_CursorNode_meta, swig_CursorNode_bases, swig_CursorNode_base_names };

static int _wrap_new_Cursor(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  Cursor *result = 0 ;
  
  SWIG_check_num_args("Cursor::Cursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::Cursor",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Cursor",1,SWIGTYPE_p_Game);
  }
  
  result = (Cursor *)new Cursor(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Cursor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cursor_initCursorSys(lua_State* L) {
  int SWIG_arg = 0;
  Cursor *arg1 = (Cursor *) 0 ;
  
  SWIG_check_num_args("Cursor::initCursorSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::initCursorSys",1,"Cursor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cursor,0))){
    SWIG_fail_ptr("Cursor_initCursorSys",1,SWIGTYPE_p_Cursor);
  }
  
  (arg1)->initCursorSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cursor_RegisterCursor(lua_State* L) {
  int SWIG_arg = 0;
  Cursor *arg1 = (Cursor *) 0 ;
  cstr arg2 = (cstr) 0 ;
  size_t result;
  
  SWIG_check_num_args("Cursor::RegisterCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::RegisterCursor",1,"Cursor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Cursor::RegisterCursor",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cursor,0))){
    SWIG_fail_ptr("Cursor_RegisterCursor",1,SWIGTYPE_p_Cursor);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->RegisterCursor(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cursor_RemoveCursor(lua_State* L) {
  int SWIG_arg = 0;
  Cursor *arg1 = (Cursor *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("Cursor::RemoveCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::RemoveCursor",1,"Cursor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Cursor::RemoveCursor",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cursor,0))){
    SWIG_fail_ptr("Cursor_RemoveCursor",1,SWIGTYPE_p_Cursor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->RemoveCursor(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cursor_LoadCursors(lua_State* L) {
  int SWIG_arg = 0;
  Cursor *arg1 = (Cursor *) 0 ;
  cstr arg2 = (cstr) 0 ;
  SwigValueWrapper< std::vector< size_t > > result;
  
  SWIG_check_num_args("Cursor::LoadCursors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::LoadCursors",1,"Cursor *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Cursor::LoadCursors",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cursor,0))){
    SWIG_fail_ptr("Cursor_LoadCursors",1,SWIGTYPE_p_Cursor);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (arg1)->LoadCursors(arg2);
  {
    std::vector< size_t > * resultptr = new std::vector< size_t >((const std::vector< size_t > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_size_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cursor_ChangeToCursor(lua_State* L) {
  int SWIG_arg = 0;
  Cursor *arg1 = (Cursor *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Cursor::ChangeToCursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::ChangeToCursor",1,"Cursor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Cursor::ChangeToCursor",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cursor,0))){
    SWIG_fail_ptr("Cursor_ChangeToCursor",1,SWIGTYPE_p_Cursor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ChangeToCursor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cursor_ToggleMouseGrab(lua_State* L) {
  int SWIG_arg = 0;
  Cursor *arg1 = (Cursor *) 0 ;
  
  SWIG_check_num_args("Cursor::ToggleMouseGrab",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::ToggleMouseGrab",1,"Cursor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cursor,0))){
    SWIG_fail_ptr("Cursor_ToggleMouseGrab",1,SWIGTYPE_p_Cursor);
  }
  
  (arg1)->ToggleMouseGrab();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cursor_DrawCursor(lua_State* L) {
  int SWIG_arg = 0;
  Cursor *arg1 = (Cursor *) 0 ;
  
  SWIG_check_num_args("Cursor::DrawCursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::DrawCursor",1,"Cursor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cursor,0))){
    SWIG_fail_ptr("Cursor_DrawCursor",1,SWIGTYPE_p_Cursor);
  }
  
  (arg1)->DrawCursor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Cursor_PlayCursorSound(lua_State* L) {
  int SWIG_arg = 0;
  Cursor *arg1 = (Cursor *) 0 ;
  
  SWIG_check_num_args("Cursor::PlayCursorSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Cursor::PlayCursorSound",1,"Cursor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cursor,0))){
    SWIG_fail_ptr("Cursor_PlayCursorSound",1,SWIGTYPE_p_Cursor);
  }
  
  (arg1)->PlayCursorSound();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Cursor(void *obj) {
Cursor *arg1 = (Cursor *) obj;
delete arg1;
}
static int _proxy__wrap_new_Cursor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Cursor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Cursor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Cursor_methods[]= {
    { "initCursorSys", _wrap_Cursor_initCursorSys},
    { "RegisterCursor", _wrap_Cursor_RegisterCursor},
    { "RemoveCursor", _wrap_Cursor_RemoveCursor},
    { "LoadCursors", _wrap_Cursor_LoadCursors},
    { "ChangeToCursor", _wrap_Cursor_ChangeToCursor},
    { "ToggleMouseGrab", _wrap_Cursor_ToggleMouseGrab},
    { "DrawCursor", _wrap_Cursor_DrawCursor},
    { "PlayCursorSound", _wrap_Cursor_PlayCursorSound},
    {0,0}
};
static swig_lua_method swig_Cursor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Cursor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Cursor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Cursor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Cursor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Cursor_Sf_SwigStatic = {
    "Cursor",
    swig_Cursor_Sf_SwigStatic_methods,
    swig_Cursor_Sf_SwigStatic_attributes,
    swig_Cursor_Sf_SwigStatic_constants,
    swig_Cursor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Cursor_bases[] = {0};
static const char *swig_Cursor_base_names[] = {0};
static swig_lua_class _wrap_class_Cursor = { "Cursor", "Cursor", &SWIGTYPE_p_Cursor,_proxy__wrap_new_Cursor, swig_delete_Cursor, swig_Cursor_methods, swig_Cursor_attributes, &swig_Cursor_Sf_SwigStatic, swig_Cursor_meta, swig_Cursor_bases, swig_Cursor_base_names };

static int _wrap_raw_input_eventType_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::eventType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::eventType",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::eventType",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_eventType_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->eventType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_eventType_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::eventType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::eventType",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_eventType_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->eventType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_type_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::type",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::type",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_type_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_type_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::type",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_type_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_state_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::state",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::state",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_state_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_state_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::state",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_state_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->state);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_mx_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::mx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::mx",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::mx",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_mx_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->mx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_mx_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::mx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::mx",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_mx_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->mx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_my_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::my",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::my",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::my",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_my_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->my = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_my_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::my",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::my",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_my_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->my);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_mx2_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::mx2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::mx2",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::mx2",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_mx2_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->mx2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_mx2_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::mx2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::mx2",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_mx2_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->mx2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_my2_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::my2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::my2",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::my2",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_my2_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->my2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_my2_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::my2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::my2",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_my2_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->my2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_mb_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::mb",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::mb",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::mb",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_mb_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->mb = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_mb_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::mb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::mb",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_mb_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->mb);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_clicks_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::clicks",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::clicks",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::clicks",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_clicks_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->clicks = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_clicks_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::clicks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::clicks",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_clicks_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->clicks);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_txt_editing_len_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::txt_editing_len",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::txt_editing_len",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::txt_editing_len",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_txt_editing_len_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->txt_editing_len = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_txt_editing_len_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::txt_editing_len",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::txt_editing_len",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_txt_editing_len_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->txt_editing_len);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_key_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::key",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::key",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_key_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->key = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_key_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::key",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::key",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_key_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->key);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_winID_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("raw_input::winID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::winID",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::winID",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_winID_set",1,SWIGTYPE_p_raw_input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->winID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_winID_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  size_t result;
  
  SWIG_check_num_args("raw_input::winID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::winID",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_winID_get",1,SWIGTYPE_p_raw_input);
  }
  
  result =  ((arg1)->winID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_pressure_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("raw_input::pressure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::pressure",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::pressure",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_pressure_set",1,SWIGTYPE_p_raw_input);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->pressure = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_pressure_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double result;
  
  SWIG_check_num_args("raw_input::pressure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::pressure",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_pressure_get",1,SWIGTYPE_p_raw_input);
  }
  
  result = (double) ((arg1)->pressure);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_tx_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("raw_input::tx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::tx",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::tx",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_tx_set",1,SWIGTYPE_p_raw_input);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->tx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_tx_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double result;
  
  SWIG_check_num_args("raw_input::tx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::tx",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_tx_get",1,SWIGTYPE_p_raw_input);
  }
  
  result = (double) ((arg1)->tx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_ty_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("raw_input::ty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::ty",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::ty",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_ty_set",1,SWIGTYPE_p_raw_input);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_ty_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double result;
  
  SWIG_check_num_args("raw_input::ty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::ty",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_ty_get",1,SWIGTYPE_p_raw_input);
  }
  
  result = (double) ((arg1)->ty);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_tdx_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("raw_input::tdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::tdx",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::tdx",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_tdx_set",1,SWIGTYPE_p_raw_input);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->tdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_tdx_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double result;
  
  SWIG_check_num_args("raw_input::tdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::tdx",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_tdx_get",1,SWIGTYPE_p_raw_input);
  }
  
  result = (double) ((arg1)->tdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_tdy_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("raw_input::tdy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::tdy",1,"raw_input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("raw_input::tdy",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_tdy_set",1,SWIGTYPE_p_raw_input);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->tdy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_tdy_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  double result;
  
  SWIG_check_num_args("raw_input::tdy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::tdy",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_tdy_get",1,SWIGTYPE_p_raw_input);
  }
  
  result = (double) ((arg1)->tdy);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_txtBuffer_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("raw_input::txtBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::txtBuffer",1,"raw_input *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("raw_input::txtBuffer",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_txtBuffer_set",1,SWIGTYPE_p_raw_input);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->txtBuffer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_txtBuffer_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("raw_input::txtBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::txtBuffer",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_txtBuffer_get",1,SWIGTYPE_p_raw_input);
  }
  
  result = (std::string *) & ((arg1)->txtBuffer);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_txtEditing_set(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("raw_input::txtEditing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::txtEditing",1,"raw_input *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("raw_input::txtEditing",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_txtEditing_set",1,SWIGTYPE_p_raw_input);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->txtEditing = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_raw_input_txtEditing_get(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *arg1 = (raw_input *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("raw_input::txtEditing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("raw_input::txtEditing",1,"raw_input *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_raw_input,0))){
    SWIG_fail_ptr("raw_input_txtEditing_get",1,SWIGTYPE_p_raw_input);
  }
  
  result = (std::string *) & ((arg1)->txtEditing);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_raw_input(lua_State* L) {
  int SWIG_arg = 0;
  raw_input *result = 0 ;
  
  SWIG_check_num_args("raw_input::raw_input",0,0)
  result = (raw_input *)new raw_input();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_raw_input,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_raw_input(void *obj) {
raw_input *arg1 = (raw_input *) obj;
delete arg1;
}
static int _proxy__wrap_new_raw_input(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_raw_input);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_raw_input_attributes[] = {
    { "eventType", _wrap_raw_input_eventType_get, _wrap_raw_input_eventType_set },
    { "type", _wrap_raw_input_type_get, _wrap_raw_input_type_set },
    { "state", _wrap_raw_input_state_get, _wrap_raw_input_state_set },
    { "mx", _wrap_raw_input_mx_get, _wrap_raw_input_mx_set },
    { "my", _wrap_raw_input_my_get, _wrap_raw_input_my_set },
    { "mx2", _wrap_raw_input_mx2_get, _wrap_raw_input_mx2_set },
    { "my2", _wrap_raw_input_my2_get, _wrap_raw_input_my2_set },
    { "mb", _wrap_raw_input_mb_get, _wrap_raw_input_mb_set },
    { "clicks", _wrap_raw_input_clicks_get, _wrap_raw_input_clicks_set },
    { "txt_editing_len", _wrap_raw_input_txt_editing_len_get, _wrap_raw_input_txt_editing_len_set },
    { "key", _wrap_raw_input_key_get, _wrap_raw_input_key_set },
    { "winID", _wrap_raw_input_winID_get, _wrap_raw_input_winID_set },
    { "pressure", _wrap_raw_input_pressure_get, _wrap_raw_input_pressure_set },
    { "tx", _wrap_raw_input_tx_get, _wrap_raw_input_tx_set },
    { "ty", _wrap_raw_input_ty_get, _wrap_raw_input_ty_set },
    { "tdx", _wrap_raw_input_tdx_get, _wrap_raw_input_tdx_set },
    { "tdy", _wrap_raw_input_tdy_get, _wrap_raw_input_tdy_set },
    { "txtBuffer", _wrap_raw_input_txtBuffer_get, _wrap_raw_input_txtBuffer_set },
    { "txtEditing", _wrap_raw_input_txtEditing_get, _wrap_raw_input_txtEditing_set },
    {0,0,0}
};
static swig_lua_method swig_raw_input_methods[]= {
    {0,0}
};
static swig_lua_method swig_raw_input_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_raw_input_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_raw_input_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_raw_input_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_raw_input_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_raw_input_Sf_SwigStatic = {
    "raw_input",
    swig_raw_input_Sf_SwigStatic_methods,
    swig_raw_input_Sf_SwigStatic_attributes,
    swig_raw_input_Sf_SwigStatic_constants,
    swig_raw_input_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_raw_input_bases[] = {0};
static const char *swig_raw_input_base_names[] = {0};
static swig_lua_class _wrap_class_raw_input = { "raw_input", "raw_input", &SWIGTYPE_p_raw_input,_proxy__wrap_new_raw_input, swig_delete_raw_input, swig_raw_input_methods, swig_raw_input_attributes, &swig_raw_input_Sf_SwigStatic, swig_raw_input_meta, swig_raw_input_bases, swig_raw_input_base_names };

static int _wrap_KeyNode_key_set(lua_State* L) {
  int SWIG_arg = 0;
  KeyNode *arg1 = (KeyNode *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KeyNode::key",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KeyNode::key",1,"KeyNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KeyNode::key",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KeyNode,0))){
    SWIG_fail_ptr("KeyNode_key_set",1,SWIGTYPE_p_KeyNode);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->key = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyNode_key_get(lua_State* L) {
  int SWIG_arg = 0;
  KeyNode *arg1 = (KeyNode *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KeyNode::key",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KeyNode::key",1,"KeyNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KeyNode,0))){
    SWIG_fail_ptr("KeyNode_key_get",1,SWIGTYPE_p_KeyNode);
  }
  
  result =  ((arg1)->key);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyNode_val_set(lua_State* L) {
  int SWIG_arg = 0;
  KeyNode *arg1 = (KeyNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("KeyNode::val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KeyNode::val",1,"KeyNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("KeyNode::val",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KeyNode,0))){
    SWIG_fail_ptr("KeyNode_val_set",1,SWIGTYPE_p_KeyNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->val = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyNode_val_get(lua_State* L) {
  int SWIG_arg = 0;
  KeyNode *arg1 = (KeyNode *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("KeyNode::val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KeyNode::val",1,"KeyNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KeyNode,0))){
    SWIG_fail_ptr("KeyNode_val_get",1,SWIGTYPE_p_KeyNode);
  }
  
  result = (std::string *) & ((arg1)->val);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  KeyNode *result = 0 ;
  
  SWIG_check_num_args("KeyNode::KeyNode",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KeyNode::KeyNode",1,"size_t");
  if(!lua_isstring(L,2)) SWIG_fail_arg("KeyNode::KeyNode",2,"std::string const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (KeyNode *)new KeyNode(arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KeyNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KeyNode *result = 0 ;
  
  SWIG_check_num_args("KeyNode::KeyNode",0,0)
  result = (KeyNode *)new KeyNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KeyNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyNode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_KeyNode__SWIG_1(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_KeyNode__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_KeyNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KeyNode::KeyNode(size_t,std::string const &)\n"
    "    KeyNode::KeyNode()\n");
  lua_error(L);return 0;
}


static void swig_delete_KeyNode(void *obj) {
KeyNode *arg1 = (KeyNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_KeyNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_KeyNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_KeyNode_attributes[] = {
    { "key", _wrap_KeyNode_key_get, _wrap_KeyNode_key_set },
    { "val", _wrap_KeyNode_val_get, _wrap_KeyNode_val_set },
    {0,0,0}
};
static swig_lua_method swig_KeyNode_methods[]= {
    {0,0}
};
static swig_lua_method swig_KeyNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_KeyNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_KeyNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_KeyNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_KeyNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_KeyNode_Sf_SwigStatic = {
    "KeyNode",
    swig_KeyNode_Sf_SwigStatic_methods,
    swig_KeyNode_Sf_SwigStatic_attributes,
    swig_KeyNode_Sf_SwigStatic_constants,
    swig_KeyNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_KeyNode_bases[] = {0};
static const char *swig_KeyNode_base_names[] = {0};
static swig_lua_class _wrap_class_KeyNode = { "KeyNode", "KeyNode", &SWIGTYPE_p_KeyNode,_proxy__wrap_new_KeyNode, swig_delete_KeyNode, swig_KeyNode_methods, swig_KeyNode_attributes, &swig_KeyNode_Sf_SwigStatic, swig_KeyNode_meta, swig_KeyNode_bases, swig_KeyNode_base_names };

static int _wrap_new_InputMouse(lua_State* L) {
  int SWIG_arg = 0;
  InputMouse *result = 0 ;
  
  SWIG_check_num_args("InputMouse::InputMouse",0,0)
  result = (InputMouse *)new InputMouse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_InputMouse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputMouse_ChangeCoordinates__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  InputMouse *arg1 = (InputMouse *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("InputMouse::ChangeCoordinates",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputMouse::ChangeCoordinates",1,"InputMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InputMouse::ChangeCoordinates",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("InputMouse::ChangeCoordinates",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("InputMouse::ChangeCoordinates",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputMouse,0))){
    SWIG_fail_ptr("InputMouse_ChangeCoordinates",1,SWIGTYPE_p_InputMouse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->ChangeCoordinates(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputMouse_ChangeCoordinates__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  InputMouse *arg1 = (InputMouse *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("InputMouse::ChangeCoordinates",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputMouse::ChangeCoordinates",1,"InputMouse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("InputMouse::ChangeCoordinates",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("InputMouse::ChangeCoordinates",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputMouse,0))){
    SWIG_fail_ptr("InputMouse_ChangeCoordinates",1,SWIGTYPE_p_InputMouse);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->ChangeCoordinates(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputMouse_ChangeCoordinates(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_InputMouse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_InputMouse_ChangeCoordinates__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_InputMouse, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_InputMouse_ChangeCoordinates__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'InputMouse_ChangeCoordinates'\n"
    "  Possible C/C++ prototypes are:\n"
    "    InputMouse::ChangeCoordinates(int,int,int)\n"
    "    InputMouse::ChangeCoordinates(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_InputMouse_GetCoordinates(lua_State* L) {
  int SWIG_arg = 0;
  InputMouse *arg1 = (InputMouse *) 0 ;
  math_point result;
  
  SWIG_check_num_args("InputMouse::GetCoordinates",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputMouse::GetCoordinates",1,"InputMouse *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputMouse,0))){
    SWIG_fail_ptr("InputMouse_GetCoordinates",1,SWIGTYPE_p_InputMouse);
  }
  
  result = (arg1)->GetCoordinates();
  {
    math_point * resultptr = new math_point((const math_point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_math_point,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InputMouse(void *obj) {
InputMouse *arg1 = (InputMouse *) obj;
delete arg1;
}
static int _proxy__wrap_new_InputMouse(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InputMouse);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InputMouse_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InputMouse_methods[]= {
    { "ChangeCoordinates", _wrap_InputMouse_ChangeCoordinates},
    { "GetCoordinates", _wrap_InputMouse_GetCoordinates},
    {0,0}
};
static swig_lua_method swig_InputMouse_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InputMouse_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InputMouse_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InputMouse_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InputMouse_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InputMouse_Sf_SwigStatic = {
    "InputMouse",
    swig_InputMouse_Sf_SwigStatic_methods,
    swig_InputMouse_Sf_SwigStatic_attributes,
    swig_InputMouse_Sf_SwigStatic_constants,
    swig_InputMouse_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InputMouse_bases[] = {0};
static const char *swig_InputMouse_base_names[] = {0};
static swig_lua_class _wrap_class_InputMouse = { "InputMouse", "InputMouse", &SWIGTYPE_p_InputMouse,_proxy__wrap_new_InputMouse, swig_delete_InputMouse, swig_InputMouse_methods, swig_InputMouse_attributes, &swig_InputMouse_Sf_SwigStatic, swig_InputMouse_meta, swig_InputMouse_bases, swig_InputMouse_base_names };

static int _wrap_new_InputKeyboard(lua_State* L) {
  int SWIG_arg = 0;
  InputKeyboard *result = 0 ;
  
  SWIG_check_num_args("InputKeyboard::InputKeyboard",0,0)
  result = (InputKeyboard *)new InputKeyboard();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_InputKeyboard,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputKeyboard_feedBuffer(lua_State* L) {
  int SWIG_arg = 0;
  InputKeyboard *arg1 = (InputKeyboard *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("InputKeyboard::feedBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputKeyboard::feedBuffer",1,"InputKeyboard *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("InputKeyboard::feedBuffer",2,"std::string &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputKeyboard,0))){
    SWIG_fail_ptr("InputKeyboard_feedBuffer",1,SWIGTYPE_p_InputKeyboard);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("InputKeyboard_feedBuffer",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->feedBuffer(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputKeyboard_toggleTextMode(lua_State* L) {
  int SWIG_arg = 0;
  InputKeyboard *arg1 = (InputKeyboard *) 0 ;
  
  SWIG_check_num_args("InputKeyboard::toggleTextMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputKeyboard::toggleTextMode",1,"InputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputKeyboard,0))){
    SWIG_fail_ptr("InputKeyboard_toggleTextMode",1,SWIGTYPE_p_InputKeyboard);
  }
  
  (arg1)->toggleTextMode();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputKeyboard_getText(lua_State* L) {
  int SWIG_arg = 0;
  InputKeyboard *arg1 = (InputKeyboard *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("InputKeyboard::getText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputKeyboard::getText",1,"InputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputKeyboard,0))){
    SWIG_fail_ptr("InputKeyboard_getText",1,SWIGTYPE_p_InputKeyboard);
  }
  
  result = (char *)(arg1)->getText();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputKeyboard_GetTextMode(lua_State* L) {
  int SWIG_arg = 0;
  InputKeyboard *arg1 = (InputKeyboard *) 0 ;
  bool result;
  
  SWIG_check_num_args("InputKeyboard::GetTextMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputKeyboard::GetTextMode",1,"InputKeyboard const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputKeyboard,0))){
    SWIG_fail_ptr("InputKeyboard_GetTextMode",1,SWIGTYPE_p_InputKeyboard);
  }
  
  result = (bool)((InputKeyboard const *)arg1)->GetTextMode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputKeyboard_StartTextInput(lua_State* L) {
  int SWIG_arg = 0;
  InputKeyboard *arg1 = (InputKeyboard *) 0 ;
  
  SWIG_check_num_args("InputKeyboard::StartTextInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputKeyboard::StartTextInput",1,"InputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputKeyboard,0))){
    SWIG_fail_ptr("InputKeyboard_StartTextInput",1,SWIGTYPE_p_InputKeyboard);
  }
  
  (arg1)->StartTextInput();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputKeyboard_StopTextInput(lua_State* L) {
  int SWIG_arg = 0;
  InputKeyboard *arg1 = (InputKeyboard *) 0 ;
  
  SWIG_check_num_args("InputKeyboard::StopTextInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InputKeyboard::StopTextInput",1,"InputKeyboard *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_InputKeyboard,0))){
    SWIG_fail_ptr("InputKeyboard_StopTextInput",1,SWIGTYPE_p_InputKeyboard);
  }
  
  (arg1)->StopTextInput();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InputKeyboard(void *obj) {
InputKeyboard *arg1 = (InputKeyboard *) obj;
delete arg1;
}
static int _proxy__wrap_new_InputKeyboard(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InputKeyboard);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InputKeyboard_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InputKeyboard_methods[]= {
    { "feedBuffer", _wrap_InputKeyboard_feedBuffer},
    { "toggleTextMode", _wrap_InputKeyboard_toggleTextMode},
    { "getText", _wrap_InputKeyboard_getText},
    { "GetTextMode", _wrap_InputKeyboard_GetTextMode},
    { "StartTextInput", _wrap_InputKeyboard_StartTextInput},
    { "StopTextInput", _wrap_InputKeyboard_StopTextInput},
    {0,0}
};
static swig_lua_method swig_InputKeyboard_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InputKeyboard_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InputKeyboard_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InputKeyboard_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InputKeyboard_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InputKeyboard_Sf_SwigStatic = {
    "InputKeyboard",
    swig_InputKeyboard_Sf_SwigStatic_methods,
    swig_InputKeyboard_Sf_SwigStatic_attributes,
    swig_InputKeyboard_Sf_SwigStatic_constants,
    swig_InputKeyboard_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InputKeyboard_bases[] = {0};
static const char *swig_InputKeyboard_base_names[] = {0};
static swig_lua_class _wrap_class_InputKeyboard = { "InputKeyboard", "InputKeyboard", &SWIGTYPE_p_InputKeyboard,_proxy__wrap_new_InputKeyboard, swig_delete_InputKeyboard, swig_InputKeyboard_methods, swig_InputKeyboard_attributes, &swig_InputKeyboard_Sf_SwigStatic, swig_InputKeyboard_meta, swig_InputKeyboard_bases, swig_InputKeyboard_base_names };

static int _wrap_new_Input(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  Input *result = 0 ;
  
  SWIG_check_num_args("Input::Input",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::Input",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("new_Input",1,SWIGTYPE_p_Game);
  }
  
  result = (Input *)new Input(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Input,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_LoadKeyScript(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Input::LoadKeyScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::LoadKeyScript",1,"Input *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Input::LoadKeyScript",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_LoadKeyScript",1,SWIGTYPE_p_Input);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->LoadKeyScript(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_LoadDefaultKeyBindings(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Input::LoadDefaultKeyBindings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::LoadDefaultKeyBindings",1,"Input *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Input::LoadDefaultKeyBindings",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_LoadDefaultKeyBindings",1,SWIGTYPE_p_Input);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->LoadDefaultKeyBindings(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_LoadCurrentKeyBindings(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Input::LoadCurrentKeyBindings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::LoadCurrentKeyBindings",1,"Input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Input::LoadCurrentKeyBindings",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_LoadCurrentKeyBindings",1,SWIGTYPE_p_Input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->LoadCurrentKeyBindings(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_UpdateInput(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  SDL_Event *arg2 = (SDL_Event *) 0 ;
  
  SWIG_check_num_args("Input::UpdateInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::UpdateInput",1,"Input *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Input::UpdateInput",2,"SDL_Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_UpdateInput",1,SWIGTYPE_p_Input);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("Input_UpdateInput",2,SWIGTYPE_p_SDL_Event);
  }
  
  (arg1)->UpdateInput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_ProcessUIInput(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  Button *arg2 = (Button *) 0 ;
  textbox *arg3 = (textbox *) 0 ;
  
  SWIG_check_num_args("Input::ProcessUIInput",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::ProcessUIInput",1,"Input *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Input::ProcessUIInput",2,"Button *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Input::ProcessUIInput",3,"textbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_ProcessUIInput",1,SWIGTYPE_p_Input);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Button,0))){
    SWIG_fail_ptr("Input_ProcessUIInput",2,SWIGTYPE_p_Button);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_textbox,0))){
    SWIG_fail_ptr("Input_ProcessUIInput",3,SWIGTYPE_p_textbox);
  }
  
  (arg1)->ProcessUIInput(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_ProcessUnitInput(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  Unit *arg2 = (Unit *) 0 ;
  
  SWIG_check_num_args("Input::ProcessUnitInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::ProcessUnitInput",1,"Input *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Input::ProcessUnitInput",2,"Unit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_ProcessUnitInput",1,SWIGTYPE_p_Input);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Unit,0))){
    SWIG_fail_ptr("Input_ProcessUnitInput",2,SWIGTYPE_p_Unit);
  }
  
  (arg1)->ProcessUnitInput(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_ChangeKeyBinding(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Input::ChangeKeyBinding",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::ChangeKeyBinding",1,"Input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Input::ChangeKeyBinding",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Input::ChangeKeyBinding",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_ChangeKeyBinding",1,SWIGTYPE_p_Input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->ChangeKeyBinding(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_SaveKeyBindings(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Input::SaveKeyBindings",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::SaveKeyBindings",1,"Input *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Input::SaveKeyBindings",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_SaveKeyBindings",1,SWIGTYPE_p_Input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SaveKeyBindings(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_GetRawInput(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  raw_input *result = 0 ;
  
  SWIG_check_num_args("Input::GetRawInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::GetRawInput",1,"Input const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_GetRawInput",1,SWIGTYPE_p_Input);
  }
  
  result = (raw_input *) &((Input const *)arg1)->GetRawInput();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_raw_input,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Input_GetKeyName(lua_State* L) {
  int SWIG_arg = 0;
  Input *arg1 = (Input *) 0 ;
  size_t arg2 ;
  std::string result;
  
  SWIG_check_num_args("Input::GetKeyName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Input::GetKeyName",1,"Input const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Input::GetKeyName",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input,0))){
    SWIG_fail_ptr("Input_GetKeyName",1,SWIGTYPE_p_Input);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = ((Input const *)arg1)->GetKeyName(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Input(void *obj) {
Input *arg1 = (Input *) obj;
delete arg1;
}
static int _proxy__wrap_new_Input(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Input);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Input_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Input_methods[]= {
    { "LoadKeyScript", _wrap_Input_LoadKeyScript},
    { "LoadDefaultKeyBindings", _wrap_Input_LoadDefaultKeyBindings},
    { "LoadCurrentKeyBindings", _wrap_Input_LoadCurrentKeyBindings},
    { "UpdateInput", _wrap_Input_UpdateInput},
    { "ProcessUIInput", _wrap_Input_ProcessUIInput},
    { "ProcessUnitInput", _wrap_Input_ProcessUnitInput},
    { "ChangeKeyBinding", _wrap_Input_ChangeKeyBinding},
    { "SaveKeyBindings", _wrap_Input_SaveKeyBindings},
    { "GetRawInput", _wrap_Input_GetRawInput},
    { "GetKeyName", _wrap_Input_GetKeyName},
    {0,0}
};
static swig_lua_method swig_Input_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Input_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Input_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Input_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Input_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Input_Sf_SwigStatic = {
    "Input",
    swig_Input_Sf_SwigStatic_methods,
    swig_Input_Sf_SwigStatic_attributes,
    swig_Input_Sf_SwigStatic_constants,
    swig_Input_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Input_bases[] = {0,0,0};
static const char *swig_Input_base_names[] = {"InputMouse *","InputKeyboard *",0};
static swig_lua_class _wrap_class_Input = { "Input", "Input", &SWIGTYPE_p_Input,_proxy__wrap_new_Input, swig_delete_Input, swig_Input_methods, swig_Input_attributes, &swig_Input_Sf_SwigStatic, swig_Input_meta, swig_Input_bases, swig_Input_base_names };

static int _wrap_new_Game__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  Game *result = 0 ;
  
  SWIG_check_num_args("Game::Game",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("Game::Game",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (Game *)new Game(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Game__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Game *result = 0 ;
  
  SWIG_check_num_args("Game::Game",0,0)
  result = (Game *)new Game();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Game__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  cstr arg1 = (cstr) 0 ;
  bool arg2 ;
  Game *result = 0 ;
  
  SWIG_check_num_args("Game::Game",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Game::Game",1,"cstr");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Game::Game",2,"bool");
  arg1 = (cstr)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Game *)new Game(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Game__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  cstr arg1 = (cstr) 0 ;
  Game *result = 0 ;
  
  SWIG_check_num_args("Game::Game",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Game::Game",1,"cstr");
  arg1 = (cstr)lua_tostring(L, 1);
  result = (Game *)new Game(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Game__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char **arg2 ;
  bool arg3 ;
  Game *result = 0 ;
  
  SWIG_check_num_args("Game::Game",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Game::Game",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Game::Game",2,"char *[]");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Game::Game",3,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("new_Game",2,SWIGTYPE_p_p_char);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Game *)new Game(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Game__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char **arg2 ;
  Game *result = 0 ;
  
  SWIG_check_num_args("Game::Game",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Game::Game",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Game::Game",2,"char *[]");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("new_Game",2,SWIGTYPE_p_p_char);
  }
  
  result = (Game *)new Game(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Game__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  cstr arg1 = (cstr) 0 ;
  int arg2 ;
  char **arg3 ;
  bool arg4 ;
  Game *result = 0 ;
  
  SWIG_check_num_args("Game::Game",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Game::Game",1,"cstr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Game::Game",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Game::Game",3,"char *[]");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Game::Game",4,"bool");
  arg1 = (cstr)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("new_Game",3,SWIGTYPE_p_p_char);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Game *)new Game(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Game__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  cstr arg1 = (cstr) 0 ;
  int arg2 ;
  char **arg3 ;
  Game *result = 0 ;
  
  SWIG_check_num_args("Game::Game",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Game::Game",1,"cstr");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Game::Game",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Game::Game",3,"char *[]");
  arg1 = (cstr)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("new_Game",3,SWIGTYPE_p_p_char);
  }
  
  result = (Game *)new Game(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Game(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Game__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Game__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Game__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Game__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Game__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Game__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Game__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Game__SWIG_6(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Game'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Game::Game(bool)\n"
    "    Game::Game()\n"
    "    Game::Game(cstr,bool)\n"
    "    Game::Game(cstr)\n"
    "    Game::Game(int,char *[],bool)\n"
    "    Game::Game(int,char *[])\n"
    "    Game::Game(cstr,int,char *[],bool)\n"
    "    Game::Game(cstr,int,char *[])\n");
  lua_error(L);return 0;
}


static int _wrap_Game_LoadGame(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Game::LoadGame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::LoadGame",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::LoadGame",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_LoadGame",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->LoadGame(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_LoadGameConstants__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("Game::LoadGameConstants",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::LoadGameConstants",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::LoadGameConstants",2,"cstr");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Game::LoadGameConstants",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_LoadGameConstants",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->LoadGameConstants(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_LoadGameConstants__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Game::LoadGameConstants",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::LoadGameConstants",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::LoadGameConstants",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_LoadGameConstants",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->LoadGameConstants(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_LoadGameConstants(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Game_LoadGameConstants__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Game, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Game_LoadGameConstants__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Game_LoadGameConstants'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Game::LoadGameConstants(cstr,bool)\n"
    "    Game::LoadGameConstants(cstr)\n");
  lua_error(L);return 0;
}


static int _wrap_Game_LoadGlobalModules(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Game::LoadGlobalModules",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::LoadGlobalModules",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::LoadGlobalModules",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_LoadGlobalModules",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->LoadGlobalModules(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_LoadUIs(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Game::LoadUIs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::LoadUIs",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::LoadUIs",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_LoadUIs",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->LoadUIs(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_initEditorFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::initEditorFrameBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::initEditorFrameBuffer",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_initEditorFrameBuffer",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->initEditorFrameBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_init(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  bool result;
  
  SWIG_check_num_args("Game::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::init",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_init",1,SWIGTYPE_p_Game);
  }
  
  result = (bool)(arg1)->init();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_initSubSys(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::initSubSys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::initSubSys",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_initSubSys",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->initSubSys();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_loadLevel(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  bool result;
  
  SWIG_check_num_args("Game::loadLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::loadLevel",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::loadLevel",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_loadLevel",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  result = (bool)(arg1)->loadLevel(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetCurrentLevel(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  Level *result = 0 ;
  
  SWIG_check_num_args("Game::GetCurrentLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetCurrentLevel",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetCurrentLevel",1,SWIGTYPE_p_Game);
  }
  
  result = (Level *)(arg1)->GetCurrentLevel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Level,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_SetHeroIDForCurrentLevel(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Game::SetHeroIDForCurrentLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::SetHeroIDForCurrentLevel",1,"Game *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Game::SetHeroIDForCurrentLevel",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_SetHeroIDForCurrentLevel",1,SWIGTYPE_p_Game);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->SetHeroIDForCurrentLevel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_SetHeroUnitAsLoaded(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::SetHeroUnitAsLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::SetHeroUnitAsLoaded",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_SetHeroUnitAsLoaded",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->SetHeroUnitAsLoaded();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_UnsetHeroUnitAsLoaded(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::UnsetHeroUnitAsLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::UnsetHeroUnitAsLoaded",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_UnsetHeroUnitAsLoaded",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->UnsetHeroUnitAsLoaded();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t *arg2 = 0 ;
  SDL_Renderer *result = 0 ;
  
  SWIG_check_num_args("Game::GetRenderer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetRenderer",1,"Game *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Game::GetRenderer",2,"size_t &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetRenderer",1,SWIGTYPE_p_Game);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("Game_GetRenderer",2,SWIGTYPE_p_size_t);
  }
  
  result = (SDL_Renderer *) &(arg1)->GetRenderer(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Renderer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetEvents(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  SDL_Event *result = 0 ;
  
  SWIG_check_num_args("Game::GetEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetEvents",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetEvents",1,SWIGTYPE_p_Game);
  }
  
  result = (SDL_Event *) &(arg1)->GetEvents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SDL_Event,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetMainTimer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Game::GetMainTimer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetMainTimer",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetMainTimer",1,SWIGTYPE_p_Game);
  }
  
  result = ((Game const *)arg1)->GetMainTimer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetHeroID(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Game::GetHeroID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetHeroID",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetHeroID",1,SWIGTYPE_p_Game);
  }
  
  result = ((Game const *)arg1)->GetHeroID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_isMultithreaded(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  bool result;
  
  SWIG_check_num_args("Game::isMultithreaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::isMultithreaded",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_isMultithreaded",1,SWIGTYPE_p_Game);
  }
  
  result = (bool)((Game const *)arg1)->isMultithreaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_isGamePaused(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  bool result;
  
  SWIG_check_num_args("Game::isGamePaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::isGamePaused",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_isGamePaused",1,SWIGTYPE_p_Game);
  }
  
  result = (bool)((Game const *)arg1)->isGamePaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetRelativity(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  bool result;
  
  SWIG_check_num_args("Game::GetRelativity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetRelativity",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetRelativity",1,SWIGTYPE_p_Game);
  }
  
  result = (bool)((Game const *)arg1)->GetRelativity();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_isEngineClosing(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  bool result;
  
  SWIG_check_num_args("Game::isEngineClosing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::isEngineClosing",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_isEngineClosing",1,SWIGTYPE_p_Game);
  }
  
  result = (bool)((Game const *)arg1)->isEngineClosing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_noHero(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  bool result;
  
  SWIG_check_num_args("Game::noHero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::noHero",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_noHero",1,SWIGTYPE_p_Game);
  }
  
  result = (bool)((Game const *)arg1)->noHero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Game::GetFrameBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetFrameBuffer",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetFrameBuffer",1,SWIGTYPE_p_Game);
  }
  
  result = (char *)((Game const *)arg1)->GetFrameBuffer();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetSizeOfFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Game::GetSizeOfFrameBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetSizeOfFrameBuffer",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetSizeOfFrameBuffer",1,SWIGTYPE_p_Game);
  }
  
  result = ((Game const *)arg1)->GetSizeOfFrameBuffer();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetWinID(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Game::GetWinID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetWinID",1,"Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetWinID",1,SWIGTYPE_p_Game);
  }
  
  result = ((Game const *)arg1)->GetWinID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_PauseGame(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::PauseGame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::PauseGame",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_PauseGame",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->PauseGame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_ResumeGame(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::ResumeGame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ResumeGame",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ResumeGame",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->ResumeGame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_LoadSaveData(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Game::LoadSaveData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::LoadSaveData",1,"Game *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Game::LoadSaveData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_LoadSaveData",1,SWIGTYPE_p_Game);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->LoadSaveData((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_SaveData(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("Game::SaveData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::SaveData",1,"Game *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Game::SaveData",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_SaveData",1,SWIGTYPE_p_Game);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SaveData((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_SaveGameSettings(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::SaveGameSettings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::SaveGameSettings",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_SaveGameSettings",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->SaveGameSettings();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_GetSaveDataHandle(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  DataBase *result = 0 ;
  
  SWIG_check_num_args("Game::GetSaveDataHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::GetSaveDataHandle",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_GetSaveDataHandle",1,SWIGTYPE_p_Game);
  }
  
  result = (DataBase *)(arg1)->GetSaveDataHandle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DataBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_FrameCapper(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::FrameCapper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::FrameCapper",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_FrameCapper",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->FrameCapper();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_ClearEditorFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::ClearEditorFrameBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ClearEditorFrameBuffer",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ClearEditorFrameBuffer",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->ClearEditorFrameBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_RestartRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::RestartRenderer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::RestartRenderer",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_RestartRenderer",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->RestartRenderer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_RestartVideoAndSound(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::RestartVideoAndSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::RestartVideoAndSound",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_RestartVideoAndSound",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->RestartVideoAndSound();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_RestartAudio(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::RestartAudio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::RestartAudio",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_RestartAudio",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->RestartAudio();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_RestartVideo(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::RestartVideo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::RestartVideo",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_RestartVideo",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->RestartVideo();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_UnlockRenderer(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Game::UnlockRenderer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::UnlockRenderer",1,"Game *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Game::UnlockRenderer",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_UnlockRenderer",1,SWIGTYPE_p_Game);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->UnlockRenderer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_drawWorld(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::drawWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::drawWorld",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_drawWorld",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->drawWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_playSounds(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::playSounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::playSounds",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_playSounds",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->playSounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_runPhysics(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::runPhysics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::runPhysics",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_runPhysics",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->runPhysics();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_run(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::run",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_run",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->run();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_AddArgument__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("ScriptWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::AddArgument",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::AddArgument",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",1,SWIGTYPE_p_ScriptWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",2,SWIGTYPE_p_std__string);
  }
  
  (arg1)->AddArgument((std::string const &)*arg2);
=======
static int _wrap_Game_stopGame(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::stopGame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::stopGame",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_stopGame",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->stopGame();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_AddArgument__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("ScriptWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::AddArgument",1,"ScriptWrap *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ScriptWrap::AddArgument",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",1,SWIGTYPE_p_ScriptWrap);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->AddArgument(arg2);
=======
static int _wrap_Game_mainGC(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::mainGC",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::mainGC",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_mainGC",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->mainGC();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_AddArgument__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ScriptWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::AddArgument",1,"ScriptWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScriptWrap::AddArgument",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",1,SWIGTYPE_p_ScriptWrap);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->AddArgument(arg2);
=======
static int _wrap_Game_ShowLoadingScreen(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::ShowLoadingScreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ShowLoadingScreen",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ShowLoadingScreen",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->ShowLoadingScreen();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_AddArgument__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("ScriptWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::AddArgument",1,"ScriptWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScriptWrap::AddArgument",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",1,SWIGTYPE_p_ScriptWrap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->AddArgument(arg2);
=======
static int _wrap_Game_UpdateLoadingStatus(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Game::UpdateLoadingStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::UpdateLoadingStatus",1,"Game *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Game::UpdateLoadingStatus",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_UpdateLoadingStatus",1,SWIGTYPE_p_Game);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->UpdateLoadingStatus(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_AddArgument__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ScriptWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::AddArgument",1,"ScriptWrap *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ScriptWrap::AddArgument",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",1,SWIGTYPE_p_ScriptWrap);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->AddArgument(arg2);
=======
static int _wrap_Game_HideLoadingScreen(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::HideLoadingScreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::HideLoadingScreen",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_HideLoadingScreen",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->HideLoadingScreen();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_AddArgument__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  void_ptr arg2 ;
  void_ptr *argp2 ;
  
  SWIG_check_num_args("ScriptWrap::AddArgument",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::AddArgument",1,"ScriptWrap *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ScriptWrap::AddArgument",2,"void_ptr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",1,SWIGTYPE_p_ScriptWrap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_void_ptr,0))){
    SWIG_fail_ptr("ScriptWrap_AddArgument",2,SWIGTYPE_p_void_ptr);
  }
  arg2 = *argp2;
  
  (arg1)->AddArgument(arg2);
=======
static int _wrap_Game_ReplaceLoadingScreen(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Game::ReplaceLoadingScreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ReplaceLoadingScreen",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::ReplaceLoadingScreen",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ReplaceLoadingScreen",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->ReplaceLoadingScreen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_ShowMainMenu(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::ShowMainMenu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ShowMainMenu",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ShowMainMenu",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->ShowMainMenu();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_AddArgument(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ScriptWrap_AddArgument__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_void_ptr, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ScriptWrap_AddArgument__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScriptWrap_AddArgument__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScriptWrap_AddArgument__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScriptWrap_AddArgument__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ScriptWrap_AddArgument__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ScriptWrap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_ScriptWrap_AddArgument__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ScriptWrap_AddArgument'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ScriptWrap::AddArgument(int)\n"
    "    ScriptWrap::AddArgument(std::string const &)\n"
    "    ScriptWrap::AddArgument(char)\n"
    "    ScriptWrap::AddArgument(double)\n"
    "    ScriptWrap::AddArgument(unsigned int)\n"
    "    ScriptWrap::AddArgument(bool)\n"
    "    ScriptWrap::AddArgument(void_ptr)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptWrap_ClearArgs(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("ScriptWrap::ClearArgs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::ClearArgs",1,"ScriptWrap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ScriptWrap::ClearArgs",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_ClearArgs",1,SWIGTYPE_p_ScriptWrap);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->ClearArgs(arg2);
=======
static int _wrap_Game_HideMainMenu(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::HideMainMenu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::HideMainMenu",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_HideMainMenu",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->HideMainMenu();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_ReplaceMainMenu(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Game::ReplaceMainMenu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ReplaceMainMenu",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::ReplaceMainMenu",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ReplaceMainMenu",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->ReplaceMainMenu(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_isInitialized(lua_State* L) {
  int SWIG_arg = 0;
  ScriptWrap *arg1 = (ScriptWrap *) 0 ;
  bool result;
  
  SWIG_check_num_args("ScriptWrap::isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ScriptWrap::isInitialized",1,"ScriptWrap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ScriptWrap,0))){
    SWIG_fail_ptr("ScriptWrap_isInitialized",1,SWIGTYPE_p_ScriptWrap);
  }
  
  result = (bool)((ScriptWrap const *)arg1)->isInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Game_ShowHUD(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::ShowHUD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ShowHUD",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ShowHUD",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->ShowHUD();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_ScriptWrap_NO_ARGS_get(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< fuzzy_obj > *result = 0 ;
  
  SWIG_check_num_args("ScriptWrap::NO_ARGS",0,0)
  result = (std::vector< fuzzy_obj > *)&ScriptWrap::NO_ARGS;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_psudo_type_t,0); SWIG_arg++; 
=======
static int _wrap_Game_HideHUD(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::HideHUD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::HideHUD",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_HideHUD",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->HideHUD();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_ScriptWrap(void *obj) {
ScriptWrap *arg1 = (ScriptWrap *) obj;
delete arg1;
}
static swig_lua_method swig_ScriptWrap_methods[] = {
    {"executeFunction", _wrap_ScriptWrap_executeFunction}, 
    {"AddArgument", _wrap_ScriptWrap_AddArgument}, 
    {"ClearArgs", _wrap_ScriptWrap_ClearArgs}, 
    {"isInitialized", _wrap_ScriptWrap_isInitialized}, 
    {0,0}
};
static swig_lua_attribute swig_ScriptWrap_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ScriptWrap_cls_attributes[] = {
    { "NO_ARGS", _wrap_ScriptWrap_NO_ARGS_get, SWIG_Lua_set_immutable},
    {0,0,0}
};
static swig_lua_method swig_ScriptWrap_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ScriptWrap_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ScriptWrap_bases[] = {0};
static const char *swig_ScriptWrap_base_names[] = {0};
static swig_lua_class _wrap_class_ScriptWrap = { "ScriptWrap", &SWIGTYPE_p_ScriptWrap,_wrap_new_ScriptWrap, swig_delete_ScriptWrap, swig_ScriptWrap_methods, swig_ScriptWrap_attributes, { "ScriptWrap", swig_ScriptWrap_cls_methods, swig_ScriptWrap_cls_attributes, swig_ScriptWrap_cls_constants }, swig_ScriptWrap_bases, swig_ScriptWrap_base_names };

static int _wrap_unknown_return_flag_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("psudo_type::flag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::flag",1,"psudo_type *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("psudo_type::flag",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_flag_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->flag = arg2;
=======
static int _wrap_Game_ReplaceHUD(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Game::ReplaceHUD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ReplaceHUD",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::ReplaceHUD",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ReplaceHUD",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->ReplaceHUD(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_flag_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char result;
  
  SWIG_check_num_args("psudo_type::flag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::flag",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_flag_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (char) ((arg1)->flag);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
=======
static int _wrap_Game_ShowVideoHUD(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::ShowVideoHUD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ShowVideoHUD",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ShowVideoHUD",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->ShowVideoHUD();
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_number_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("psudo_type::number",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::number",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::number",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_number_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->number = arg2;
=======
static int _wrap_Game_HideVideoHUD(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  
  SWIG_check_num_args("Game::HideVideoHUD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::HideVideoHUD",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_HideVideoHUD",1,SWIGTYPE_p_Game);
  }
  
  (arg1)->HideVideoHUD();
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_number_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  int result;
  
  SWIG_check_num_args("psudo_type::number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::number",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_number_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (int) ((arg1)->number);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
=======
static int _wrap_Game_ReplaceVideoHUD(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  cstr arg2 = (cstr) 0 ;
  
  SWIG_check_num_args("Game::ReplaceVideoHUD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ReplaceVideoHUD",1,"Game *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Game::ReplaceVideoHUD",2,"cstr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ReplaceVideoHUD",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (cstr)lua_tostring(L, 2);
  (arg1)->ReplaceVideoHUD(arg2);
  
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_uNumber_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("psudo_type::uNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::uNumber",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::uNumber",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_uNumber_set",1,SWIGTYPE_p_psudo_type);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->uNumber = arg2;
=======
static int _wrap_Game_ShowWindow(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Game::ShowWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::ShowWindow",1,"Game *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Game::ShowWindow",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_ShowWindow",1,SWIGTYPE_p_Game);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->ShowWindow(arg2);
>>>>>>> TheIllusiveMan
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_uNumber_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("psudo_type::uNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::uNumber",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_uNumber_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (unsigned int) ((arg1)->uNumber);
=======
static int _wrap_Game_loadRate_get(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Game::loadRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::loadRate",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_loadRate_get",1,SWIGTYPE_p_Game);
  }
  
  result = (size_t) ((arg1)->loadRate);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_decimal_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("psudo_type::decimal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::decimal",1,"psudo_type *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("psudo_type::decimal",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_decimal_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->decimal = arg2;
  
=======
static int _wrap_Game_WINDOW_WIDTH_get(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Game::WINDOW_WIDTH",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::WINDOW_WIDTH",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_WINDOW_WIDTH_get",1,SWIGTYPE_p_Game);
  }
  
  result = (size_t) ((arg1)->WINDOW_WIDTH);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_decimal_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  double result;
  
  SWIG_check_num_args("psudo_type::decimal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::decimal",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_decimal_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (double) ((arg1)->decimal);
=======
static int _wrap_Game_WINDOW_HEIGHT_get(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Game::WINDOW_HEIGHT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::WINDOW_HEIGHT",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_WINDOW_HEIGHT_get",1,SWIGTYPE_p_Game);
  }
  
  result = (size_t) ((arg1)->WINDOW_HEIGHT);
>>>>>>> TheIllusiveMan
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_answer_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("psudo_type::answer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::answer",1,"psudo_type *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("psudo_type::answer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_answer_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->answer = arg2;
  
=======
static int _wrap_Game_FRAME_FORMAT_SIZE_get(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Game::FRAME_FORMAT_SIZE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::FRAME_FORMAT_SIZE",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_FRAME_FORMAT_SIZE_get",1,SWIGTYPE_p_Game);
  }
  
  result = (size_t) ((arg1)->FRAME_FORMAT_SIZE);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_answer_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  bool result;
  
  SWIG_check_num_args("psudo_type::answer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::answer",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_answer_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (bool) ((arg1)->answer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
=======
static int _wrap_Game_FRAME_FORMAT_get(lua_State* L) {
  int SWIG_arg = 0;
  Game *arg1 = (Game *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("Game::FRAME_FORMAT",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Game::FRAME_FORMAT",1,"Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Game,0))){
    SWIG_fail_ptr("Game_FRAME_FORMAT_get",1,SWIGTYPE_p_Game);
  }
  
  result = (std::string *) & ((arg1)->FRAME_FORMAT);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_str_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("psudo_type::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::str",1,"psudo_type *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("psudo_type::str",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_str_set",1,SWIGTYPE_p_psudo_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("unknown_return_str_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->str = arg2;
  
=======
static void swig_delete_Game(void *obj) {
Game *arg1 = (Game *) obj;
delete arg1;
}
static int _proxy__wrap_new_Game(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Game);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Game_attributes[] = {
    { "loadRate", _wrap_Game_loadRate_get, SWIG_Lua_set_immutable },
    { "WINDOW_WIDTH", _wrap_Game_WINDOW_WIDTH_get, SWIG_Lua_set_immutable },
    { "WINDOW_HEIGHT", _wrap_Game_WINDOW_HEIGHT_get, SWIG_Lua_set_immutable },
    { "FRAME_FORMAT_SIZE", _wrap_Game_FRAME_FORMAT_SIZE_get, SWIG_Lua_set_immutable },
    { "FRAME_FORMAT", _wrap_Game_FRAME_FORMAT_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_Game_methods[]= {
    { "LoadGame", _wrap_Game_LoadGame},
    { "LoadGameConstants", _wrap_Game_LoadGameConstants},
    { "LoadGlobalModules", _wrap_Game_LoadGlobalModules},
    { "LoadUIs", _wrap_Game_LoadUIs},
    { "initEditorFrameBuffer", _wrap_Game_initEditorFrameBuffer},
    { "init", _wrap_Game_init},
    { "initSubSys", _wrap_Game_initSubSys},
    { "loadLevel", _wrap_Game_loadLevel},
    { "GetCurrentLevel", _wrap_Game_GetCurrentLevel},
    { "SetHeroIDForCurrentLevel", _wrap_Game_SetHeroIDForCurrentLevel},
    { "SetHeroUnitAsLoaded", _wrap_Game_SetHeroUnitAsLoaded},
    { "UnsetHeroUnitAsLoaded", _wrap_Game_UnsetHeroUnitAsLoaded},
    { "GetRenderer", _wrap_Game_GetRenderer},
    { "GetEvents", _wrap_Game_GetEvents},
    { "GetMainTimer", _wrap_Game_GetMainTimer},
    { "GetHeroID", _wrap_Game_GetHeroID},
    { "isMultithreaded", _wrap_Game_isMultithreaded},
    { "isGamePaused", _wrap_Game_isGamePaused},
    { "GetRelativity", _wrap_Game_GetRelativity},
    { "isEngineClosing", _wrap_Game_isEngineClosing},
    { "noHero", _wrap_Game_noHero},
    { "GetFrameBuffer", _wrap_Game_GetFrameBuffer},
    { "GetSizeOfFrameBuffer", _wrap_Game_GetSizeOfFrameBuffer},
    { "GetWinID", _wrap_Game_GetWinID},
    { "PauseGame", _wrap_Game_PauseGame},
    { "ResumeGame", _wrap_Game_ResumeGame},
    { "LoadSaveData", _wrap_Game_LoadSaveData},
    { "SaveData", _wrap_Game_SaveData},
    { "SaveGameSettings", _wrap_Game_SaveGameSettings},
    { "GetSaveDataHandle", _wrap_Game_GetSaveDataHandle},
    { "FrameCapper", _wrap_Game_FrameCapper},
    { "ClearEditorFrameBuffer", _wrap_Game_ClearEditorFrameBuffer},
    { "RestartRenderer", _wrap_Game_RestartRenderer},
    { "RestartVideoAndSound", _wrap_Game_RestartVideoAndSound},
    { "RestartAudio", _wrap_Game_RestartAudio},
    { "RestartVideo", _wrap_Game_RestartVideo},
    { "UnlockRenderer", _wrap_Game_UnlockRenderer},
    { "drawWorld", _wrap_Game_drawWorld},
    { "playSounds", _wrap_Game_playSounds},
    { "runPhysics", _wrap_Game_runPhysics},
    { "run", _wrap_Game_run},
    { "stopGame", _wrap_Game_stopGame},
    { "mainGC", _wrap_Game_mainGC},
    { "ShowLoadingScreen", _wrap_Game_ShowLoadingScreen},
    { "UpdateLoadingStatus", _wrap_Game_UpdateLoadingStatus},
    { "HideLoadingScreen", _wrap_Game_HideLoadingScreen},
    { "ReplaceLoadingScreen", _wrap_Game_ReplaceLoadingScreen},
    { "ShowMainMenu", _wrap_Game_ShowMainMenu},
    { "HideMainMenu", _wrap_Game_HideMainMenu},
    { "ReplaceMainMenu", _wrap_Game_ReplaceMainMenu},
    { "ShowHUD", _wrap_Game_ShowHUD},
    { "HideHUD", _wrap_Game_HideHUD},
    { "ReplaceHUD", _wrap_Game_ReplaceHUD},
    { "ShowVideoHUD", _wrap_Game_ShowVideoHUD},
    { "HideVideoHUD", _wrap_Game_HideVideoHUD},
    { "ReplaceVideoHUD", _wrap_Game_ReplaceVideoHUD},
    { "ShowWindow", _wrap_Game_ShowWindow},
    {0,0}
};
static swig_lua_method swig_Game_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Game_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Game_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Game_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Game_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Game_Sf_SwigStatic = {
    "Game",
    swig_Game_Sf_SwigStatic_methods,
    swig_Game_Sf_SwigStatic_attributes,
    swig_Game_Sf_SwigStatic_constants,
    swig_Game_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Game_bases[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static const char *swig_Game_base_names[] = {"ThreadSystem *","GameInfo *","ModuleSystem *","UnitManager *","IOManager *","UIManager *","NetworkManager *","TriggerManager *","LayerSystem *","Cursor *","TimerSystem *","VideoPlayer *","Input *","SoundQueue *","ParticleSystem *",0};
static swig_lua_class _wrap_class_Game = { "Game", "Game", &SWIGTYPE_p_Game,_proxy__wrap_new_Game, swig_delete_Game, swig_Game_methods, swig_Game_attributes, &swig_Game_Sf_SwigStatic, swig_Game_meta, swig_Game_bases, swig_Game_base_names };

static int _wrap_helperDrawFunction(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperDrawFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperDrawFunction",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperDrawFunction");
  result = (void_ptr)helperDrawFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_str_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  std::string result;
  
  SWIG_check_num_args("psudo_type::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::str",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_str_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result =  ((arg1)->str);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
=======
static int _wrap_helperSoundFunction(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperSoundFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperSoundFunction",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperSoundFunction");
  result = (void_ptr)helperSoundFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_c_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("psudo_type::c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::c",1,"psudo_type *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("psudo_type::c",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_c_set",1,SWIGTYPE_p_psudo_type);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->c = arg2;
  
=======
static int _wrap_helperPhysicsFunction(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperPhysicsFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperPhysicsFunction",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperPhysicsFunction");
  result = (void_ptr)helperPhysicsFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_c_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  char result;
  
  SWIG_check_num_args("psudo_type::c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::c",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_c_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result = (char) ((arg1)->c);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
=======
static int _wrap_helperEventsFunction(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperEventsFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperEventsFunction",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperEventsFunction");
  result = (void_ptr)helperEventsFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_ptr_set(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  void_ptr arg2 ;
  void_ptr *argp2 ;
  
  SWIG_check_num_args("psudo_type::ptr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::ptr",1,"psudo_type *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("psudo_type::ptr",2,"void_ptr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_ptr_set",1,SWIGTYPE_p_psudo_type);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_void_ptr,0))){
    SWIG_fail_ptr("unknown_return_ptr_set",2,SWIGTYPE_p_void_ptr);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->ptr = arg2;
  
=======
static int _wrap_helperGCFunction(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperGCFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperGCFunction",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperGCFunction");
  result = (void_ptr)helperGCFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_unknown_return_ptr_get(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *arg1 = (psudo_type *) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("psudo_type::ptr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("psudo_type::ptr",1,"psudo_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_psudo_type,0))){
    SWIG_fail_ptr("unknown_return_ptr_get",1,SWIGTYPE_p_psudo_type);
  }
  
  result =  ((arg1)->ptr);
  {
    void_ptr * resultptr = new void_ptr((const void_ptr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_void_ptr,1); SWIG_arg++;
  }
=======
static int _wrap_helperPluginFunction(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperPluginFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperPluginFunction",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperPluginFunction");
  result = (void_ptr)helperPluginFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static int _wrap_new_unknown_return(lua_State* L) {
  int SWIG_arg = 0;
  psudo_type *result = 0 ;
  
  SWIG_check_num_args("psudo_type::psudo_type",0,0)
  result = (psudo_type *)new psudo_type();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_psudo_type,1); SWIG_arg++; 
=======
static int _wrap_helperUpdateFunction(lua_State* L) {
  int SWIG_arg = 0;
  void_ptr arg1 = (void_ptr) 0 ;
  void_ptr result;
  
  SWIG_check_num_args("helperUpdateFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("helperUpdateFunction",1,"void_ptr");
  arg1=(void_ptr)SWIG_MustGetPtr(L,1,0,0,1,"helperUpdateFunction");
  result = (void_ptr)helperUpdateFunction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
>>>>>>> TheIllusiveMan
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


<<<<<<< HEAD
static void swig_delete_unknown_return(void *obj) {
psudo_type *arg1 = (psudo_type *) obj;
delete arg1;
}
static swig_lua_method swig_psudo_type_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_psudo_type_attributes[] = {
    { "flag", _wrap_unknown_return_flag_get, _wrap_unknown_return_flag_set},
    { "number", _wrap_unknown_return_number_get, _wrap_unknown_return_number_set},
    { "uNumber", _wrap_unknown_return_uNumber_get, _wrap_unknown_return_uNumber_set},
    { "decimal", _wrap_unknown_return_decimal_get, _wrap_unknown_return_decimal_set},
    { "answer", _wrap_unknown_return_answer_get, _wrap_unknown_return_answer_set},
    { "str", _wrap_unknown_return_str_get, _wrap_unknown_return_str_set},
    { "c", _wrap_unknown_return_c_get, _wrap_unknown_return_c_set},
    { "ptr", _wrap_unknown_return_ptr_get, _wrap_unknown_return_ptr_set},
    {0,0,0}
};
static swig_lua_attribute swig_psudo_type_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_psudo_type_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_psudo_type_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_psudo_type_bases[] = {0};
static const char *swig_psudo_type_base_names[] = {0};
static swig_lua_class _wrap_class_psudo_type = { "unknown_return", &SWIGTYPE_p_psudo_type,_wrap_new_unknown_return, swig_delete_unknown_return, swig_psudo_type_methods, swig_psudo_type_attributes, { "unknown_return", swig_psudo_type_cls_methods, swig_psudo_type_cls_attributes, swig_psudo_type_cls_constants }, swig_psudo_type_bases, swig_psudo_type_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "CalculateDistance", _wrap_CalculateDistance},
    { "data_base_CreateNewFile_static", _wrap_data_base_CreateNewFile_static},
    { "copyfile",_wrap_copyfile},
    { "apply_surface",_wrap_apply_surface},
    { "LoadTexture", _wrap_LoadTexture},
    { "grabText", _wrap_grabText},
    { "init", _wrap_init},
    { "FrameCapper", _wrap_FrameCapper},
    { "SpawnUnit",_wrap_SpawnUnit},
    { "FindNearbyUnit", _wrap_FindNearbyUnit},
    { "FindUnitByName", _wrap_FindUnitByName},
    { "loadGameConstants", _wrap_loadGameConstants},
    { "GetRenderer", _wrap_GetRenderer},
    { "saveToFile", _wrap_saveToFile},
    { "loadFile", _wrap_loadFile},
    { "reverseOrderStack", _wrap_reverseOrderStack},
=======
static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "Keywords", _wrap_Keywords_get, _wrap_Keywords_set },
    { "maxConn", _wrap_maxConn_get, _wrap_maxConn_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_UNKNOWN", SDL_SCANCODE_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_A", SDL_SCANCODE_A)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_B", SDL_SCANCODE_B)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_C", SDL_SCANCODE_C)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_D", SDL_SCANCODE_D)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_E", SDL_SCANCODE_E)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F", SDL_SCANCODE_F)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_G", SDL_SCANCODE_G)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_H", SDL_SCANCODE_H)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_I", SDL_SCANCODE_I)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_J", SDL_SCANCODE_J)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_K", SDL_SCANCODE_K)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_L", SDL_SCANCODE_L)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_M", SDL_SCANCODE_M)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_N", SDL_SCANCODE_N)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_O", SDL_SCANCODE_O)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_P", SDL_SCANCODE_P)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_Q", SDL_SCANCODE_Q)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_R", SDL_SCANCODE_R)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_S", SDL_SCANCODE_S)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_T", SDL_SCANCODE_T)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_U", SDL_SCANCODE_U)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_V", SDL_SCANCODE_V)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_W", SDL_SCANCODE_W)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_X", SDL_SCANCODE_X)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_Y", SDL_SCANCODE_Y)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_Z", SDL_SCANCODE_Z)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_1", SDL_SCANCODE_1)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_2", SDL_SCANCODE_2)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_3", SDL_SCANCODE_3)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_4", SDL_SCANCODE_4)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_5", SDL_SCANCODE_5)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_6", SDL_SCANCODE_6)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_7", SDL_SCANCODE_7)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_8", SDL_SCANCODE_8)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_9", SDL_SCANCODE_9)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_0", SDL_SCANCODE_0)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_RETURN", SDL_SCANCODE_RETURN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_ESCAPE", SDL_SCANCODE_ESCAPE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_BACKSPACE", SDL_SCANCODE_BACKSPACE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_TAB", SDL_SCANCODE_TAB)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_SPACE", SDL_SCANCODE_SPACE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_MINUS", SDL_SCANCODE_MINUS)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_EQUALS", SDL_SCANCODE_EQUALS)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LEFTBRACKET", SDL_SCANCODE_LEFTBRACKET)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_RIGHTBRACKET", SDL_SCANCODE_RIGHTBRACKET)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_BACKSLASH", SDL_SCANCODE_BACKSLASH)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_NONUSHASH", SDL_SCANCODE_NONUSHASH)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_SEMICOLON", SDL_SCANCODE_SEMICOLON)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_APOSTROPHE", SDL_SCANCODE_APOSTROPHE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_GRAVE", SDL_SCANCODE_GRAVE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_COMMA", SDL_SCANCODE_COMMA)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_PERIOD", SDL_SCANCODE_PERIOD)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_SLASH", SDL_SCANCODE_SLASH)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CAPSLOCK", SDL_SCANCODE_CAPSLOCK)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F1", SDL_SCANCODE_F1)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F2", SDL_SCANCODE_F2)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F3", SDL_SCANCODE_F3)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F4", SDL_SCANCODE_F4)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F5", SDL_SCANCODE_F5)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F6", SDL_SCANCODE_F6)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F7", SDL_SCANCODE_F7)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F8", SDL_SCANCODE_F8)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F9", SDL_SCANCODE_F9)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F10", SDL_SCANCODE_F10)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F11", SDL_SCANCODE_F11)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F12", SDL_SCANCODE_F12)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_PRINTSCREEN", SDL_SCANCODE_PRINTSCREEN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_SCROLLLOCK", SDL_SCANCODE_SCROLLLOCK)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_PAUSE", SDL_SCANCODE_PAUSE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INSERT", SDL_SCANCODE_INSERT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_HOME", SDL_SCANCODE_HOME)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_PAGEUP", SDL_SCANCODE_PAGEUP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_DELETE", SDL_SCANCODE_DELETE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_END", SDL_SCANCODE_END)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_PAGEDOWN", SDL_SCANCODE_PAGEDOWN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_RIGHT", SDL_SCANCODE_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LEFT", SDL_SCANCODE_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_DOWN", SDL_SCANCODE_DOWN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_UP", SDL_SCANCODE_UP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_NUMLOCKCLEAR", SDL_SCANCODE_NUMLOCKCLEAR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_DIVIDE", SDL_SCANCODE_KP_DIVIDE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MULTIPLY", SDL_SCANCODE_KP_MULTIPLY)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MINUS", SDL_SCANCODE_KP_MINUS)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_PLUS", SDL_SCANCODE_KP_PLUS)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_ENTER", SDL_SCANCODE_KP_ENTER)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_1", SDL_SCANCODE_KP_1)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_2", SDL_SCANCODE_KP_2)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_3", SDL_SCANCODE_KP_3)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_4", SDL_SCANCODE_KP_4)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_5", SDL_SCANCODE_KP_5)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_6", SDL_SCANCODE_KP_6)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_7", SDL_SCANCODE_KP_7)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_8", SDL_SCANCODE_KP_8)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_9", SDL_SCANCODE_KP_9)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_0", SDL_SCANCODE_KP_0)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_PERIOD", SDL_SCANCODE_KP_PERIOD)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_NONUSBACKSLASH", SDL_SCANCODE_NONUSBACKSLASH)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_APPLICATION", SDL_SCANCODE_APPLICATION)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_POWER", SDL_SCANCODE_POWER)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_EQUALS", SDL_SCANCODE_KP_EQUALS)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F13", SDL_SCANCODE_F13)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F14", SDL_SCANCODE_F14)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F15", SDL_SCANCODE_F15)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F16", SDL_SCANCODE_F16)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F17", SDL_SCANCODE_F17)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F18", SDL_SCANCODE_F18)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F19", SDL_SCANCODE_F19)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F20", SDL_SCANCODE_F20)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F21", SDL_SCANCODE_F21)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F22", SDL_SCANCODE_F22)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F23", SDL_SCANCODE_F23)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_F24", SDL_SCANCODE_F24)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_EXECUTE", SDL_SCANCODE_EXECUTE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_HELP", SDL_SCANCODE_HELP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_MENU", SDL_SCANCODE_MENU)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_SELECT", SDL_SCANCODE_SELECT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_STOP", SDL_SCANCODE_STOP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AGAIN", SDL_SCANCODE_AGAIN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_UNDO", SDL_SCANCODE_UNDO)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CUT", SDL_SCANCODE_CUT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_COPY", SDL_SCANCODE_COPY)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_PASTE", SDL_SCANCODE_PASTE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_FIND", SDL_SCANCODE_FIND)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_MUTE", SDL_SCANCODE_MUTE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_VOLUMEUP", SDL_SCANCODE_VOLUMEUP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_VOLUMEDOWN", SDL_SCANCODE_VOLUMEDOWN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_COMMA", SDL_SCANCODE_KP_COMMA)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_EQUALSAS400", SDL_SCANCODE_KP_EQUALSAS400)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL1", SDL_SCANCODE_INTERNATIONAL1)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL2", SDL_SCANCODE_INTERNATIONAL2)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL3", SDL_SCANCODE_INTERNATIONAL3)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL4", SDL_SCANCODE_INTERNATIONAL4)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL5", SDL_SCANCODE_INTERNATIONAL5)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL6", SDL_SCANCODE_INTERNATIONAL6)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL7", SDL_SCANCODE_INTERNATIONAL7)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL8", SDL_SCANCODE_INTERNATIONAL8)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_INTERNATIONAL9", SDL_SCANCODE_INTERNATIONAL9)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG1", SDL_SCANCODE_LANG1)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG2", SDL_SCANCODE_LANG2)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG3", SDL_SCANCODE_LANG3)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG4", SDL_SCANCODE_LANG4)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG5", SDL_SCANCODE_LANG5)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG6", SDL_SCANCODE_LANG6)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG7", SDL_SCANCODE_LANG7)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG8", SDL_SCANCODE_LANG8)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LANG9", SDL_SCANCODE_LANG9)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_ALTERASE", SDL_SCANCODE_ALTERASE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_SYSREQ", SDL_SCANCODE_SYSREQ)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CANCEL", SDL_SCANCODE_CANCEL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CLEAR", SDL_SCANCODE_CLEAR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_PRIOR", SDL_SCANCODE_PRIOR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_RETURN2", SDL_SCANCODE_RETURN2)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_SEPARATOR", SDL_SCANCODE_SEPARATOR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_OUT", SDL_SCANCODE_OUT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_OPER", SDL_SCANCODE_OPER)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CLEARAGAIN", SDL_SCANCODE_CLEARAGAIN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CRSEL", SDL_SCANCODE_CRSEL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_EXSEL", SDL_SCANCODE_EXSEL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_00", SDL_SCANCODE_KP_00)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_000", SDL_SCANCODE_KP_000)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_THOUSANDSSEPARATOR", SDL_SCANCODE_THOUSANDSSEPARATOR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_DECIMALSEPARATOR", SDL_SCANCODE_DECIMALSEPARATOR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CURRENCYUNIT", SDL_SCANCODE_CURRENCYUNIT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CURRENCYSUBUNIT", SDL_SCANCODE_CURRENCYSUBUNIT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_LEFTPAREN", SDL_SCANCODE_KP_LEFTPAREN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_RIGHTPAREN", SDL_SCANCODE_KP_RIGHTPAREN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_LEFTBRACE", SDL_SCANCODE_KP_LEFTBRACE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_RIGHTBRACE", SDL_SCANCODE_KP_RIGHTBRACE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_TAB", SDL_SCANCODE_KP_TAB)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_BACKSPACE", SDL_SCANCODE_KP_BACKSPACE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_A", SDL_SCANCODE_KP_A)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_B", SDL_SCANCODE_KP_B)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_C", SDL_SCANCODE_KP_C)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_D", SDL_SCANCODE_KP_D)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_E", SDL_SCANCODE_KP_E)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_F", SDL_SCANCODE_KP_F)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_XOR", SDL_SCANCODE_KP_XOR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_POWER", SDL_SCANCODE_KP_POWER)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_PERCENT", SDL_SCANCODE_KP_PERCENT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_LESS", SDL_SCANCODE_KP_LESS)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_GREATER", SDL_SCANCODE_KP_GREATER)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_AMPERSAND", SDL_SCANCODE_KP_AMPERSAND)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_DBLAMPERSAND", SDL_SCANCODE_KP_DBLAMPERSAND)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_VERTICALBAR", SDL_SCANCODE_KP_VERTICALBAR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_DBLVERTICALBAR", SDL_SCANCODE_KP_DBLVERTICALBAR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_COLON", SDL_SCANCODE_KP_COLON)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_HASH", SDL_SCANCODE_KP_HASH)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_SPACE", SDL_SCANCODE_KP_SPACE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_AT", SDL_SCANCODE_KP_AT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_EXCLAM", SDL_SCANCODE_KP_EXCLAM)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MEMSTORE", SDL_SCANCODE_KP_MEMSTORE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MEMRECALL", SDL_SCANCODE_KP_MEMRECALL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MEMCLEAR", SDL_SCANCODE_KP_MEMCLEAR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MEMADD", SDL_SCANCODE_KP_MEMADD)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MEMSUBTRACT", SDL_SCANCODE_KP_MEMSUBTRACT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MEMMULTIPLY", SDL_SCANCODE_KP_MEMMULTIPLY)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_MEMDIVIDE", SDL_SCANCODE_KP_MEMDIVIDE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_PLUSMINUS", SDL_SCANCODE_KP_PLUSMINUS)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_CLEAR", SDL_SCANCODE_KP_CLEAR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_CLEARENTRY", SDL_SCANCODE_KP_CLEARENTRY)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_BINARY", SDL_SCANCODE_KP_BINARY)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_OCTAL", SDL_SCANCODE_KP_OCTAL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_DECIMAL", SDL_SCANCODE_KP_DECIMAL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KP_HEXADECIMAL", SDL_SCANCODE_KP_HEXADECIMAL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LCTRL", SDL_SCANCODE_LCTRL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LSHIFT", SDL_SCANCODE_LSHIFT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LALT", SDL_SCANCODE_LALT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_LGUI", SDL_SCANCODE_LGUI)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_RCTRL", SDL_SCANCODE_RCTRL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_RSHIFT", SDL_SCANCODE_RSHIFT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_RALT", SDL_SCANCODE_RALT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_RGUI", SDL_SCANCODE_RGUI)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_MODE", SDL_SCANCODE_MODE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AUDIONEXT", SDL_SCANCODE_AUDIONEXT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AUDIOPREV", SDL_SCANCODE_AUDIOPREV)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AUDIOSTOP", SDL_SCANCODE_AUDIOSTOP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AUDIOPLAY", SDL_SCANCODE_AUDIOPLAY)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AUDIOMUTE", SDL_SCANCODE_AUDIOMUTE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_MEDIASELECT", SDL_SCANCODE_MEDIASELECT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_WWW", SDL_SCANCODE_WWW)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_MAIL", SDL_SCANCODE_MAIL)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_CALCULATOR", SDL_SCANCODE_CALCULATOR)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_COMPUTER", SDL_SCANCODE_COMPUTER)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AC_SEARCH", SDL_SCANCODE_AC_SEARCH)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AC_HOME", SDL_SCANCODE_AC_HOME)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AC_BACK", SDL_SCANCODE_AC_BACK)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AC_FORWARD", SDL_SCANCODE_AC_FORWARD)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AC_STOP", SDL_SCANCODE_AC_STOP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AC_REFRESH", SDL_SCANCODE_AC_REFRESH)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_AC_BOOKMARKS", SDL_SCANCODE_AC_BOOKMARKS)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_BRIGHTNESSDOWN", SDL_SCANCODE_BRIGHTNESSDOWN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_BRIGHTNESSUP", SDL_SCANCODE_BRIGHTNESSUP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_DISPLAYSWITCH", SDL_SCANCODE_DISPLAYSWITCH)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KBDILLUMTOGGLE", SDL_SCANCODE_KBDILLUMTOGGLE)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KBDILLUMDOWN", SDL_SCANCODE_KBDILLUMDOWN)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_KBDILLUMUP", SDL_SCANCODE_KBDILLUMUP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_EJECT", SDL_SCANCODE_EJECT)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_SLEEP", SDL_SCANCODE_SLEEP)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_APP1", SDL_SCANCODE_APP1)},
    {SWIG_LUA_CONSTTAB_INT("SDL_SCANCODE_APP2", SDL_SCANCODE_APP2)},
    {SWIG_LUA_CONSTTAB_INT("SDL_NUM_SCANCODES", SDL_NUM_SCANCODES)},
    {SWIG_LUA_CONSTTAB_INT("CREATETABLE", CREATETABLE)},
    {SWIG_LUA_CONSTTAB_INT("SELECT", SELECT)},
    {SWIG_LUA_CONSTTAB_INT("INSERT", INSERT)},
    {SWIG_LUA_CONSTTAB_INT("DELETE", DELETE)},
    {SWIG_LUA_CONSTTAB_INT("WHERE", WHERE)},
    {SWIG_LUA_CONSTTAB_INT("AS", AS)},
    {SWIG_LUA_CONSTTAB_INT("CALL", CALL)},
    {SWIG_LUA_CONSTTAB_INT("FROM", FROM)},
    {SWIG_LUA_CONSTTAB_INT("TO", TO)},
    {SWIG_LUA_CONSTTAB_INT("UPDATE", UPDATE)},
    {SWIG_LUA_CONSTTAB_INT("AND", AND)},
    {SWIG_LUA_CONSTTAB_INT("OR", OR)},
    {SWIG_LUA_CONSTTAB_INT("LIKE", LIKE)},
    {SWIG_LUA_CONSTTAB_INT("CREATEDATABASE", CREATEDATABASE)},
    {SWIG_LUA_CONSTTAB_INT("INTO", INTO)},
    {SWIG_LUA_CONSTTAB_INT("IN", IN)},
    {SWIG_LUA_CONSTTAB_INT("ALL", ALL)},
    {SWIG_LUA_CONSTTAB_INT("AOR", AOR)},
    {SWIG_LUA_CONSTTAB_INT("ORDERBY", ORDERBY)},
    {SWIG_LUA_CONSTTAB_INT("VALUES", VALUES)},
    {SWIG_LUA_CONSTTAB_INT("SET", SET)},
    {SWIG_LUA_CONSTTAB_INT("AS_TABLE", AS_TABLE)},
    {SWIG_LUA_CONSTTAB_INT("INNER_JOIN", INNER_JOIN)},
    {SWIG_LUA_CONSTTAB_INT("ON", ON)},
    {SWIG_LUA_CONSTTAB_INT("JOIN", JOIN)},
    {SWIG_LUA_CONSTTAB_INT("LEFT_JOIN", LEFT_JOIN)},
    {SWIG_LUA_CONSTTAB_INT("LEFT_OUTER_JOIN", LEFT_OUTER_JOIN)},
    {SWIG_LUA_CONSTTAB_INT("BETWEEN", BETWEEN)},
    {SWIG_LUA_CONSTTAB_INT("RIGHT_JOIN", RIGHT_JOIN)},
    {SWIG_LUA_CONSTTAB_INT("RIGHT_OUTER_JOIN", RIGHT_OUTER_JOIN)},
    {SWIG_LUA_CONSTTAB_INT("FULL_JOIN", FULL_JOIN)},
    {SWIG_LUA_CONSTTAB_INT("FULL_OUTER_JOIN", FULL_OUTER_JOIN)},
    {SWIG_LUA_CONSTTAB_INT("INTO_SELECT", INTO_SELECT)},
    {SWIG_LUA_CONSTTAB_INT("UNION", UNION)},
    {SWIG_LUA_CONSTTAB_INT("ENDOFFILE", -1)},
    {SWIG_LUA_CONSTTAB_INT("NONE", NONE)},
    {SWIG_LUA_CONSTTAB_INT("VAR", VAR)},
    {SWIG_LUA_CONSTTAB_INT("XML", XML)},
    {SWIG_LUA_CONSTTAB_INT("LUA", LUA)},
    {SWIG_LUA_CONSTTAB_INT("PYTHON", PYTHON)},
    {SWIG_LUA_CONSTTAB_INT("SQLITE", SQLITE)},
    {SWIG_LUA_CONSTTAB_INT("MYSQL", MYSQL)},
    {SWIG_LUA_CONSTTAB_INT("SKEWLEFT", SKEWLEFT)},
    {SWIG_LUA_CONSTTAB_INT("SKEWRIGHT", SKEWRIGHT)},
    {SWIG_LUA_CONSTTAB_INT("SKEWBOTH", SKEWBOTH)},
    {SWIG_LUA_CONSTTAB_INT("NOFLIP", NOFLIP)},
    {SWIG_LUA_CONSTTAB_INT("HORIZONTALLY", HORIZONTALLY)},
    {SWIG_LUA_CONSTTAB_INT("VERTICALLY", VERTICALLY)},
    {SWIG_LUA_CONSTTAB_INT("BOTH", BOTH)},
    {SWIG_LUA_CONSTTAB_INT("NO_CLIENT", -1)},
    {SWIG_LUA_CONSTTAB_INT("TIMEOUT_TRYS", 50)},
    {SWIG_LUA_CONSTTAB_INT("NET_ANYUDPPORT", 0)},
    {SWIG_LUA_CONSTTAB_INT("ANY_CHANNEL", -1)},
    {SWIG_LUA_CONSTTAB_INT("TEXTINPUT", TEXTINPUT)},
    {SWIG_LUA_CONSTTAB_INT("KEYBOARD", KEYBOARD)},
    {SWIG_LUA_CONSTTAB_INT("MOUSE", MOUSE)},
    {SWIG_LUA_CONSTTAB_INT("TOUCH", TOUCH)},
    {SWIG_LUA_CONSTTAB_INT("CONTROLLER", CONTROLLER)},
    {SWIG_LUA_CONSTTAB_INT("MOUSEMOTION", MOUSEMOTION)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "cdata", _wrap_cdata},
    { "memmove", _wrap_memmove},
    { "hasher", _wrap_hasher},
    { "randUniform", _wrap_randUniform},
    { "randBinomial", _wrap_randBinomial},
    { "randNormal", _wrap_randNormal},
    { "GetMaxValueSizeT", _wrap_GetMaxValueSizeT},
    { "printHello", _wrap_printHello},
    { "CalculateDistance", _wrap_CalculateDistance},
    { "copyfile", _wrap_copyfile},
    { "get_bin_buffer", _wrap_get_bin_buffer},
    { "apply_surface", _wrap_apply_surface},
    { "LoadTexture", _wrap_LoadTexture},
    { "LoadScript", _wrap_LoadScript},
>>>>>>> TheIllusiveMan
    { "charToInt", _wrap_charToInt},
    { "cStrToInt", _wrap_cStrToInt},
    { "intToStr", _wrap_intToStr},
    { "cStrToNum", _wrap_cStrToNum},
    { "numToStr", _wrap_numToStr},
<<<<<<< HEAD
    { "searchChar", _wrap_searchChar},
    { "findString",_wrap_findString},
    { "slice", _wrap_slice},
    { "shiftArrayLeft",_wrap_shiftArrayLeft},
=======
    { "searchCharIndex", _wrap_searchCharIndex},
    { "searchChar", _wrap_searchChar},
    { "findString", _wrap_findString},
    { "slicepChar", _wrap_slicepChar},
    { "shiftArrayLeft", _wrap_shiftArrayLeft},
>>>>>>> TheIllusiveMan
    { "transferStr", _wrap_transferStr},
    { "createPCharFromBuffer", _wrap_createPCharFromBuffer},
    { "removeCharFromStr", _wrap_removeCharFromStr},
    { "removeMultipleCharFromStr", _wrap_removeMultipleCharFromStr},
<<<<<<< HEAD
    { "searchCharIndex",_wrap_searchCharIndex},
=======
    { "searchCharIndex_char", _wrap_searchCharIndex_char},
>>>>>>> TheIllusiveMan
    { "sliceStr", _wrap_sliceStr},
    { "numToInt", _wrap_numToInt},
    { "fuseStrs", _wrap_fuseStrs},
    { "capitalizeStr", _wrap_capitalizeStr},
<<<<<<< HEAD
    { "replaceCharInStr",_wrap_replaceCharInStr},
    { "getCharArrayFromConstArray", _wrap_getCharArrayFromConstArray},
    { "round", _wrap_round},
    { "iround", _wrap_iround},
    { "changeProgramWorkingDirectory", _wrap_changeProgramWorkingDirectory},
    { "capitalizeChar", _wrap_capitalizeChar},
    { "lowerCaseChar", _wrap_lowerCaseChar},
    { "scientificFormat",_wrap_scientificFormat},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "ScriptWrap_NO_ARGS", _wrap_ScriptWrap_NO_ARGS_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ENDOFFILE", -1)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_EXEC_FAILURE", 1)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_UNKNOWN_ARG", 2)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_NOT_A_SCRIPT", 3)},
    {SWIG_LUA_CONSTTAB_INT("EXIT_SUCCESS", 0)},
    {SWIG_LUA_CONSTTAB_INT("NONE", NONE)},
    {SWIG_LUA_CONSTTAB_INT("VAR", VAR)},
    {SWIG_LUA_CONSTTAB_INT("XML", XML)},
    {SWIG_LUA_CONSTTAB_INT("LUA", LUA)},
    {SWIG_LUA_CONSTTAB_INT("PYTHON", PYTHON)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ButtonTo_p_textbox(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((textbox *)  ((Button *) x));
}
static swig_type_info _swigt__p_Button = {"_p_Button", "Button *", 0, 0, (void*)&_wrap_class_Button, 0};
static swig_type_info _swigt__p_Physics = {"_p_Physics", "Physics *", 0, 0, (void*)&_wrap_class_Physics, 0};
static swig_type_info _swigt__p_ProgressBar = {"_p_ProgressBar", "ProgressBar *", 0, 0, (void*)&_wrap_class_ProgressBar, 0};
static swig_type_info _swigt__p_SDL_BlendMode = {"_p_SDL_BlendMode", "SDL_BlendMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Renderer = {"_p_SDL_Renderer", "SDL_Renderer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Texture = {"_p_SDL_Texture", "SDL_Texture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScriptWrap = {"_p_ScriptWrap", "ScriptWrap *", 0, 0, (void*)&_wrap_class_ScriptWrap, 0};
static swig_type_info _swigt__p_Timer = {"_p_Timer", "Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_Trigger = {"_p_Trigger", "Trigger *", 0, 0, (void*)&_wrap_class_Trigger, 0};
static swig_type_info _swigt__p_UI = {"_p_UI", "UI *", 0, 0, (void*)&_wrap_class_UI, 0};
static swig_type_info _swigt__p_Uint8 = {"_p_Uint8", "Uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Unit = {"_p_Unit", "Unit *", 0, 0, (void*)&_wrap_class_Unit, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_data_base = {"_p_data_base", "data_base *", 0, 0, (void*)&_wrap_class_data_base, 0};
static swig_type_info _swigt__p_draw_base = {"_p_draw_base", "draw_base *", 0, 0, (void*)&_wrap_class_draw_base, 0};
static swig_type_info _swigt__p_inputKeyboard = {"_p_inputKeyboard", "inputKeyboard *", 0, 0, (void*)&_wrap_class_inputKeyboard, 0};
static swig_type_info _swigt__p_inputMouse = {"_p_inputMouse", "inputMouse *", 0, 0, (void*)&_wrap_class_inputMouse, 0};
=======
    { "replaceCharInStr", _wrap_replaceCharInStr},
    { "replaceStrInStr", _wrap_replaceStrInStr},
    { "removeLeadingWhiteSpace", _wrap_removeLeadingWhiteSpace},
    { "getCharArrayFromConstArray", _wrap_getCharArrayFromConstArray},
    { "roundDecimal", _wrap_roundDecimal},
    { "iroundDecimal", _wrap_iroundDecimal},
    { "changeProgramWorkingDirectory", _wrap_changeProgramWorkingDirectory},
    { "capitalizeChar", _wrap_capitalizeChar},
    { "lowerCaseChar", _wrap_lowerCaseChar},
    { "scientificFormat", _wrap_scientificFormat},
    { "isNum", _wrap_isNum},
    { "traversalRender", _wrap_traversalRender},
    { "helperUIUpdate", _wrap_helperUIUpdate},
    { "helperUIProcessEvents", _wrap_helperUIProcessEvents},
    { "helperUIDraw", _wrap_helperUIDraw},
    { "helperDrawFunction", _wrap_helperDrawFunction},
    { "helperSoundFunction", _wrap_helperSoundFunction},
    { "helperPhysicsFunction", _wrap_helperPhysicsFunction},
    { "helperEventsFunction", _wrap_helperEventsFunction},
    { "helperGCFunction", _wrap_helperGCFunction},
    { "helperPluginFunction", _wrap_helperPluginFunction},
    { "helperUpdateFunction", _wrap_helperUpdateFunction},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_SQLQuery,
&_wrap_class_Physics,
&_wrap_class_data_base,
&_wrap_class_draw_base,
&_wrap_class_UI,
&_wrap_class_Unit,
&_wrap_class_Trigger,
&_wrap_class_Timer,
&_wrap_class_unknown_return,
&_wrap_class_math_VECTOR,
&_wrap_class_math_point,
&_wrap_class_Range,
&_wrap_class_Resolution,
&_wrap_class_DataBase,
&_wrap_class_pChar,
&_wrap_class_Module,
&_wrap_class_ModuleSystem,
&_wrap_class_UnitNode,
&_wrap_class_UnitManager,
&_wrap_class_Particle,
&_wrap_class_ParticleNode,
&_wrap_class_ParticleCluster,
&_wrap_class_ParticleSystem,
&_wrap_class_ThreadSystem,
&_wrap_class_UDPClient,
&_wrap_class_TCPClient,
&_wrap_class_NetNode,
&_wrap_class_NetworkManager,
&_wrap_class_LocaleNode,
&_wrap_class_LocaleReader,
&_wrap_class_IONode,
&_wrap_class_IOManager,
&_wrap_class_Layer,
&_wrap_class_LayerSystem,
&_wrap_class_ExpansionItem,
&_wrap_class_LocaleItem,
&_wrap_class_ExpansionInfo,
&_wrap_class_LocaleInfo,
&_wrap_class_ScreenInfo,
&_wrap_class_SoundInfo,
&_wrap_class_GameInfo,
&_wrap_class_TriggerManager,
&_wrap_class_TimerSystem,
&_wrap_class_UIManager,
&_wrap_class_Level,
&_wrap_class_SoundQueue,
&_wrap_class_SynchData,
&_wrap_class_VideoFrame,
&_wrap_class_SubFrame,
&_wrap_class_SoundChunk,
&_wrap_class_VideoPlayer,
&_wrap_class_CursorNode,
&_wrap_class_Cursor,
&_wrap_class_raw_input,
&_wrap_class_KeyNode,
&_wrap_class_InputMouse,
&_wrap_class_InputKeyboard,
&_wrap_class_Input,
&_wrap_class_Game,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "EE",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_DataBaseTo_p_SQLGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SQLGenerator *)  ((DataBase *) x));
}
static void *_p_GameInfoTo_p_ExpansionInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ExpansionInfo *)  ((GameInfo *) x));
}
static void *_p_GameTo_p_ExpansionInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ExpansionInfo *) (GameInfo *) ((Game *) x));
}
static void *_p_GameInfoTo_p_LocaleInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LocaleInfo *)  ((GameInfo *) x));
}
static void *_p_GameTo_p_LocaleInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LocaleInfo *) (GameInfo *) ((Game *) x));
}
static void *_p_GameTo_p_SoundQueue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundQueue *)  ((Game *) x));
}
static void *_p_GameTo_p_InputKeyboard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((InputKeyboard *) (Input *) ((Game *) x));
}
static void *_p_InputTo_p_InputKeyboard(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((InputKeyboard *)  ((Input *) x));
}
static void *_p_GameTo_p_VideoPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((VideoPlayer *)  ((Game *) x));
}
static void *_p_GameTo_p_ThreadSystem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ThreadSystem *)  ((Game *) x));
}
static void *_p_GameTo_p_LayerSystem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LayerSystem *)  ((Game *) x));
}
static void *_p_GameTo_p_TimerSystem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TimerSystem *)  ((Game *) x));
}
static void *_p_GameTo_p_InputMouse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((InputMouse *) (Input *) ((Game *) x));
}
static void *_p_InputTo_p_InputMouse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((InputMouse *)  ((Input *) x));
}
static void *_p_GameInfoTo_p_SoundInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundInfo *)  ((GameInfo *) x));
}
static void *_p_GameTo_p_SoundInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SoundInfo *) (GameInfo *) ((Game *) x));
}
static void *_p_VideoFrameTo_p_SynchData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynchData *)  ((VideoFrame *) x));
}
static void *_p_SoundChunkTo_p_SynchData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynchData *)  ((SoundChunk *) x));
}
static void *_p_SubFrameTo_p_SynchData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((SynchData *)  ((SubFrame *) x));
}
static void *_p_ParticleTo_p_Physics(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Physics *)  ((Particle *) x));
}
static void *_p_GameInfoTo_p_ScreenInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ScreenInfo *)  ((GameInfo *) x));
}
static void *_p_GameTo_p_ScreenInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ScreenInfo *) (GameInfo *) ((Game *) x));
}
static void *_p_GameTo_p_GameInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GameInfo *)  ((Game *) x));
}
static void *_p_GameTo_p_IOManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IOManager *)  ((Game *) x));
}
static void *_p_GameTo_p_UnitManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnitManager *)  ((Game *) x));
}
static void *_p_GameTo_p_UIManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UIManager *)  ((Game *) x));
}
static void *_p_GameTo_p_NetworkManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((NetworkManager *)  ((Game *) x));
}
static void *_p_GameTo_p_TriggerManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TriggerManager *)  ((Game *) x));
}
static void *_p_GameTo_p_Cursor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Cursor *)  ((Game *) x));
}
static void *_p_GameTo_p_ModuleSystem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ModuleSystem *)  ((Game *) x));
}
static void *_p_GameTo_p_ParticleSystem(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ParticleSystem *)  ((Game *) x));
}
static void *_p_GameTo_p_Input(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Input *)  ((Game *) x));
}
static swig_type_info _swigt__p_AIStore = {"_p_AIStore", "AIStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Button = {"_p_Button", "Button *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cursor = {"_p_Cursor", "Cursor *", 0, 0, (void*)&_wrap_class_Cursor, 0};
static swig_type_info _swigt__p_CursorNode = {"_p_CursorNode", "CursorNode *", 0, 0, (void*)&_wrap_class_CursorNode, 0};
static swig_type_info _swigt__p_DataBase = {"_p_DataBase", "DataBase *", 0, 0, (void*)&_wrap_class_DataBase, 0};
static swig_type_info _swigt__p_ExpansionInfo = {"_p_ExpansionInfo", "ExpansionInfo *", 0, 0, (void*)&_wrap_class_ExpansionInfo, 0};
static swig_type_info _swigt__p_ExpansionItem = {"_p_ExpansionItem", "ExpansionItem *", 0, 0, (void*)&_wrap_class_ExpansionItem, 0};
static swig_type_info _swigt__p_Game = {"_p_Game", "Game *", 0, 0, (void*)&_wrap_class_Game, 0};
static swig_type_info _swigt__p_GameInfo = {"_p_GameInfo", "GameInfo *", 0, 0, (void*)&_wrap_class_GameInfo, 0};
static swig_type_info _swigt__p_IOManager = {"_p_IOManager", "IOManager *", 0, 0, (void*)&_wrap_class_IOManager, 0};
static swig_type_info _swigt__p_IONode = {"_p_IONode", "IONode *", 0, 0, (void*)&_wrap_class_IONode, 0};
static swig_type_info _swigt__p_IPaddress = {"_p_IPaddress", "IPaddress *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Input = {"_p_Input", "Input *", 0, 0, (void*)&_wrap_class_Input, 0};
static swig_type_info _swigt__p_InputKeyboard = {"_p_InputKeyboard", "InputKeyboard *", 0, 0, (void*)&_wrap_class_InputKeyboard, 0};
static swig_type_info _swigt__p_InputMouse = {"_p_InputMouse", "InputMouse *", 0, 0, (void*)&_wrap_class_InputMouse, 0};
static swig_type_info _swigt__p_KeyNode = {"_p_KeyNode", "KeyNode *", 0, 0, (void*)&_wrap_class_KeyNode, 0};
static swig_type_info _swigt__p_Layer = {"_p_Layer", "Layer *", 0, 0, (void*)&_wrap_class_Layer, 0};
static swig_type_info _swigt__p_LayerSystem = {"_p_LayerSystem", "LayerSystem *", 0, 0, (void*)&_wrap_class_LayerSystem, 0};
static swig_type_info _swigt__p_Level = {"_p_Level", "Level *", 0, 0, (void*)&_wrap_class_Level, 0};
static swig_type_info _swigt__p_LocaleInfo = {"_p_LocaleInfo", "LocaleInfo *", 0, 0, (void*)&_wrap_class_LocaleInfo, 0};
static swig_type_info _swigt__p_LocaleItem = {"_p_LocaleItem", "LocaleItem *", 0, 0, (void*)&_wrap_class_LocaleItem, 0};
static swig_type_info _swigt__p_LocaleNode = {"_p_LocaleNode", "LocaleNode *", 0, 0, (void*)&_wrap_class_LocaleNode, 0};
static swig_type_info _swigt__p_LocaleReader = {"_p_LocaleReader", "LocaleReader *", 0, 0, (void*)&_wrap_class_LocaleReader, 0};
static swig_type_info _swigt__p_ModAdapter = {"_p_ModAdapter", "ModAdapter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ModuleNode = {"_p_ModuleNode", "ModuleNode *|Module *", 0, 0, (void*)&_wrap_class_Module, 0};
static swig_type_info _swigt__p_ModuleSystem = {"_p_ModuleSystem", "ModuleSystem *", 0, 0, (void*)&_wrap_class_ModuleSystem, 0};
static swig_type_info _swigt__p_NetNode = {"_p_NetNode", "NetNode *", 0, 0, (void*)&_wrap_class_NetNode, 0};
static swig_type_info _swigt__p_NetworkManager = {"_p_NetworkManager", "NetworkManager *", 0, 0, (void*)&_wrap_class_NetworkManager, 0};
static swig_type_info _swigt__p_Particle = {"_p_Particle", "Particle *", 0, 0, (void*)&_wrap_class_Particle, 0};
static swig_type_info _swigt__p_ParticleCluster = {"_p_ParticleCluster", "ParticleCluster *", 0, 0, (void*)&_wrap_class_ParticleCluster, 0};
static swig_type_info _swigt__p_ParticleNode = {"_p_ParticleNode", "ParticleNode *", 0, 0, (void*)&_wrap_class_ParticleNode, 0};
static swig_type_info _swigt__p_ParticleSystem = {"_p_ParticleSystem", "ParticleSystem *", 0, 0, (void*)&_wrap_class_ParticleSystem, 0};
static swig_type_info _swigt__p_Physics = {"_p_Physics", "Physics *", 0, 0, (void*)&_wrap_class_Physics, 0};
static swig_type_info _swigt__p_Range = {"_p_Range", "Range *", 0, 0, (void*)&_wrap_class_Range, 0};
static swig_type_info _swigt__p_Resolution = {"_p_Resolution", "Resolution *", 0, 0, (void*)&_wrap_class_Resolution, 0};
static swig_type_info _swigt__p_SDL_BlendMode = {"_p_SDL_BlendMode", "SDL_BlendMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Rect = {"_p_SDL_Rect", "SDL_Rect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Renderer = {"_p_SDL_Renderer", "SDL_Renderer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Scancode = {"_p_SDL_Scancode", "enum SDL_Scancode *|SDL_Scancode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Texture = {"_p_SDL_Texture", "SDL_Texture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SQLGenerator = {"_p_SQLGenerator", "SQLGenerator *|SQLQuery *", 0, 0, (void*)&_wrap_class_SQLQuery, 0};
static swig_type_info _swigt__p_SWIGCDATA = {"_p_SWIGCDATA", "SWIGCDATA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScreenInfo = {"_p_ScreenInfo", "ScreenInfo *", 0, 0, (void*)&_wrap_class_ScreenInfo, 0};
static swig_type_info _swigt__p_ScriptWrap = {"_p_ScriptWrap", "ScriptWrap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SoundChunk = {"_p_SoundChunk", "SoundChunk *", 0, 0, (void*)&_wrap_class_SoundChunk, 0};
static swig_type_info _swigt__p_SoundInfo = {"_p_SoundInfo", "SoundInfo *", 0, 0, (void*)&_wrap_class_SoundInfo, 0};
static swig_type_info _swigt__p_SoundQueue = {"_p_SoundQueue", "SoundQueue *", 0, 0, (void*)&_wrap_class_SoundQueue, 0};
static swig_type_info _swigt__p_SubFrame = {"_p_SubFrame", "SubFrame *", 0, 0, (void*)&_wrap_class_SubFrame, 0};
static swig_type_info _swigt__p_SynchData = {"_p_SynchData", "SynchData *", 0, 0, (void*)&_wrap_class_SynchData, 0};
static swig_type_info _swigt__p_TCPClient = {"_p_TCPClient", "TCPClient *", 0, 0, (void*)&_wrap_class_TCPClient, 0};
static swig_type_info _swigt__p_TCPsocket = {"_p_TCPsocket", "TCPsocket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TextureNode = {"_p_TextureNode", "TextureNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TextureStore = {"_p_TextureStore", "TextureStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ThreadSystem = {"_p_ThreadSystem", "ThreadSystem *", 0, 0, (void*)&_wrap_class_ThreadSystem, 0};
static swig_type_info _swigt__p_Timer = {"_p_Timer", "Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_TimerSystem = {"_p_TimerSystem", "TimerSystem *", 0, 0, (void*)&_wrap_class_TimerSystem, 0};
static swig_type_info _swigt__p_Trigger = {"_p_Trigger", "Trigger *", 0, 0, (void*)&_wrap_class_Trigger, 0};
static swig_type_info _swigt__p_TriggerManager = {"_p_TriggerManager", "TriggerManager *", 0, 0, (void*)&_wrap_class_TriggerManager, 0};
static swig_type_info _swigt__p_UDPClient = {"_p_UDPClient", "UDPClient *", 0, 0, (void*)&_wrap_class_UDPClient, 0};
static swig_type_info _swigt__p_UDPsocket = {"_p_UDPsocket", "UDPsocket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UI = {"_p_UI", "UI *", 0, 0, (void*)&_wrap_class_UI, 0};
static swig_type_info _swigt__p_UIManager = {"_p_UIManager", "UIManager *", 0, 0, (void*)&_wrap_class_UIManager, 0};
static swig_type_info _swigt__p_Uint8 = {"_p_Uint8", "Uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Unit = {"_p_Unit", "Unit *", 0, 0, (void*)&_wrap_class_Unit, 0};
static swig_type_info _swigt__p_UnitManager = {"_p_UnitManager", "UnitManager *", 0, 0, (void*)&_wrap_class_UnitManager, 0};
static swig_type_info _swigt__p_UnitNode = {"_p_UnitNode", "UnitNode *", 0, 0, (void*)&_wrap_class_UnitNode, 0};
static swig_type_info _swigt__p_VideoFrame = {"_p_VideoFrame", "VideoFrame *", 0, 0, (void*)&_wrap_class_VideoFrame, 0};
static swig_type_info _swigt__p_VideoPlayer = {"_p_VideoPlayer", "VideoPlayer *", 0, 0, (void*)&_wrap_class_VideoPlayer, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_data_base = {"_p_data_base", "data_base *", 0, 0, (void*)&_wrap_class_data_base, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_draw_base = {"_p_draw_base", "draw_base *", 0, 0, (void*)&_wrap_class_draw_base, 0};
static swig_type_info _swigt__p_f_p_void__p_void = {"_p_f_p_void__p_void", "thread_func|void *(*)(void *)", 0, 0, (void*)0, 0};
>>>>>>> TheIllusiveMan
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math_VECTOR = {"_p_math_VECTOR", "math_VECTOR *", 0, 0, (void*)&_wrap_class_math_VECTOR, 0};
static swig_type_info _swigt__p_math_point = {"_p_math_point", "math_point *", 0, 0, (void*)&_wrap_class_math_point, 0};
static swig_type_info _swigt__p_pChar = {"_p_pChar", "pChar *", 0, 0, (void*)&_wrap_class_pChar, 0};
<<<<<<< HEAD
static swig_type_info _swigt__p_psudo_type = {"_p_psudo_type", "psudo_type *|unknown_return *|fuzzy_obj *", 0, 0, (void*)&_wrap_class_psudo_type, 0};
static swig_type_info _swigt__p_sound_base = {"_p_sound_base", "sound_base *", 0, 0, (void*)&_wrap_class_sound_base, 0};
static swig_type_info _swigt__p_std__stackT_psudo_type_t = {"_p_std__stackT_psudo_type_t", "std::stack< fuzzy_obj > *|std::stack< psudo_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_psudo_type_t = {"_p_std__vectorT_psudo_type_t", "std::vector< fuzzy_obj > *|std::vector< psudo_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_textbox = {"_p_textbox", "textbox *", 0, 0, (void*)&_wrap_class_textbox, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void_ptr = {"_p_void_ptr", "void_ptr *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Button,
  &_swigt__p_Physics,
  &_swigt__p_ProgressBar,
  &_swigt__p_SDL_BlendMode,
  &_swigt__p_SDL_Event,
  &_swigt__p_SDL_Renderer,
  &_swigt__p_SDL_Texture,
  &_swigt__p_ScriptWrap,
  &_swigt__p_Timer,
  &_swigt__p_Trigger,
  &_swigt__p_UI,
  &_swigt__p_Uint8,
  &_swigt__p_Unit,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_data_base,
  &_swigt__p_draw_base,
  &_swigt__p_inputKeyboard,
  &_swigt__p_inputMouse,
=======
static swig_type_info _swigt__p_p_ParticleNode = {"_p_p_ParticleNode", "ParticleNode **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_psudo_type = {"_p_psudo_type", "psudo_type *|unknown_return *|fuzzy_obj *", 0, 0, (void*)&_wrap_class_unknown_return, 0};
static swig_type_info _swigt__p_pthread_cond_t = {"_p_pthread_cond_t", "pthread_cond_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthread_mutex_t = {"_p_pthread_mutex_t", "pthread_mutex_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthreads_opaqueT_pthread_cond_t_t = {"_p_pthreads_opaqueT_pthread_cond_t_t", "pcond_var *|pthreads_opaque< pthread_cond_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthreads_opaqueT_pthread_mutex_t_t = {"_p_pthreads_opaqueT_pthread_mutex_t_t", "pmutex *|pthreads_opaque< pthread_mutex_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthreads_opaqueT_pthread_t_p_t = {"_p_pthreads_opaqueT_pthread_t_p_t", "pthreads_opaque< pthread_t * > *|pthread *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_raw_input = {"_p_raw_input", "raw_input *", 0, 0, (void*)&_wrap_class_raw_input, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_size_t_t = {"_p_std__listT_size_t_t", "std::list< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_short_std__string_t = {"_p_std__mapT_unsigned_short_std__string_t", "std::map< unsigned short,std::string > *|std::map< word,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_psudo_type_t = {"_p_std__vectorT_psudo_type_t", "std::vector< fuzzy_obj > *|std::vector< psudo_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_t = {"_p_std__vectorT_size_t_t", "std::vector< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_textbox = {"_p_textbox", "textbox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|byte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "word *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *|void_ptr", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AIStore,
  &_swigt__p_Button,
  &_swigt__p_Cursor,
  &_swigt__p_CursorNode,
  &_swigt__p_DataBase,
  &_swigt__p_ExpansionInfo,
  &_swigt__p_ExpansionItem,
  &_swigt__p_Game,
  &_swigt__p_GameInfo,
  &_swigt__p_IOManager,
  &_swigt__p_IONode,
  &_swigt__p_IPaddress,
  &_swigt__p_Input,
  &_swigt__p_InputKeyboard,
  &_swigt__p_InputMouse,
  &_swigt__p_KeyNode,
  &_swigt__p_Layer,
  &_swigt__p_LayerSystem,
  &_swigt__p_Level,
  &_swigt__p_LocaleInfo,
  &_swigt__p_LocaleItem,
  &_swigt__p_LocaleNode,
  &_swigt__p_LocaleReader,
  &_swigt__p_ModAdapter,
  &_swigt__p_ModuleNode,
  &_swigt__p_ModuleSystem,
  &_swigt__p_NetNode,
  &_swigt__p_NetworkManager,
  &_swigt__p_Particle,
  &_swigt__p_ParticleCluster,
  &_swigt__p_ParticleNode,
  &_swigt__p_ParticleSystem,
  &_swigt__p_Physics,
  &_swigt__p_Range,
  &_swigt__p_Resolution,
  &_swigt__p_SDL_BlendMode,
  &_swigt__p_SDL_Event,
  &_swigt__p_SDL_Rect,
  &_swigt__p_SDL_Renderer,
  &_swigt__p_SDL_Scancode,
  &_swigt__p_SDL_Texture,
  &_swigt__p_SQLGenerator,
  &_swigt__p_SWIGCDATA,
  &_swigt__p_ScreenInfo,
  &_swigt__p_ScriptWrap,
  &_swigt__p_SoundChunk,
  &_swigt__p_SoundInfo,
  &_swigt__p_SoundQueue,
  &_swigt__p_SubFrame,
  &_swigt__p_SynchData,
  &_swigt__p_TCPClient,
  &_swigt__p_TCPsocket,
  &_swigt__p_TextureNode,
  &_swigt__p_TextureStore,
  &_swigt__p_ThreadSystem,
  &_swigt__p_Timer,
  &_swigt__p_TimerSystem,
  &_swigt__p_Trigger,
  &_swigt__p_TriggerManager,
  &_swigt__p_UDPClient,
  &_swigt__p_UDPsocket,
  &_swigt__p_UI,
  &_swigt__p_UIManager,
  &_swigt__p_Uint8,
  &_swigt__p_Unit,
  &_swigt__p_UnitManager,
  &_swigt__p_UnitNode,
  &_swigt__p_VideoFrame,
  &_swigt__p_VideoPlayer,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_data_base,
  &_swigt__p_double,
  &_swigt__p_draw_base,
  &_swigt__p_f_p_void__p_void,
>>>>>>> TheIllusiveMan
  &_swigt__p_int,
  &_swigt__p_math_VECTOR,
  &_swigt__p_math_point,
  &_swigt__p_pChar,
<<<<<<< HEAD
  &_swigt__p_psudo_type,
  &_swigt__p_sound_base,
  &_swigt__p_std__stackT_psudo_type_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_psudo_type_t,
  &_swigt__p_textbox,
  &_swigt__p_unsigned_char,
  &_swigt__p_void_ptr,
};

static swig_cast_info _swigc__p_Button[] = {  {&_swigt__p_Button, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Physics[] = {  {&_swigt__p_Physics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProgressBar[] = {  {&_swigt__p_ProgressBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_BlendMode[] = {  {&_swigt__p_SDL_BlendMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Renderer[] = {  {&_swigt__p_SDL_Renderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Texture[] = {  {&_swigt__p_SDL_Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScriptWrap[] = {  {&_swigt__p_ScriptWrap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Timer[] = {  {&_swigt__p_Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Trigger[] = {  {&_swigt__p_Trigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UI[] = {  {&_swigt__p_UI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Uint8[] = {  {&_swigt__p_Uint8, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Unit[] = {  {&_swigt__p_Unit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_data_base[] = {  {&_swigt__p_data_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_draw_base[] = {  {&_swigt__p_draw_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inputKeyboard[] = {  {&_swigt__p_inputKeyboard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_inputMouse[] = {  {&_swigt__p_inputMouse, 0, 0, 0},{0, 0, 0, 0}};
=======
  &_swigt__p_p_ParticleNode,
  &_swigt__p_p_char,
  &_swigt__p_psudo_type,
  &_swigt__p_pthread_cond_t,
  &_swigt__p_pthread_mutex_t,
  &_swigt__p_pthreads_opaqueT_pthread_cond_t_t,
  &_swigt__p_pthreads_opaqueT_pthread_mutex_t_t,
  &_swigt__p_pthreads_opaqueT_pthread_t_p_t,
  &_swigt__p_raw_input,
  &_swigt__p_size_t,
  &_swigt__p_std__listT_size_t_t,
  &_swigt__p_std__mapT_unsigned_short_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_psudo_type_t,
  &_swigt__p_std__vectorT_size_t_t,
  &_swigt__p_textbox,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_AIStore[] = {  {&_swigt__p_AIStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Button[] = {  {&_swigt__p_Button, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cursor[] = {  {&_swigt__p_Game, _p_GameTo_p_Cursor, 0, 0},  {&_swigt__p_Cursor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CursorNode[] = {  {&_swigt__p_CursorNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataBase[] = {  {&_swigt__p_DataBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExpansionInfo[] = {  {&_swigt__p_ExpansionInfo, 0, 0, 0},  {&_swigt__p_GameInfo, _p_GameInfoTo_p_ExpansionInfo, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_ExpansionInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExpansionItem[] = {  {&_swigt__p_ExpansionItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Game[] = {  {&_swigt__p_Game, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GameInfo[] = {  {&_swigt__p_GameInfo, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_GameInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IOManager[] = {  {&_swigt__p_IOManager, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_IOManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IONode[] = {  {&_swigt__p_IONode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IPaddress[] = {  {&_swigt__p_IPaddress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Input[] = {  {&_swigt__p_Game, _p_GameTo_p_Input, 0, 0},  {&_swigt__p_Input, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InputKeyboard[] = {  {&_swigt__p_InputKeyboard, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_InputKeyboard, 0, 0},  {&_swigt__p_Input, _p_InputTo_p_InputKeyboard, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InputMouse[] = {  {&_swigt__p_InputMouse, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_InputMouse, 0, 0},  {&_swigt__p_Input, _p_InputTo_p_InputMouse, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyNode[] = {  {&_swigt__p_KeyNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Layer[] = {  {&_swigt__p_Layer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LayerSystem[] = {  {&_swigt__p_LayerSystem, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_LayerSystem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Level[] = {  {&_swigt__p_Level, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LocaleInfo[] = {  {&_swigt__p_LocaleInfo, 0, 0, 0},  {&_swigt__p_GameInfo, _p_GameInfoTo_p_LocaleInfo, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_LocaleInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LocaleItem[] = {  {&_swigt__p_LocaleItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LocaleNode[] = {  {&_swigt__p_LocaleNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LocaleReader[] = {  {&_swigt__p_LocaleReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ModAdapter[] = {  {&_swigt__p_ModAdapter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ModuleNode[] = {  {&_swigt__p_ModuleNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ModuleSystem[] = {  {&_swigt__p_Game, _p_GameTo_p_ModuleSystem, 0, 0},  {&_swigt__p_ModuleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetNode[] = {  {&_swigt__p_NetNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetworkManager[] = {  {&_swigt__p_NetworkManager, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_NetworkManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Particle[] = {  {&_swigt__p_Particle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParticleCluster[] = {  {&_swigt__p_ParticleCluster, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParticleNode[] = {  {&_swigt__p_ParticleNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParticleSystem[] = {  {&_swigt__p_Game, _p_GameTo_p_ParticleSystem, 0, 0},  {&_swigt__p_ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Physics[] = {  {&_swigt__p_Physics, 0, 0, 0},  {&_swigt__p_Particle, _p_ParticleTo_p_Physics, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Range[] = {  {&_swigt__p_Range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Resolution[] = {  {&_swigt__p_Resolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_BlendMode[] = {  {&_swigt__p_SDL_BlendMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Rect[] = {  {&_swigt__p_SDL_Rect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Renderer[] = {  {&_swigt__p_SDL_Renderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Scancode[] = {  {&_swigt__p_SDL_Scancode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Texture[] = {  {&_swigt__p_SDL_Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SQLGenerator[] = {  {&_swigt__p_SQLGenerator, 0, 0, 0},  {&_swigt__p_DataBase, _p_DataBaseTo_p_SQLGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SWIGCDATA[] = {  {&_swigt__p_SWIGCDATA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScreenInfo[] = {  {&_swigt__p_ScreenInfo, 0, 0, 0},  {&_swigt__p_GameInfo, _p_GameInfoTo_p_ScreenInfo, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_ScreenInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScriptWrap[] = {  {&_swigt__p_ScriptWrap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundChunk[] = {  {&_swigt__p_SoundChunk, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundInfo[] = {  {&_swigt__p_SoundInfo, 0, 0, 0},  {&_swigt__p_GameInfo, _p_GameInfoTo_p_SoundInfo, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_SoundInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SoundQueue[] = {  {&_swigt__p_SoundQueue, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_SoundQueue, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SubFrame[] = {  {&_swigt__p_SubFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SynchData[] = {  {&_swigt__p_SynchData, 0, 0, 0},  {&_swigt__p_VideoFrame, _p_VideoFrameTo_p_SynchData, 0, 0},  {&_swigt__p_SoundChunk, _p_SoundChunkTo_p_SynchData, 0, 0},  {&_swigt__p_SubFrame, _p_SubFrameTo_p_SynchData, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCPClient[] = {  {&_swigt__p_TCPClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCPsocket[] = {  {&_swigt__p_TCPsocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextureNode[] = {  {&_swigt__p_TextureNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextureStore[] = {  {&_swigt__p_TextureStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ThreadSystem[] = {  {&_swigt__p_ThreadSystem, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_ThreadSystem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Timer[] = {  {&_swigt__p_Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TimerSystem[] = {  {&_swigt__p_TimerSystem, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_TimerSystem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Trigger[] = {  {&_swigt__p_Trigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TriggerManager[] = {  {&_swigt__p_TriggerManager, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_TriggerManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UDPClient[] = {  {&_swigt__p_UDPClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UDPsocket[] = {  {&_swigt__p_UDPsocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UI[] = {  {&_swigt__p_UI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UIManager[] = {  {&_swigt__p_UIManager, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_UIManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Uint8[] = {  {&_swigt__p_Uint8, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Unit[] = {  {&_swigt__p_Unit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnitManager[] = {  {&_swigt__p_UnitManager, 0, 0, 0},  {&_swigt__p_Game, _p_GameTo_p_UnitManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnitNode[] = {  {&_swigt__p_UnitNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VideoFrame[] = {  {&_swigt__p_VideoFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VideoPlayer[] = {  {&_swigt__p_Game, _p_GameTo_p_VideoPlayer, 0, 0},  {&_swigt__p_VideoPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_data_base[] = {  {&_swigt__p_data_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_draw_base[] = {  {&_swigt__p_draw_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__p_void[] = {  {&_swigt__p_f_p_void__p_void, 0, 0, 0},{0, 0, 0, 0}};
>>>>>>> TheIllusiveMan
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math_VECTOR[] = {  {&_swigt__p_math_VECTOR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math_point[] = {  {&_swigt__p_math_point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pChar[] = {  {&_swigt__p_pChar, 0, 0, 0},{0, 0, 0, 0}};
<<<<<<< HEAD
static swig_cast_info _swigc__p_psudo_type[] = {  {&_swigt__p_psudo_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sound_base[] = {  {&_swigt__p_sound_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stackT_psudo_type_t[] = {  {&_swigt__p_std__stackT_psudo_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_psudo_type_t[] = {  {&_swigt__p_std__vectorT_psudo_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_textbox[] = {  {&_swigt__p_textbox, 0, 0, 0},  {&_swigt__p_Button, _p_ButtonTo_p_textbox, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void_ptr[] = {  {&_swigt__p_void_ptr, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Button,
  _swigc__p_Physics,
  _swigc__p_ProgressBar,
  _swigc__p_SDL_BlendMode,
  _swigc__p_SDL_Event,
  _swigc__p_SDL_Renderer,
  _swigc__p_SDL_Texture,
  _swigc__p_ScriptWrap,
  _swigc__p_Timer,
  _swigc__p_Trigger,
  _swigc__p_UI,
  _swigc__p_Uint8,
  _swigc__p_Unit,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_data_base,
  _swigc__p_draw_base,
  _swigc__p_inputKeyboard,
  _swigc__p_inputMouse,
=======
static swig_cast_info _swigc__p_p_ParticleNode[] = {  {&_swigt__p_p_ParticleNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_psudo_type[] = {  {&_swigt__p_psudo_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthread_cond_t[] = {  {&_swigt__p_pthread_cond_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthread_mutex_t[] = {  {&_swigt__p_pthread_mutex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthreads_opaqueT_pthread_cond_t_t[] = {  {&_swigt__p_pthreads_opaqueT_pthread_cond_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthreads_opaqueT_pthread_mutex_t_t[] = {  {&_swigt__p_pthreads_opaqueT_pthread_mutex_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthreads_opaqueT_pthread_t_p_t[] = {  {&_swigt__p_pthreads_opaqueT_pthread_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_raw_input[] = {  {&_swigt__p_raw_input, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_size_t_t[] = {  {&_swigt__p_std__listT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_short_std__string_t[] = {  {&_swigt__p_std__mapT_unsigned_short_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_psudo_type_t[] = {  {&_swigt__p_std__vectorT_psudo_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_t[] = {  {&_swigt__p_std__vectorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_textbox[] = {  {&_swigt__p_textbox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AIStore,
  _swigc__p_Button,
  _swigc__p_Cursor,
  _swigc__p_CursorNode,
  _swigc__p_DataBase,
  _swigc__p_ExpansionInfo,
  _swigc__p_ExpansionItem,
  _swigc__p_Game,
  _swigc__p_GameInfo,
  _swigc__p_IOManager,
  _swigc__p_IONode,
  _swigc__p_IPaddress,
  _swigc__p_Input,
  _swigc__p_InputKeyboard,
  _swigc__p_InputMouse,
  _swigc__p_KeyNode,
  _swigc__p_Layer,
  _swigc__p_LayerSystem,
  _swigc__p_Level,
  _swigc__p_LocaleInfo,
  _swigc__p_LocaleItem,
  _swigc__p_LocaleNode,
  _swigc__p_LocaleReader,
  _swigc__p_ModAdapter,
  _swigc__p_ModuleNode,
  _swigc__p_ModuleSystem,
  _swigc__p_NetNode,
  _swigc__p_NetworkManager,
  _swigc__p_Particle,
  _swigc__p_ParticleCluster,
  _swigc__p_ParticleNode,
  _swigc__p_ParticleSystem,
  _swigc__p_Physics,
  _swigc__p_Range,
  _swigc__p_Resolution,
  _swigc__p_SDL_BlendMode,
  _swigc__p_SDL_Event,
  _swigc__p_SDL_Rect,
  _swigc__p_SDL_Renderer,
  _swigc__p_SDL_Scancode,
  _swigc__p_SDL_Texture,
  _swigc__p_SQLGenerator,
  _swigc__p_SWIGCDATA,
  _swigc__p_ScreenInfo,
  _swigc__p_ScriptWrap,
  _swigc__p_SoundChunk,
  _swigc__p_SoundInfo,
  _swigc__p_SoundQueue,
  _swigc__p_SubFrame,
  _swigc__p_SynchData,
  _swigc__p_TCPClient,
  _swigc__p_TCPsocket,
  _swigc__p_TextureNode,
  _swigc__p_TextureStore,
  _swigc__p_ThreadSystem,
  _swigc__p_Timer,
  _swigc__p_TimerSystem,
  _swigc__p_Trigger,
  _swigc__p_TriggerManager,
  _swigc__p_UDPClient,
  _swigc__p_UDPsocket,
  _swigc__p_UI,
  _swigc__p_UIManager,
  _swigc__p_Uint8,
  _swigc__p_Unit,
  _swigc__p_UnitManager,
  _swigc__p_UnitNode,
  _swigc__p_VideoFrame,
  _swigc__p_VideoPlayer,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_data_base,
  _swigc__p_double,
  _swigc__p_draw_base,
  _swigc__p_f_p_void__p_void,
>>>>>>> TheIllusiveMan
  _swigc__p_int,
  _swigc__p_math_VECTOR,
  _swigc__p_math_point,
  _swigc__p_pChar,
<<<<<<< HEAD
  _swigc__p_psudo_type,
  _swigc__p_sound_base,
  _swigc__p_std__stackT_psudo_type_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_psudo_type_t,
  _swigc__p_textbox,
  _swigc__p_unsigned_char,
  _swigc__p_void_ptr,
=======
  _swigc__p_p_ParticleNode,
  _swigc__p_p_char,
  _swigc__p_psudo_type,
  _swigc__p_pthread_cond_t,
  _swigc__p_pthread_mutex_t,
  _swigc__p_pthreads_opaqueT_pthread_cond_t_t,
  _swigc__p_pthreads_opaqueT_pthread_mutex_t_t,
  _swigc__p_pthreads_opaqueT_pthread_t_p_t,
  _swigc__p_raw_input,
  _swigc__p_size_t,
  _swigc__p_std__listT_size_t_t,
  _swigc__p_std__mapT_unsigned_short_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_psudo_type_t,
  _swigc__p_std__vectorT_size_t_t,
  _swigc__p_textbox,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_short,
  _swigc__p_void,
>>>>>>> TheIllusiveMan
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
<<<<<<< HEAD
 * The generated swig_type_info structures are assigned staticly to an initial
=======
 * The generated swig_type_info structures are assigned statically to an initial
>>>>>>> TheIllusiveMan
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
<<<<<<< HEAD
  int found, init;
=======
  int init;
>>>>>>> TheIllusiveMan

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
<<<<<<< HEAD
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
=======
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
>>>>>>> TheIllusiveMan
      }
      iter=iter->next;
    } while (iter!= module_head);

<<<<<<< HEAD
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
=======
    /* otherwise we must add our module into the list */
>>>>>>> TheIllusiveMan
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
<<<<<<< HEAD
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
=======
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
>>>>>>> TheIllusiveMan
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

<<<<<<< HEAD
#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
=======
#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
>>>>>>> TheIllusiveMan
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
<<<<<<< HEAD
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
=======
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
>>>>>>> TheIllusiveMan
    }
  }
#endif

<<<<<<< HEAD
#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
=======
#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

>>>>>>> TheIllusiveMan
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

